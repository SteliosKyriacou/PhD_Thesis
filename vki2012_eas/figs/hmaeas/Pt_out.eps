%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADP5DE.tmp.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Kampolis Ioannis
%%CreationDate: 14/2/2009, 11:54:50 μμ
%%BoundingBox: -1 0 281 206
%%HiResBoundingBox: 0 0 280.0940 205.6801
%%CropBox: 0 0 280.0940 205.6801
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: 
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	1 index dup/ID get exch/Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.30 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.30 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.30 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get ne dup
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
				if
				end
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} (% &end XMP packet& %) ReadBypdfmark_5
<?xpacket begin='ο»Ώ' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="Acrobat Distiller 8.0.0 (Windows)"
   xap:CreatorTool="OriginLab Corporation"
   xap:ModifyDate="2009-02-14T23:54:18+02:00"
   xap:CreateDate="2009-02-14T23:54:18+02:00"
   dc:format="application/pdf"
   xapMM:DocumentID="uuid:72cfba02-5e53-4bf2-86a7-18452d1ce1a8"
   xapMM:InstanceID="uuid:c3121fc4-d222-4cb6-ba04-b16866b37d92">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">C:Documents and SettingsKampolis IoannisDesktopPt_out.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
<< /0 
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]

/CSA add_res
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -205.68 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-7.62939e-6 0 mo
-7.62939e-6 205.68 li
280.094 205.68 li
280.094 0 li
cp
clp
[1 0 0 1 -24.369 0 ]ct
.204 lw
1 lc
1 lj
10 ml
[] 0 dsh
false sadj
89.99 179.1 mo
89.99 3.12003 li
false sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.75294 .75294 .75294 colr
@
148.045 179.1 mo
148.045 3.12003 li
@
206.1 179.1 mo
206.1 3.12003 li
@
264.155 179.1 mo
264.155 3.12003 li
@
60.912 157.077 mo
293.131 157.077 li
@
60.912 113.133 mo
293.131 113.133 li
@
60.912 69.087 mo
293.131 69.087 li
@
60.912 25.143 mo
293.131 25.143 li
@
.306 lw
118.966 179.1 mo
118.966 3.12003 li
@
177.021 179.1 mo
177.021 3.12003 li
@
235.076 179.1 mo
235.076 3.12003 li
@
60.912 135.156 mo
293.131 135.156 li
@
60.912 91.11 mo
293.131 91.11 li
@
60.912 47.064 mo
293.131 47.064 li
@
52.463 187.686 mo
52.206 187.592 52.016 187.458 51.892 187.284 cv
51.769 187.11 51.707 186.902 51.707 186.659 cv
51.707 186.292 51.839 185.984 52.102 185.735 cv
52.366 185.485 52.716 185.36 53.154 185.36 cv
53.594 185.36 53.948 185.488 54.216 185.743 cv
54.484 185.999 54.618 186.31 54.618 186.676 cv
54.618 186.91 54.557 187.113 54.434 187.286 cv
54.312 187.459 54.126 187.592 53.876 187.686 cv
54.185 187.787 54.421 187.949 54.582 188.174 cv
54.744 188.398 54.825 188.666 54.825 188.978 cv
54.825 189.408 54.672 189.77 54.367 190.063 cv
54.063 190.356 53.662 190.503 53.164 190.503 cv
52.667 190.503 52.266 190.356 51.961 190.061 cv
51.656 189.767 51.504 189.4 51.504 188.96 cv
51.504 188.633 51.587 188.359 51.753 188.138 cv
51.919 187.917 52.156 187.766 52.463 187.686 cv
cp
52.339 186.638 mo
52.339 186.876 52.416 187.071 52.57 187.222 cv
52.723 187.373 52.922 187.449 53.168 187.449 cv
53.406 187.449 53.601 187.374 53.754 187.224 cv
53.906 187.074 53.982 186.89 53.982 186.673 cv
53.982 186.446 53.904 186.255 53.747 186.101 cv
53.59 185.946 53.395 185.869 53.161 185.869 cv
52.925 185.869 52.729 185.944 52.573 186.096 cv
52.417 186.247 52.339 186.428 52.339 186.638 cv
cp
52.14 188.964 mo
52.14 189.14 52.182 189.311 52.265 189.476 cv
52.349 189.641 52.473 189.768 52.638 189.859 cv
52.803 189.949 52.981 189.994 53.171 189.994 cv
53.467 189.994 53.711 189.899 53.903 189.709 cv
54.096 189.519 54.192 189.278 54.192 188.984 cv
54.192 188.687 54.093 188.441 53.895 188.246 cv
53.696 188.051 53.448 187.954 53.151 187.954 cv
52.859 187.954 52.618 188.05 52.427 188.242 cv
52.236 188.435 52.14 188.675 52.14 188.964 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
55.388 187.934 mo
55.388 187.339 55.449 186.859 55.572 186.496 cv
55.695 186.133 55.877 185.853 56.118 185.657 cv
56.36 185.46 56.664 185.361 57.031 185.361 cv
57.302 185.361 57.539 185.415 57.743 185.524 cv
57.947 185.633 58.115 185.79 58.248 185.995 cv
58.381 186.2 58.485 186.449 58.561 186.744 cv
58.636 187.038 58.674 187.435 58.674 187.934 cv
58.674 188.525 58.614 189.002 58.492 189.365 cv
58.371 189.728 58.189 190.008 57.947 190.206 cv
57.705 190.404 57.4 190.503 57.031 190.503 cv
56.545 190.503 56.164 190.329 55.886 189.981 cv
55.554 189.562 55.388 188.88 55.388 187.934 cv
cp
56.024 187.934 mo
56.024 188.761 56.121 189.311 56.314 189.585 cv
56.508 189.858 56.747 189.995 57.031 189.995 cv
57.315 189.995 57.554 189.858 57.748 189.583 cv
57.942 189.308 58.038 188.758 58.038 187.934 cv
58.038 187.105 57.942 186.554 57.748 186.282 cv
57.554 186.009 57.313 185.873 57.024 185.873 cv
56.74 185.873 56.513 185.993 56.344 186.234 cv
56.131 186.54 56.024 187.107 56.024 187.934 cv
f
59.265 187.934 mo
59.265 187.339 59.326 186.859 59.449 186.496 cv
59.572 186.133 59.754 185.853 59.995 185.657 cv
60.237 185.46 60.541 185.361 60.908 185.361 cv
61.179 185.361 61.416 185.415 61.62 185.524 cv
61.824 185.633 61.992 185.79 62.125 185.995 cv
62.258 186.2 62.362 186.449 62.438 186.744 cv
62.513 187.038 62.551 187.435 62.551 187.934 cv
62.551 188.525 62.491 189.002 62.369 189.365 cv
62.248 189.728 62.066 190.008 61.824 190.206 cv
61.582 190.404 61.277 190.503 60.908 190.503 cv
60.422 190.503 60.041 190.329 59.763 189.981 cv
59.431 189.562 59.265 188.88 59.265 187.934 cv
cp
59.901 187.934 mo
59.901 188.761 59.998 189.311 60.191 189.585 cv
60.385 189.858 60.624 189.995 60.908 189.995 cv
61.192 189.995 61.431 189.858 61.625 189.583 cv
61.818 189.308 61.915 188.758 61.915 187.934 cv
61.915 187.105 61.818 186.554 61.625 186.282 cv
61.431 186.009 61.19 185.873 60.901 185.873 cv
60.617 185.873 60.39 185.993 60.221 186.234 cv
60.008 186.54 59.901 187.107 59.901 187.934 cv
f
63.142 187.934 mo
63.142 187.339 63.203 186.859 63.326 186.496 cv
63.449 186.133 63.631 185.853 63.872 185.657 cv
64.114 185.46 64.418 185.361 64.785 185.361 cv
65.056 185.361 65.293 185.415 65.497 185.524 cv
65.701 185.633 65.869 185.79 66.002 185.995 cv
66.135 186.2 66.239 186.449 66.315 186.744 cv
66.39 187.038 66.428 187.435 66.428 187.934 cv
66.428 188.525 66.368 189.002 66.246 189.365 cv
66.125 189.728 65.943 190.008 65.701 190.206 cv
65.459 190.404 65.154 190.503 64.785 190.503 cv
64.299 190.503 63.918 190.329 63.64 189.981 cv
63.308 189.562 63.142 188.88 63.142 187.934 cv
cp
63.778 187.934 mo
63.778 188.761 63.875 189.311 64.068 189.585 cv
64.262 189.858 64.501 189.995 64.785 189.995 cv
65.069 189.995 65.308 189.858 65.502 189.583 cv
65.695 189.308 65.792 188.758 65.792 187.934 cv
65.792 187.105 65.695 186.554 65.502 186.282 cv
65.308 186.009 65.067 185.873 64.778 185.873 cv
64.494 185.873 64.267 185.993 64.098 186.234 cv
63.885 186.54 63.778 187.107 63.778 187.934 cv
f
67.02 187.934 mo
67.02 187.339 67.081 186.859 67.204 186.496 cv
67.327 186.133 67.509 185.853 67.75 185.657 cv
67.992 185.46 68.296 185.361 68.663 185.361 cv
68.934 185.361 69.171 185.415 69.375 185.524 cv
69.579 185.633 69.747 185.79 69.88 185.995 cv
70.013 186.2 70.117 186.449 70.193 186.744 cv
70.268 187.038 70.306 187.435 70.306 187.934 cv
70.306 188.525 70.246 189.002 70.124 189.365 cv
70.003 189.728 69.821 190.008 69.579 190.206 cv
69.337 190.404 69.032 190.503 68.663 190.503 cv
68.177 190.503 67.796 190.329 67.518 189.981 cv
67.186 189.562 67.02 188.88 67.02 187.934 cv
cp
67.656 187.934 mo
67.656 188.761 67.753 189.311 67.946 189.585 cv
68.14 189.858 68.379 189.995 68.663 189.995 cv
68.947 189.995 69.186 189.858 69.38 189.583 cv
69.573 189.308 69.67 188.758 69.67 187.934 cv
69.67 187.105 69.573 186.554 69.38 186.282 cv
69.186 186.009 68.945 185.873 68.656 185.873 cv
68.372 185.873 68.145 185.993 67.976 186.234 cv
67.763 186.54 67.656 187.107 67.656 187.934 cv
f
110.518 187.686 mo
110.261 187.592 110.071 187.458 109.947 187.284 cv
109.824 187.11 109.762 186.902 109.762 186.659 cv
109.762 186.292 109.894 185.984 110.157 185.735 cv
110.421 185.485 110.771 185.36 111.209 185.36 cv
111.649 185.36 112.003 185.488 112.271 185.743 cv
112.539 185.999 112.673 186.31 112.673 186.676 cv
112.673 186.91 112.612 187.113 112.489 187.286 cv
112.367 187.459 112.181 187.592 111.931 187.686 cv
112.24 187.787 112.476 187.949 112.637 188.174 cv
112.799 188.398 112.88 188.666 112.88 188.978 cv
112.88 189.408 112.727 189.77 112.422 190.063 cv
112.118 190.356 111.717 190.503 111.219 190.503 cv
110.722 190.503 110.321 190.356 110.016 190.061 cv
109.711 189.767 109.559 189.4 109.559 188.96 cv
109.559 188.633 109.642 188.359 109.808 188.138 cv
109.974 187.917 110.211 187.766 110.518 187.686 cv
cp
110.394 186.638 mo
110.394 186.876 110.471 187.071 110.625 187.222 cv
110.778 187.373 110.977 187.449 111.223 187.449 cv
111.461 187.449 111.656 187.374 111.809 187.224 cv
111.961 187.074 112.037 186.89 112.037 186.673 cv
112.037 186.446 111.959 186.255 111.802 186.101 cv
111.645 185.946 111.45 185.869 111.216 185.869 cv
110.98 185.869 110.784 185.944 110.628 186.096 cv
110.472 186.247 110.394 186.428 110.394 186.638 cv
cp
110.195 188.964 mo
110.195 189.14 110.237 189.311 110.32 189.476 cv
110.404 189.641 110.528 189.768 110.693 189.859 cv
110.858 189.949 111.036 189.994 111.226 189.994 cv
111.522 189.994 111.766 189.899 111.958 189.709 cv
112.151 189.519 112.247 189.278 112.247 188.984 cv
112.247 188.687 112.148 188.441 111.95 188.246 cv
111.751 188.051 111.503 187.954 111.205 187.954 cv
110.914 187.954 110.673 188.05 110.482 188.242 cv
110.291 188.435 110.195 188.675 110.195 188.964 cv
f
113.443 189.098 mo
114.093 189.043 113.443 189.098 114.093 189.043 cv
114.141 189.359 114.253 189.597 114.428 189.756 cv
114.603 189.915 114.815 189.995 115.062 189.995 cv
115.36 189.995 115.612 189.882 115.818 189.658 cv
116.025 189.434 116.128 189.136 116.128 188.765 cv
116.128 188.412 116.029 188.134 115.83 187.93 cv
115.632 187.726 115.373 187.624 115.052 187.624 cv
114.852 187.624 114.672 187.67 114.512 187.76 cv
114.352 187.85 114.226 187.968 114.134 188.112 cv
113.553 188.037 114.134 188.112 113.553 188.037 cv
114.041 185.45 113.553 188.037 114.041 185.45 cv
116.547 185.45 114.041 185.45 116.547 185.45 cv
116.547 186.041 116.547 185.45 116.547 186.041 cv
114.536 186.041 116.547 186.041 114.536 186.041 cv
114.265 187.394 114.536 186.041 114.265 187.394 cv
114.567 187.184 114.884 187.078 115.217 187.078 cv
115.657 187.078 116.028 187.23 116.331 187.535 cv
116.633 187.84 116.784 188.231 116.784 188.71 cv
116.784 189.166 116.651 189.559 116.386 189.892 cv
116.062 190.299 115.621 190.503 115.062 190.503 cv
114.604 190.503 114.23 190.375 113.94 190.118 cv
113.65 189.862 113.484 189.522 113.443 189.098 cv
f
117.32 187.934 mo
117.32 187.339 117.381 186.859 117.504 186.496 cv
117.627 186.133 117.809 185.853 118.05 185.657 cv
118.292 185.46 118.596 185.361 118.963 185.361 cv
119.234 185.361 119.471 185.415 119.675 185.524 cv
119.879 185.633 120.047 185.79 120.18 185.995 cv
120.313 186.2 120.417 186.449 120.493 186.744 cv
120.568 187.038 120.606 187.435 120.606 187.934 cv
120.606 188.525 120.546 189.002 120.424 189.365 cv
120.303 189.728 120.121 190.008 119.879 190.206 cv
119.637 190.404 119.332 190.503 118.963 190.503 cv
118.477 190.503 118.096 190.329 117.818 189.981 cv
117.486 189.562 117.32 188.88 117.32 187.934 cv
cp
117.956 187.934 mo
117.956 188.761 118.053 189.311 118.246 189.585 cv
118.44 189.858 118.679 189.995 118.963 189.995 cv
119.247 189.995 119.486 189.858 119.68 189.583 cv
119.873 189.308 119.97 188.758 119.97 187.934 cv
119.97 187.105 119.873 186.554 119.68 186.282 cv
119.486 186.009 119.245 185.873 118.956 185.873 cv
118.672 185.873 118.445 185.993 118.276 186.234 cv
118.063 186.54 117.956 187.107 117.956 187.934 cv
f
121.197 187.934 mo
121.197 187.339 121.258 186.859 121.381 186.496 cv
121.504 186.133 121.686 185.853 121.927 185.657 cv
122.169 185.46 122.473 185.361 122.84 185.361 cv
123.111 185.361 123.348 185.415 123.552 185.524 cv
123.756 185.633 123.924 185.79 124.057 185.995 cv
124.19 186.2 124.294 186.449 124.37 186.744 cv
124.445 187.038 124.483 187.435 124.483 187.934 cv
124.483 188.525 124.423 189.002 124.301 189.365 cv
124.18 189.728 123.998 190.008 123.756 190.206 cv
123.514 190.404 123.209 190.503 122.84 190.503 cv
122.354 190.503 121.973 190.329 121.695 189.981 cv
121.363 189.562 121.197 188.88 121.197 187.934 cv
cp
121.833 187.934 mo
121.833 188.761 121.93 189.311 122.123 189.585 cv
122.317 189.858 122.556 189.995 122.84 189.995 cv
123.124 189.995 123.363 189.858 123.557 189.583 cv
123.75 189.308 123.847 188.758 123.847 187.934 cv
123.847 187.105 123.75 186.554 123.557 186.282 cv
123.363 186.009 123.122 185.873 122.833 185.873 cv
122.549 185.873 122.322 185.993 122.153 186.234 cv
121.94 186.54 121.833 187.107 121.833 187.934 cv
f
125.074 187.934 mo
125.074 187.339 125.135 186.859 125.258 186.496 cv
125.381 186.133 125.563 185.853 125.804 185.657 cv
126.046 185.46 126.35 185.361 126.717 185.361 cv
126.988 185.361 127.225 185.415 127.429 185.524 cv
127.633 185.633 127.801 185.79 127.934 185.995 cv
128.067 186.2 128.171 186.449 128.247 186.744 cv
128.322 187.038 128.36 187.435 128.36 187.934 cv
128.36 188.525 128.3 189.002 128.178 189.365 cv
128.057 189.728 127.875 190.008 127.633 190.206 cv
127.391 190.404 127.086 190.503 126.717 190.503 cv
126.231 190.503 125.85 190.329 125.572 189.981 cv
125.24 189.562 125.074 188.88 125.074 187.934 cv
cp
125.71 187.934 mo
125.71 188.761 125.807 189.311 126 189.585 cv
126.194 189.858 126.433 189.995 126.717 189.995 cv
127.001 189.995 127.24 189.858 127.434 189.583 cv
127.627 189.308 127.724 188.758 127.724 187.934 cv
127.724 187.105 127.627 186.554 127.434 186.282 cv
127.24 186.009 126.999 185.873 126.71 185.873 cv
126.426 185.873 126.199 185.993 126.03 186.234 cv
125.817 186.54 125.71 187.107 125.71 187.934 cv
f
167.713 189.253 mo
168.308 189.198 167.713 189.253 168.308 189.198 cv
168.358 189.477 168.454 189.68 168.596 189.806 cv
168.739 189.932 168.921 189.995 169.143 189.995 cv
169.333 189.995 169.5 189.951 169.643 189.864 cv
169.786 189.777 169.904 189.661 169.996 189.516 cv
170.087 189.37 170.164 189.174 170.226 188.927 cv
170.288 188.679 170.319 188.427 170.319 188.171 cv
170.319 188.143 170.318 188.102 170.315 188.047 cv
170.191 188.244 170.022 188.404 169.808 188.526 cv
169.594 188.649 169.362 188.71 169.112 188.71 cv
168.695 188.71 168.342 188.559 168.053 188.257 cv
167.765 187.955 167.62 187.556 167.62 187.061 cv
167.62 186.551 167.771 186.14 168.072 185.828 cv
168.374 185.517 168.751 185.361 169.205 185.361 cv
169.533 185.361 169.832 185.449 170.104 185.625 cv
170.375 185.802 170.582 186.053 170.723 186.379 cv
170.863 186.706 170.934 187.178 170.934 187.797 cv
170.934 188.44 170.864 188.952 170.724 189.334 cv
170.584 189.715 170.376 190.005 170.1 190.205 cv
169.824 190.404 169.501 190.503 169.129 190.503 cv
168.735 190.503 168.413 190.394 168.163 190.175 cv
167.914 189.957 167.763 189.649 167.713 189.253 cv
cp
170.246 187.03 mo
170.246 186.676 170.152 186.394 169.963 186.185 cv
169.774 185.977 169.546 185.873 169.281 185.873 cv
169.006 185.873 168.766 185.985 168.562 186.209 cv
168.358 186.434 168.256 186.725 168.256 187.082 cv
168.256 187.403 168.353 187.663 168.547 187.863 cv
168.74 188.064 168.979 188.164 169.263 188.164 cv
169.55 188.164 169.785 188.064 169.97 187.863 cv
170.154 187.663 170.246 187.385 170.246 187.03 cv
f
171.498 187.934 mo
171.498 187.339 171.559 186.859 171.682 186.496 cv
171.805 186.133 171.987 185.853 172.228 185.657 cv
172.47 185.46 172.774 185.361 173.141 185.361 cv
173.412 185.361 173.649 185.415 173.853 185.524 cv
174.057 185.633 174.225 185.79 174.358 185.995 cv
174.491 186.2 174.595 186.449 174.671 186.744 cv
174.746 187.038 174.784 187.435 174.784 187.934 cv
174.784 188.525 174.724 189.002 174.602 189.365 cv
174.481 189.728 174.299 190.008 174.057 190.206 cv
173.815 190.404 173.51 190.503 173.141 190.503 cv
172.655 190.503 172.274 190.329 171.996 189.981 cv
171.664 189.562 171.498 188.88 171.498 187.934 cv
cp
172.134 187.934 mo
172.134 188.761 172.231 189.311 172.424 189.585 cv
172.618 189.858 172.857 189.995 173.141 189.995 cv
173.425 189.995 173.664 189.858 173.858 189.583 cv
174.051 189.308 174.148 188.758 174.148 187.934 cv
174.148 187.105 174.051 186.554 173.858 186.282 cv
173.664 186.009 173.423 185.873 173.134 185.873 cv
172.85 185.873 172.623 185.993 172.454 186.234 cv
172.241 186.54 172.134 187.107 172.134 187.934 cv
f
175.375 187.934 mo
175.375 187.339 175.436 186.859 175.559 186.496 cv
175.682 186.133 175.864 185.853 176.105 185.657 cv
176.347 185.46 176.651 185.361 177.018 185.361 cv
177.289 185.361 177.526 185.415 177.73 185.524 cv
177.934 185.633 178.102 185.79 178.235 185.995 cv
178.368 186.2 178.472 186.449 178.548 186.744 cv
178.623 187.038 178.661 187.435 178.661 187.934 cv
178.661 188.525 178.601 189.002 178.479 189.365 cv
178.358 189.728 178.176 190.008 177.934 190.206 cv
177.692 190.404 177.387 190.503 177.018 190.503 cv
176.532 190.503 176.151 190.329 175.873 189.981 cv
175.541 189.562 175.375 188.88 175.375 187.934 cv
cp
176.011 187.934 mo
176.011 188.761 176.108 189.311 176.301 189.585 cv
176.495 189.858 176.734 189.995 177.018 189.995 cv
177.302 189.995 177.541 189.858 177.735 189.583 cv
177.928 189.308 178.025 188.758 178.025 187.934 cv
178.025 187.105 177.928 186.554 177.735 186.282 cv
177.541 186.009 177.3 185.873 177.011 185.873 cv
176.727 185.873 176.5 185.993 176.331 186.234 cv
176.118 186.54 176.011 187.107 176.011 187.934 cv
f
179.252 187.934 mo
179.252 187.339 179.313 186.859 179.436 186.496 cv
179.559 186.133 179.741 185.853 179.982 185.657 cv
180.224 185.46 180.528 185.361 180.895 185.361 cv
181.166 185.361 181.403 185.415 181.607 185.524 cv
181.811 185.633 181.979 185.79 182.112 185.995 cv
182.245 186.2 182.349 186.449 182.425 186.744 cv
182.5 187.038 182.538 187.435 182.538 187.934 cv
182.538 188.525 182.478 189.002 182.356 189.365 cv
182.235 189.728 182.053 190.008 181.811 190.206 cv
181.569 190.404 181.264 190.503 180.895 190.503 cv
180.409 190.503 180.028 190.329 179.75 189.981 cv
179.418 189.562 179.252 188.88 179.252 187.934 cv
cp
179.888 187.934 mo
179.888 188.761 179.985 189.311 180.178 189.585 cv
180.372 189.858 180.611 189.995 180.895 189.995 cv
181.179 189.995 181.418 189.858 181.612 189.583 cv
181.805 189.308 181.902 188.758 181.902 187.934 cv
181.902 187.105 181.805 186.554 181.612 186.282 cv
181.418 186.009 181.177 185.873 180.888 185.873 cv
180.604 185.873 180.377 185.993 180.208 186.234 cv
179.995 186.54 179.888 187.107 179.888 187.934 cv
f
183.129 187.934 mo
183.129 187.339 183.19 186.859 183.313 186.496 cv
183.436 186.133 183.618 185.853 183.859 185.657 cv
184.101 185.46 184.405 185.361 184.772 185.361 cv
185.043 185.361 185.28 185.415 185.484 185.524 cv
185.688 185.633 185.856 185.79 185.989 185.995 cv
186.122 186.2 186.226 186.449 186.302 186.744 cv
186.377 187.038 186.415 187.435 186.415 187.934 cv
186.415 188.525 186.355 189.002 186.233 189.365 cv
186.112 189.728 185.93 190.008 185.688 190.206 cv
185.446 190.404 185.141 190.503 184.772 190.503 cv
184.286 190.503 183.905 190.329 183.627 189.981 cv
183.295 189.562 183.129 188.88 183.129 187.934 cv
cp
183.765 187.934 mo
183.765 188.761 183.862 189.311 184.055 189.585 cv
184.249 189.858 184.488 189.995 184.772 189.995 cv
185.056 189.995 185.295 189.858 185.489 189.583 cv
185.682 189.308 185.779 188.758 185.779 187.934 cv
185.779 187.105 185.682 186.554 185.489 186.282 cv
185.295 186.009 185.054 185.873 184.765 185.873 cv
184.481 185.873 184.254 185.993 184.085 186.234 cv
183.872 186.54 183.765 187.107 183.765 187.934 cv
f
225.768 189.253 mo
226.363 189.198 225.768 189.253 226.363 189.198 cv
226.413 189.477 226.509 189.68 226.651 189.806 cv
226.794 189.932 226.976 189.995 227.198 189.995 cv
227.388 189.995 227.555 189.951 227.698 189.864 cv
227.841 189.777 227.959 189.661 228.051 189.516 cv
228.142 189.37 228.219 189.174 228.281 188.927 cv
228.343 188.679 228.374 188.427 228.374 188.171 cv
228.374 188.143 228.372 188.102 228.37 188.047 cv
228.246 188.244 228.077 188.404 227.863 188.526 cv
227.649 188.649 227.417 188.71 227.167 188.71 cv
226.75 188.71 226.397 188.559 226.108 188.257 cv
225.82 187.955 225.675 187.556 225.675 187.061 cv
225.675 186.551 225.826 186.14 226.127 185.828 cv
226.429 185.517 226.806 185.361 227.26 185.361 cv
227.588 185.361 227.887 185.449 228.159 185.625 cv
228.43 185.802 228.637 186.053 228.778 186.379 cv
228.918 186.706 228.989 187.178 228.989 187.797 cv
228.989 188.44 228.919 188.952 228.779 189.334 cv
228.639 189.715 228.431 190.005 228.155 190.205 cv
227.879 190.404 227.556 190.503 227.184 190.503 cv
226.79 190.503 226.468 190.394 226.218 190.175 cv
225.969 189.957 225.818 189.649 225.768 189.253 cv
cp
228.301 187.03 mo
228.301 186.676 228.207 186.394 228.018 186.185 cv
227.829 185.977 227.601 185.873 227.336 185.873 cv
227.061 185.873 226.821 185.985 226.617 186.209 cv
226.413 186.434 226.311 186.725 226.311 187.082 cv
226.311 187.403 226.408 187.663 226.602 187.863 cv
226.795 188.064 227.034 188.164 227.318 188.164 cv
227.605 188.164 227.84 188.064 228.025 187.863 cv
228.209 187.663 228.301 187.385 228.301 187.03 cv
f
229.553 189.098 mo
230.203 189.043 229.553 189.098 230.203 189.043 cv
230.251 189.359 230.363 189.597 230.538 189.756 cv
230.713 189.915 230.925 189.995 231.172 189.995 cv
231.47 189.995 231.722 189.882 231.928 189.658 cv
232.135 189.434 232.238 189.136 232.238 188.765 cv
232.238 188.412 232.139 188.134 231.94 187.93 cv
231.742 187.726 231.483 187.624 231.162 187.624 cv
230.962 187.624 230.782 187.67 230.622 187.76 cv
230.462 187.85 230.336 187.968 230.244 188.112 cv
229.663 188.037 230.244 188.112 229.663 188.037 cv
230.151 185.45 229.663 188.037 230.151 185.45 cv
232.657 185.45 230.151 185.45 232.657 185.45 cv
232.657 186.041 232.657 185.45 232.657 186.041 cv
230.646 186.041 232.657 186.041 230.646 186.041 cv
230.375 187.394 230.646 186.041 230.375 187.394 cv
230.677 187.184 230.994 187.078 231.327 187.078 cv
231.767 187.078 232.138 187.23 232.441 187.535 cv
232.743 187.84 232.894 188.231 232.894 188.71 cv
232.894 189.166 232.761 189.559 232.496 189.892 cv
232.172 190.299 231.731 190.503 231.172 190.503 cv
230.714 190.503 230.34 190.375 230.05 190.118 cv
229.76 189.862 229.594 189.522 229.553 189.098 cv
f
233.43 187.934 mo
233.43 187.339 233.491 186.859 233.614 186.496 cv
233.737 186.133 233.919 185.853 234.16 185.657 cv
234.402 185.46 234.706 185.361 235.073 185.361 cv
235.344 185.361 235.581 185.415 235.785 185.524 cv
235.989 185.633 236.157 185.79 236.29 185.995 cv
236.423 186.2 236.527 186.449 236.603 186.744 cv
236.678 187.038 236.716 187.435 236.716 187.934 cv
236.716 188.525 236.656 189.002 236.534 189.365 cv
236.413 189.728 236.231 190.008 235.989 190.206 cv
235.747 190.404 235.442 190.503 235.073 190.503 cv
234.587 190.503 234.206 190.329 233.928 189.981 cv
233.596 189.562 233.43 188.88 233.43 187.934 cv
cp
234.066 187.934 mo
234.066 188.761 234.163 189.311 234.356 189.585 cv
234.55 189.858 234.789 189.995 235.073 189.995 cv
235.357 189.995 235.596 189.858 235.79 189.583 cv
235.983 189.308 236.08 188.758 236.08 187.934 cv
236.08 187.105 235.983 186.554 235.79 186.282 cv
235.596 186.009 235.355 185.873 235.066 185.873 cv
234.782 185.873 234.555 185.993 234.386 186.234 cv
234.172 186.54 234.066 187.107 234.066 187.934 cv
f
237.307 187.934 mo
237.307 187.339 237.368 186.859 237.491 186.496 cv
237.614 186.133 237.796 185.853 238.037 185.657 cv
238.279 185.46 238.583 185.361 238.95 185.361 cv
239.221 185.361 239.458 185.415 239.662 185.524 cv
239.866 185.633 240.034 185.79 240.167 185.995 cv
240.3 186.2 240.404 186.449 240.48 186.744 cv
240.555 187.038 240.593 187.435 240.593 187.934 cv
240.593 188.525 240.533 189.002 240.411 189.365 cv
240.29 189.728 240.108 190.008 239.866 190.206 cv
239.624 190.404 239.319 190.503 238.95 190.503 cv
238.464 190.503 238.083 190.329 237.805 189.981 cv
237.473 189.562 237.307 188.88 237.307 187.934 cv
cp
237.943 187.934 mo
237.943 188.761 238.04 189.311 238.233 189.585 cv
238.427 189.858 238.666 189.995 238.95 189.995 cv
239.234 189.995 239.473 189.858 239.667 189.583 cv
239.86 189.308 239.957 188.758 239.957 187.934 cv
239.957 187.105 239.86 186.554 239.667 186.282 cv
239.473 186.009 239.232 185.873 238.943 185.873 cv
238.659 185.873 238.432 185.993 238.263 186.234 cv
238.05 186.54 237.943 187.107 237.943 187.934 cv
f
241.184 187.934 mo
241.184 187.339 241.245 186.859 241.368 186.496 cv
241.491 186.133 241.673 185.853 241.914 185.657 cv
242.156 185.46 242.46 185.361 242.827 185.361 cv
243.098 185.361 243.335 185.415 243.539 185.524 cv
243.743 185.633 243.911 185.79 244.044 185.995 cv
244.177 186.2 244.281 186.449 244.357 186.744 cv
244.432 187.038 244.47 187.435 244.47 187.934 cv
244.47 188.525 244.41 189.002 244.288 189.365 cv
244.167 189.728 243.985 190.008 243.743 190.206 cv
243.501 190.404 243.196 190.503 242.827 190.503 cv
242.341 190.503 241.96 190.329 241.682 189.981 cv
241.35 189.562 241.184 188.88 241.184 187.934 cv
cp
241.82 187.934 mo
241.82 188.761 241.917 189.311 242.11 189.585 cv
242.304 189.858 242.543 189.995 242.827 189.995 cv
243.111 189.995 243.35 189.858 243.544 189.583 cv
243.737 189.308 243.834 188.758 243.834 187.934 cv
243.834 187.105 243.737 186.554 243.544 186.282 cv
243.35 186.009 243.109 185.873 242.82 185.873 cv
242.536 185.873 242.309 185.993 242.14 186.234 cv
241.927 186.54 241.82 187.107 241.82 187.934 cv
f
284.122 190.417 mo
283.503 190.417 284.122 190.417 283.503 190.417 cv
283.503 186.477 283.503 190.417 283.503 186.477 cv
283.354 186.619 283.159 186.761 282.917 186.903 cv
282.675 187.045 282.458 187.151 282.266 187.222 cv
282.266 186.625 282.266 187.222 282.266 186.625 cv
282.612 186.462 282.914 186.265 283.173 186.034 cv
283.432 185.803 283.616 185.578 283.723 185.361 cv
284.122 185.361 283.723 185.361 284.122 185.361 cv
284.122 190.417 284.122 185.361 284.122 190.417 cv
f
285.669 187.934 mo
285.669 187.339 285.73 186.859 285.853 186.496 cv
285.976 186.133 286.158 185.853 286.399 185.657 cv
286.641 185.46 286.945 185.361 287.312 185.361 cv
287.583 185.361 287.82 185.415 288.024 185.524 cv
288.228 185.633 288.396 185.79 288.529 185.995 cv
288.662 186.2 288.766 186.449 288.842 186.744 cv
288.917 187.038 288.955 187.435 288.955 187.934 cv
288.955 188.525 288.895 189.002 288.773 189.365 cv
288.652 189.728 288.47 190.008 288.228 190.206 cv
287.986 190.404 287.681 190.503 287.312 190.503 cv
286.826 190.503 286.445 190.329 286.167 189.981 cv
285.835 189.562 285.669 188.88 285.669 187.934 cv
cp
286.305 187.934 mo
286.305 188.761 286.402 189.311 286.595 189.585 cv
286.789 189.858 287.028 189.995 287.312 189.995 cv
287.596 189.995 287.835 189.858 288.029 189.583 cv
288.222 189.308 288.319 188.758 288.319 187.934 cv
288.319 187.105 288.222 186.554 288.029 186.282 cv
287.835 186.009 287.594 185.873 287.305 185.873 cv
287.021 185.873 286.794 185.993 286.625 186.234 cv
286.411 186.54 286.305 187.107 286.305 187.934 cv
f
289.546 187.934 mo
289.546 187.339 289.607 186.859 289.73 186.496 cv
289.853 186.133 290.035 185.853 290.276 185.657 cv
290.518 185.46 290.822 185.361 291.189 185.361 cv
291.46 185.361 291.697 185.415 291.901 185.524 cv
292.105 185.633 292.273 185.79 292.406 185.995 cv
292.539 186.2 292.643 186.449 292.719 186.744 cv
292.794 187.038 292.832 187.435 292.832 187.934 cv
292.832 188.525 292.772 189.002 292.65 189.365 cv
292.529 189.728 292.347 190.008 292.105 190.206 cv
291.863 190.404 291.558 190.503 291.189 190.503 cv
290.703 190.503 290.322 190.329 290.044 189.981 cv
289.712 189.562 289.546 188.88 289.546 187.934 cv
cp
290.182 187.934 mo
290.182 188.761 290.279 189.311 290.472 189.585 cv
290.666 189.858 290.905 189.995 291.189 189.995 cv
291.473 189.995 291.712 189.858 291.906 189.583 cv
292.099 189.308 292.196 188.758 292.196 187.934 cv
292.196 187.105 292.099 186.554 291.906 186.282 cv
291.712 186.009 291.471 185.873 291.182 185.873 cv
290.898 185.873 290.671 185.993 290.502 186.234 cv
290.289 186.54 290.182 187.107 290.182 187.934 cv
f
293.423 187.934 mo
293.423 187.339 293.484 186.859 293.607 186.496 cv
293.73 186.133 293.912 185.853 294.153 185.657 cv
294.395 185.46 294.699 185.361 295.066 185.361 cv
295.337 185.361 295.574 185.415 295.778 185.524 cv
295.982 185.633 296.15 185.79 296.283 185.995 cv
296.416 186.2 296.52 186.449 296.596 186.744 cv
296.671 187.038 296.709 187.435 296.709 187.934 cv
296.709 188.525 296.649 189.002 296.527 189.365 cv
296.406 189.728 296.224 190.008 295.982 190.206 cv
295.74 190.404 295.435 190.503 295.066 190.503 cv
294.58 190.503 294.199 190.329 293.921 189.981 cv
293.589 189.562 293.423 188.88 293.423 187.934 cv
cp
294.059 187.934 mo
294.059 188.761 294.156 189.311 294.349 189.585 cv
294.543 189.858 294.782 189.995 295.066 189.995 cv
295.35 189.995 295.589 189.858 295.783 189.583 cv
295.976 189.308 296.073 188.758 296.073 187.934 cv
296.073 187.105 295.976 186.554 295.783 186.282 cv
295.589 186.009 295.348 185.873 295.059 185.873 cv
294.775 185.873 294.548 185.993 294.379 186.234 cv
294.166 186.54 294.059 187.107 294.059 187.934 cv
f
297.3 187.934 mo
297.3 187.339 297.361 186.859 297.484 186.496 cv
297.607 186.133 297.789 185.853 298.03 185.657 cv
298.272 185.46 298.576 185.361 298.943 185.361 cv
299.214 185.361 299.451 185.415 299.655 185.524 cv
299.859 185.633 300.027 185.79 300.16 185.995 cv
300.293 186.2 300.397 186.449 300.473 186.744 cv
300.548 187.038 300.586 187.435 300.586 187.934 cv
300.586 188.525 300.526 189.002 300.404 189.365 cv
300.283 189.728 300.101 190.008 299.859 190.206 cv
299.617 190.404 299.312 190.503 298.943 190.503 cv
298.457 190.503 298.076 190.329 297.798 189.981 cv
297.466 189.562 297.3 188.88 297.3 187.934 cv
cp
297.936 187.934 mo
297.936 188.761 298.033 189.311 298.226 189.585 cv
298.42 189.858 298.659 189.995 298.943 189.995 cv
299.227 189.995 299.466 189.858 299.66 189.583 cv
299.853 189.308 299.95 188.758 299.95 187.934 cv
299.95 187.105 299.853 186.554 299.66 186.282 cv
299.466 186.009 299.225 185.873 298.936 185.873 cv
298.652 185.873 298.425 185.993 298.256 186.234 cv
298.043 186.54 297.936 187.107 297.936 187.934 cv
f
301.177 187.934 mo
301.177 187.339 301.238 186.859 301.361 186.496 cv
301.484 186.133 301.666 185.853 301.907 185.657 cv
302.149 185.46 302.453 185.361 302.82 185.361 cv
303.091 185.361 303.328 185.415 303.532 185.524 cv
303.736 185.633 303.904 185.79 304.037 185.995 cv
304.17 186.2 304.274 186.449 304.35 186.744 cv
304.425 187.038 304.463 187.435 304.463 187.934 cv
304.463 188.525 304.403 189.002 304.281 189.365 cv
304.16 189.728 303.978 190.008 303.736 190.206 cv
303.494 190.404 303.189 190.503 302.82 190.503 cv
302.334 190.503 301.953 190.329 301.675 189.981 cv
301.343 189.562 301.177 188.88 301.177 187.934 cv
cp
301.813 187.934 mo
301.813 188.761 301.91 189.311 302.103 189.585 cv
302.297 189.858 302.536 189.995 302.82 189.995 cv
303.104 189.995 303.343 189.858 303.537 189.583 cv
303.73 189.308 303.827 188.758 303.827 187.934 cv
303.827 187.105 303.73 186.554 303.537 186.282 cv
303.343 186.009 303.102 185.873 302.813 185.873 cv
302.529 185.873 302.302 185.993 302.133 186.234 cv
301.919 186.54 301.813 187.107 301.813 187.934 cv
f
51.511 178.553 mo
51.511 177.958 51.572 177.478 51.695 177.115 cv
51.818 176.752 52 176.472 52.241 176.276 cv
52.483 176.079 52.787 175.98 53.154 175.98 cv
53.425 175.98 53.662 176.034 53.866 176.143 cv
54.07 176.252 54.238 176.409 54.371 176.614 cv
54.504 176.819 54.608 177.068 54.684 177.363 cv
54.759 177.657 54.797 178.054 54.797 178.553 cv
54.797 179.144 54.737 179.621 54.615 179.984 cv
54.494 180.347 54.312 180.627 54.07 180.825 cv
53.828 181.023 53.523 181.122 53.154 181.122 cv
52.668 181.122 52.287 180.948 52.009 180.6 cv
51.677 180.181 51.511 179.499 51.511 178.553 cv
cp
52.147 178.553 mo
52.147 179.38 52.244 179.93 52.437 180.204 cv
52.631 180.477 52.87 180.614 53.154 180.614 cv
53.438 180.614 53.677 180.477 53.871 180.202 cv
54.065 179.927 54.161 179.377 54.161 178.553 cv
54.161 177.724 54.065 177.173 53.871 176.901 cv
53.677 176.628 53.436 176.492 53.147 176.492 cv
52.863 176.492 52.636 176.612 52.467 176.853 cv
52.254 177.159 52.147 177.726 52.147 178.553 cv
f
50.886 136.499 mo
50.886 137.093 50.886 136.499 50.886 137.093 cv
47.555 137.093 50.886 137.093 47.555 137.093 cv
47.551 136.944 47.575 136.801 47.627 136.664 cv
47.712 136.437 47.848 136.214 48.035 135.994 cv
48.221 135.774 48.491 135.52 48.844 135.231 cv
49.392 134.783 49.762 134.427 49.954 134.165 cv
50.147 133.903 50.243 133.655 50.243 133.421 cv
50.243 133.176 50.156 132.969 49.98 132.801 cv
49.805 132.633 49.576 132.549 49.294 132.549 cv
48.996 132.549 48.758 132.638 48.579 132.817 cv
48.401 132.995 48.31 133.242 48.308 133.559 cv
47.672 133.493 48.308 133.559 47.672 133.493 cv
47.715 133.019 47.879 132.658 48.164 132.409 cv
48.448 132.161 48.829 132.037 49.308 132.037 cv
49.792 132.037 50.174 132.171 50.456 132.439 cv
50.738 132.707 50.879 133.039 50.879 133.435 cv
50.879 133.636 50.838 133.834 50.755 134.029 cv
50.673 134.224 50.536 134.429 50.345 134.644 cv
50.153 134.859 49.835 135.155 49.391 135.53 cv
49.019 135.842 48.781 136.053 48.676 136.164 cv
48.57 136.275 48.483 136.387 48.414 136.499 cv
50.886 136.499 48.414 136.499 50.886 136.499 cv
f
51.511 135.774 mo
52.161 135.719 51.511 135.774 52.161 135.719 cv
52.209 136.035 52.321 136.273 52.496 136.432 cv
52.671 136.591 52.883 136.671 53.13 136.671 cv
53.428 136.671 53.68 136.558 53.886 136.334 cv
54.093 136.11 54.196 135.812 54.196 135.441 cv
54.196 135.088 54.097 134.81 53.898 134.606 cv
53.7 134.402 53.441 134.3 53.12 134.3 cv
52.92 134.3 52.741 134.346 52.58 134.436 cv
52.42 134.527 52.294 134.644 52.202 134.788 cv
51.621 134.713 52.202 134.788 51.621 134.713 cv
52.109 132.126 51.621 134.713 52.109 132.126 cv
54.615 132.126 52.109 132.126 54.615 132.126 cv
54.615 132.717 54.615 132.126 54.615 132.717 cv
52.604 132.717 54.615 132.717 52.604 132.717 cv
52.333 134.07 52.604 132.717 52.333 134.07 cv
52.635 133.86 52.952 133.754 53.285 133.754 cv
53.725 133.754 54.096 133.906 54.399 134.211 cv
54.701 134.516 54.852 134.907 54.852 135.386 cv
54.852 135.842 54.719 136.235 54.454 136.568 cv
54.13 136.975 53.689 137.179 53.13 137.179 cv
52.672 137.179 52.298 137.051 52.008 136.794 cv
51.718 136.538 51.552 136.198 51.511 135.774 cv
f
47.634 91.728 mo
48.284 91.673 47.634 91.728 48.284 91.673 cv
48.332 91.989 48.444 92.227 48.619 92.386 cv
48.794 92.545 49.006 92.625 49.253 92.625 cv
49.551 92.625 49.803 92.512 50.009 92.288 cv
50.216 92.064 50.319 91.766 50.319 91.395 cv
50.319 91.042 50.22 90.764 50.021 90.56 cv
49.823 90.356 49.564 90.254 49.243 90.254 cv
49.043 90.254 48.863 90.3 48.703 90.39 cv
48.543 90.48 48.417 90.598 48.325 90.742 cv
47.744 90.667 48.325 90.742 47.744 90.667 cv
48.232 88.08 47.744 90.667 48.232 88.08 cv
50.738 88.08 48.232 88.08 50.738 88.08 cv
50.738 88.671 50.738 88.08 50.738 88.671 cv
48.727 88.671 50.738 88.671 48.727 88.671 cv
48.456 90.024 48.727 88.671 48.456 90.024 cv
48.758 89.814 49.075 89.708 49.408 89.708 cv
49.848 89.708 50.219 89.86 50.522 90.165 cv
50.824 90.47 50.975 90.861 50.975 91.34 cv
50.975 91.796 50.842 92.189 50.577 92.521 cv
50.253 92.929 49.812 93.133 49.253 93.133 cv
48.795 93.133 48.421 93.005 48.131 92.748 cv
47.841 92.492 47.675 92.152 47.634 91.728 cv
f
51.511 90.563 mo
51.511 89.968 51.572 89.488 51.695 89.125 cv
51.818 88.762 52 88.482 52.241 88.286 cv
52.483 88.089 52.787 87.99 53.154 87.99 cv
53.425 87.99 53.662 88.044 53.866 88.153 cv
54.07 88.262 54.238 88.419 54.371 88.624 cv
54.504 88.829 54.608 89.078 54.684 89.373 cv
54.759 89.667 54.797 90.064 54.797 90.563 cv
54.797 91.154 54.737 91.631 54.615 91.994 cv
54.494 92.357 54.312 92.637 54.07 92.835 cv
53.828 93.033 53.523 93.132 53.154 93.132 cv
52.668 93.132 52.287 92.958 52.009 92.61 cv
51.677 92.191 51.511 91.509 51.511 90.563 cv
cp
52.147 90.563 mo
52.147 91.39 52.244 91.94 52.437 92.214 cv
52.631 92.487 52.87 92.624 53.154 92.624 cv
53.438 92.624 53.677 92.487 53.871 92.212 cv
54.065 91.937 54.161 91.387 54.161 90.563 cv
54.161 89.734 54.065 89.183 53.871 88.911 cv
53.677 88.638 53.436 88.502 53.147 88.502 cv
52.863 88.502 52.636 88.622 52.467 88.863 cv
52.254 89.169 52.147 89.736 52.147 90.563 cv
f
47.675 44.625 mo
47.675 44.031 47.675 44.625 47.675 44.031 cv
50.937 44.031 47.675 44.031 50.937 44.031 cv
50.937 44.512 50.937 44.031 50.937 44.512 cv
50.616 44.853 50.298 45.306 49.983 45.872 cv
49.668 46.438 49.425 47.019 49.253 47.617 cv
49.129 48.038 49.05 48.5 49.016 49.001 cv
48.38 49.001 49.016 49.001 48.38 49.001 cv
48.387 48.605 48.464 48.127 48.613 47.565 cv
48.762 47.004 48.976 46.463 49.255 45.942 cv
49.533 45.421 49.829 44.982 50.143 44.625 cv
47.675 44.625 50.143 44.625 47.675 44.625 cv
f
51.511 47.682 mo
52.161 47.627 51.511 47.682 52.161 47.627 cv
52.209 47.943 52.321 48.181 52.496 48.34 cv
52.671 48.499 52.883 48.579 53.13 48.579 cv
53.428 48.579 53.68 48.466 53.886 48.242 cv
54.093 48.017 54.196 47.72 54.196 47.349 cv
54.196 46.996 54.097 46.718 53.898 46.514 cv
53.7 46.31 53.441 46.208 53.12 46.208 cv
52.92 46.208 52.741 46.254 52.58 46.344 cv
52.42 46.434 52.294 46.552 52.202 46.696 cv
51.621 46.621 52.202 46.696 51.621 46.621 cv
52.109 44.034 51.621 46.621 52.109 44.034 cv
54.615 44.034 52.109 44.034 54.615 44.034 cv
54.615 44.625 54.615 44.034 54.615 44.625 cv
52.604 44.625 54.615 44.625 52.604 44.625 cv
52.333 45.978 52.604 44.625 52.333 45.978 cv
52.635 45.767 52.952 45.662 53.285 45.662 cv
53.725 45.662 54.096 45.814 54.399 46.119 cv
54.701 46.424 54.852 46.815 54.852 47.294 cv
54.852 47.75 54.719 48.143 54.454 48.476 cv
54.13 48.883 53.689 49.087 53.13 49.087 cv
52.672 49.087 52.298 48.959 52.008 48.702 cv
51.718 48.446 51.552 48.106 51.511 47.682 cv
f
46.087 5.05702 mo
45.468 5.05702 46.087 5.05702 45.468 5.05702 cv
45.468 1.11702 45.468 5.05702 45.468 1.11702 cv
45.319 1.25902 45.124 1.40102 44.882 1.54303 cv
44.64 1.68503 44.423 1.79102 44.231 1.86201 cv
44.231 1.26501 44.231 1.86201 44.231 1.26501 cv
44.577 1.10202 44.879 .905029 45.138 .674026 cv
45.397 .443024 45.581 .218018 45.688 .00102234 cv
46.087 .00102234 45.688 .00102234 46.087 .00102234 cv
46.087 5.05702 46.087 .00102234 46.087 5.05702 cv
f
47.634 2.57301 mo
47.634 1.97801 47.695 1.49802 47.818 1.13501 cv
47.941 .772018 48.123 .49202 48.364 .296021 cv
48.606 .0990143 48.91 1.52588e-5 49.277 1.52588e-5 cv
49.548 1.52588e-5 49.785 .0540161 49.989 .16301 cv
50.193 .272018 50.361 .429016 50.494 .634018 cv
50.627 .83902 50.731 1.08801 50.807 1.38301 cv
50.882 1.67702 50.92 2.07402 50.92 2.57301 cv
50.92 3.16402 50.86 3.64101 50.738 4.00401 cv
50.617 4.36702 50.435 4.64702 50.193 4.84502 cv
49.951 5.04301 49.646 5.14201 49.277 5.14201 cv
48.791 5.14201 48.41 4.96802 48.132 4.62001 cv
47.8 4.20102 47.634 3.51901 47.634 2.57301 cv
cp
48.27 2.57301 mo
48.27 3.40001 48.367 3.95001 48.56 4.22401 cv
48.754 4.49701 48.993 4.63402 49.277 4.63402 cv
49.561 4.63402 49.8 4.49701 49.994 4.22202 cv
50.187 3.94701 50.284 3.39702 50.284 2.57301 cv
50.284 1.74402 50.187 1.19301 49.994 .921021 cv
49.8 .64801 49.559 .512009 49.27 .512009 cv
48.986 .512009 48.759 .632019 48.59 .873016 cv
48.377 1.17902 48.27 1.74602 48.27 2.57301 cv
f
51.511 2.57301 mo
51.511 1.97801 51.572 1.49802 51.695 1.13501 cv
51.818 .772018 52 .49202 52.241 .296021 cv
52.483 .0990143 52.787 1.52588e-5 53.154 1.52588e-5 cv
53.425 1.52588e-5 53.662 .0540161 53.866 .16301 cv
54.07 .272018 54.238 .429016 54.371 .634018 cv
54.504 .83902 54.608 1.08801 54.684 1.38301 cv
54.759 1.67702 54.797 2.07402 54.797 2.57301 cv
54.797 3.16402 54.737 3.64101 54.615 4.00401 cv
54.494 4.36702 54.312 4.64702 54.07 4.84502 cv
53.828 5.04301 53.523 5.14201 53.154 5.14201 cv
52.668 5.14201 52.287 4.96802 52.009 4.62001 cv
51.677 4.20102 51.511 3.51901 51.511 2.57301 cv
cp
52.147 2.57301 mo
52.147 3.40001 52.244 3.95001 52.437 4.22401 cv
52.631 4.49701 52.87 4.63402 53.154 4.63402 cv
53.438 4.63402 53.677 4.49701 53.871 4.22202 cv
54.065 3.94701 54.161 3.39702 54.161 2.57301 cv
54.161 1.74402 54.065 1.19301 53.871 .921021 cv
53.677 .64801 53.436 .512009 53.147 .512009 cv
52.863 .512009 52.636 .632019 52.467 .873016 cv
52.254 1.17902 52.147 1.74602 52.147 2.57301 cv
f
.714 lw
60.912 182.566 mo
60.912 179.099 li
@
89.99 180.833 mo
89.99 179.1 li
@
118.966 182.566 mo
118.966 179.099 li
@
148.044 180.833 mo
148.044 179.1 li
@
177.02 182.566 mo
177.02 179.099 li
@
206.098 180.833 mo
206.098 179.1 li
@
235.074 182.566 mo
235.074 179.099 li
@
264.152 180.833 mo
264.152 179.1 li
@
293.128 182.566 mo
293.128 179.099 li
@
60.909 179.099 mo
293.128 179.099 li
@
60.909 3.11902 mo
293.128 3.11902 li
@
57.44 179.099 mo
60.909 179.099 li
@
59.174 157.076 mo
60.909 157.076 li
@
57.44 135.155 mo
60.909 135.155 li
@
59.174 113.132 mo
60.909 113.132 li
@
57.44 91.109 mo
60.909 91.109 li
@
59.174 69.086 mo
60.909 69.086 li
@
57.44 47.063 mo
60.909 47.063 li
@
59.174 25.142 mo
60.909 25.142 li
@
57.44 3.11902 mo
60.909 3.11902 li
@
60.909 179.099 mo
60.909 3.11902 li
@
293.128 179.099 mo
293.128 3.11902 li
@
gsave
60.912 3.12003 mo
293.233 3.12003 li
293.233 179.202 li
60.912 179.202 li
cp
eclp
gsave
0 -25.324 mo
340.81 -25.324 li
340.81 220.236 li
0 220.236 li
cp
clp
.918 lw
81.522 178.998 mo
89.99 178.998 li
94.786 178.896 li
101.828 178.681 109.37 178.414 116.314 177.163 cv
118.049 176.857 li
119.783 176.449 li
127.195 174.597 133.674 170.426 140.393 166.967 cv
144.066 165.03 li
149.576 162.889 li
160.187 156.669 li
173.349 150.45 li
187.633 144.23 li
200.693 138.011 li
212.324 131.791 li
223.139 125.572 li
232.22 119.352 li
239.26 113.031 li
244.463 106.812 li
248.85 100.592 li
251.503 94.373 li
253.748 88.153 li
255.278 81.832 li
255.38 75.612 li
255.278 69.393 li
253.646 63.071 li
252.115 56.852 li
249.769 50.632 li
246.096 44.413 li
242.014 38.092 li
237.219 31.872 li
231.199 25.551 li
224.976 19.331 li
219.874 17.19 li
194.688 3.97102 164.488 3.82002 136.72 3.22202 cv
126.415 3.22202 li
@
134.364 172.476 mo
134.364 173.151 133.815 173.699 133.14 173.699 cv
132.464 173.699 131.915 173.151 131.915 172.476 cv
131.915 171.801 132.464 171.252 133.14 171.252 cv
133.815 171.252 134.364 171.801 134.364 172.476 cv
cp
ef
0 lw
134.364 172.476 mo
134.364 173.151 133.815 173.699 133.14 173.699 cv
132.464 173.699 131.915 173.151 131.915 172.476 cv
131.915 171.801 132.464 171.252 133.14 171.252 cv
133.815 171.252 134.364 171.801 134.364 172.476 cv
cp
@
137.124 170.316 mo
137.124 170.991 136.575 171.539 135.9 171.539 cv
135.224 171.539 134.675 170.991 134.675 170.316 cv
134.675 169.641 135.224 169.092 135.9 169.092 cv
136.575 169.092 137.124 169.641 137.124 170.316 cv
cp
ef
137.124 170.316 mo
137.124 170.991 136.575 171.539 135.9 171.539 cv
135.224 171.539 134.675 170.991 134.675 170.316 cv
134.675 169.641 135.224 169.092 135.9 169.092 cv
136.575 169.092 137.124 169.641 137.124 170.316 cv
cp
@
139.584 168.096 mo
139.584 168.771 139.035 169.319 138.36 169.319 cv
137.684 169.319 137.135 168.771 137.135 168.096 cv
137.135 167.421 137.684 166.872 138.36 166.872 cv
139.035 166.872 139.584 167.421 139.584 168.096 cv
cp
ef
139.584 168.096 mo
139.584 168.771 139.035 169.319 138.36 169.319 cv
137.684 169.319 137.135 168.771 137.135 168.096 cv
137.135 167.421 137.684 166.872 138.36 166.872 cv
139.035 166.872 139.584 167.421 139.584 168.096 cv
cp
@
142.344 165.936 mo
142.344 166.611 141.795 167.16 141.12 167.16 cv
140.444 167.16 139.895 166.611 139.895 165.936 cv
139.895 165.261 140.444 164.713 141.12 164.713 cv
141.795 164.713 142.344 165.261 142.344 165.936 cv
cp
ef
142.344 165.936 mo
142.344 166.611 141.795 167.16 141.12 167.16 cv
140.444 167.16 139.895 166.611 139.895 165.936 cv
139.895 165.261 140.444 164.713 141.12 164.713 cv
141.795 164.713 142.344 165.261 142.344 165.936 cv
cp
@
144.984 163.716 mo
144.984 164.391 144.435 164.94 143.76 164.94 cv
143.084 164.94 142.535 164.391 142.535 163.716 cv
142.535 163.041 143.084 162.493 143.76 162.493 cv
144.435 162.493 144.984 163.041 144.984 163.716 cv
cp
ef
144.984 163.716 mo
144.984 164.391 144.435 164.94 143.76 164.94 cv
143.084 164.94 142.535 164.391 142.535 163.716 cv
142.535 163.041 143.084 162.493 143.76 162.493 cv
144.435 162.493 144.984 163.041 144.984 163.716 cv
cp
@
147.744 161.496 mo
147.744 162.171 147.195 162.72 146.52 162.72 cv
145.844 162.72 145.295 162.171 145.295 161.496 cv
145.295 160.821 145.844 160.273 146.52 160.273 cv
147.195 160.273 147.744 160.821 147.744 161.496 cv
cp
ef
147.744 161.496 mo
147.744 162.171 147.195 162.72 146.52 162.72 cv
145.844 162.72 145.295 162.171 145.295 161.496 cv
145.295 160.821 145.844 160.273 146.52 160.273 cv
147.195 160.273 147.744 160.821 147.744 161.496 cv
cp
@
153.684 157.056 mo
153.684 157.731 153.135 158.28 152.46 158.28 cv
151.784 158.28 151.235 157.731 151.235 157.056 cv
151.235 156.381 151.784 155.833 152.46 155.833 cv
153.135 155.833 153.684 156.381 153.684 157.056 cv
cp
ef
153.684 157.056 mo
153.684 157.731 153.135 158.28 152.46 158.28 cv
151.784 158.28 151.235 157.731 151.235 157.056 cv
151.235 156.381 151.784 155.833 152.46 155.833 cv
153.135 155.833 153.684 156.381 153.684 157.056 cv
cp
@
159.684 152.676 mo
159.684 153.351 159.135 153.9 158.46 153.9 cv
157.784 153.9 157.235 153.351 157.235 152.676 cv
157.235 152.001 157.784 151.453 158.46 151.453 cv
159.135 151.453 159.684 152.001 159.684 152.676 cv
cp
ef
159.684 152.676 mo
159.684 153.351 159.135 153.9 158.46 153.9 cv
157.784 153.9 157.235 153.351 157.235 152.676 cv
157.235 152.001 157.784 151.453 158.46 151.453 cv
159.135 151.453 159.684 152.001 159.684 152.676 cv
cp
@
166.524 148.296 mo
166.524 148.971 165.975 149.52 165.3 149.52 cv
164.624 149.52 164.075 148.971 164.075 148.296 cv
164.075 147.621 164.624 147.073 165.3 147.073 cv
165.975 147.073 166.524 147.621 166.524 148.296 cv
cp
ef
166.524 148.296 mo
166.524 148.971 165.975 149.52 165.3 149.52 cv
164.624 149.52 164.075 148.971 164.075 148.296 cv
164.075 147.621 164.624 147.073 165.3 147.073 cv
165.975 147.073 166.524 147.621 166.524 148.296 cv
cp
@
177.324 141.696 mo
177.324 142.371 176.775 142.919 176.1 142.919 cv
175.424 142.919 174.875 142.371 174.875 141.696 cv
174.875 141.021 175.424 140.472 176.1 140.472 cv
176.775 140.472 177.324 141.021 177.324 141.696 cv
cp
ef
177.324 141.696 mo
177.324 142.371 176.775 142.919 176.1 142.919 cv
175.424 142.919 174.875 142.371 174.875 141.696 cv
174.875 141.021 175.424 140.472 176.1 140.472 cv
176.775 140.472 177.324 141.021 177.324 141.696 cv
cp
@
188.664 135.036 mo
188.664 135.711 188.115 136.259 187.44 136.259 cv
186.764 136.259 186.215 135.711 186.215 135.036 cv
186.215 134.361 186.764 133.812 187.44 133.812 cv
188.115 133.812 188.664 134.361 188.664 135.036 cv
cp
ef
188.664 135.036 mo
188.664 135.711 188.115 136.259 187.44 136.259 cv
186.764 136.259 186.215 135.711 186.215 135.036 cv
186.215 134.361 186.764 133.812 187.44 133.812 cv
188.115 133.812 188.664 134.361 188.664 135.036 cv
cp
@
208.464 124.176 mo
208.464 124.851 207.915 125.4 207.24 125.4 cv
206.564 125.4 206.015 124.851 206.015 124.176 cv
206.015 123.501 206.564 122.953 207.24 122.953 cv
207.915 122.953 208.464 123.501 208.464 124.176 cv
cp
ef
208.464 124.176 mo
208.464 124.851 207.915 125.4 207.24 125.4 cv
206.564 125.4 206.015 124.851 206.015 124.176 cv
206.015 123.501 206.564 122.953 207.24 122.953 cv
207.915 122.953 208.464 123.501 208.464 124.176 cv
cp
@
227.424 113.136 mo
227.424 113.811 226.876 114.359 226.2 114.359 cv
225.524 114.359 224.975 113.811 224.975 113.136 cv
224.975 112.461 225.524 111.912 226.2 111.912 cv
226.876 111.912 227.424 112.461 227.424 113.136 cv
cp
ef
227.424 113.136 mo
227.424 113.811 226.876 114.359 226.2 114.359 cv
225.524 114.359 224.975 113.811 224.975 113.136 cv
224.975 112.461 225.524 111.912 226.2 111.912 cv
226.876 111.912 227.424 112.461 227.424 113.136 cv
cp
@
242.304 102.096 mo
242.304 102.771 241.755 103.319 241.08 103.319 cv
240.404 103.319 239.855 102.771 239.855 102.096 cv
239.855 101.421 240.404 100.872 241.08 100.872 cv
241.755 100.872 242.304 101.421 242.304 102.096 cv
cp
ef
242.304 102.096 mo
242.304 102.771 241.755 103.319 241.08 103.319 cv
240.404 103.319 239.855 102.771 239.855 102.096 cv
239.855 101.421 240.404 100.872 241.08 100.872 cv
241.755 100.872 242.304 101.421 242.304 102.096 cv
cp
@
251.904 91.116 mo
251.904 91.791 251.355 92.34 250.68 92.34 cv
250.004 92.34 249.455 91.791 249.455 91.116 cv
249.455 90.441 250.004 89.893 250.68 89.893 cv
251.355 89.893 251.904 90.441 251.904 91.116 cv
cp
ef
251.904 91.116 mo
251.904 91.791 251.355 92.34 250.68 92.34 cv
250.004 92.34 249.455 91.791 249.455 91.116 cv
249.455 90.441 250.004 89.893 250.68 89.893 cv
251.355 89.893 251.904 90.441 251.904 91.116 cv
cp
@
256.404 80.076 mo
256.404 80.751 255.855 81.299 255.18 81.299 cv
254.504 81.299 253.955 80.751 253.955 80.076 cv
253.955 79.401 254.504 78.853 255.18 78.853 cv
255.855 78.853 256.404 79.401 256.404 80.076 cv
cp
ef
256.404 80.076 mo
256.404 80.751 255.855 81.299 255.18 81.299 cv
254.504 81.299 253.955 80.751 253.955 80.076 cv
253.955 79.401 254.504 78.853 255.18 78.853 cv
255.855 78.853 256.404 79.401 256.404 80.076 cv
cp
@
257.124 69.096 mo
257.124 69.771 256.575 70.319 255.9 70.319 cv
255.224 70.319 254.675 69.771 254.675 69.096 cv
254.675 68.421 255.224 67.873 255.9 67.873 cv
256.575 67.873 257.124 68.421 257.124 69.096 cv
cp
ef
257.124 69.096 mo
257.124 69.771 256.575 70.319 255.9 70.319 cv
255.224 70.319 254.675 69.771 254.675 69.096 cv
254.675 68.421 255.224 67.873 255.9 67.873 cv
256.575 67.873 257.124 68.421 257.124 69.096 cv
cp
@
255.264 58.056 mo
255.264 58.731 254.715 59.279 254.04 59.279 cv
253.364 59.279 252.815 58.731 252.815 58.056 cv
252.815 57.381 253.364 56.833 254.04 56.833 cv
254.715 56.833 255.264 57.381 255.264 58.056 cv
cp
ef
255.264 58.056 mo
255.264 58.731 254.715 59.279 254.04 59.279 cv
253.364 59.279 252.815 58.731 252.815 58.056 cv
252.815 57.381 253.364 56.833 254.04 56.833 cv
254.715 56.833 255.264 57.381 255.264 58.056 cv
cp
@
252.804 47.076 mo
252.804 47.751 252.255 48.299 251.58 48.299 cv
250.904 48.299 250.355 47.751 250.355 47.076 cv
250.355 46.401 250.904 45.853 251.58 45.853 cv
252.255 45.853 252.804 46.401 252.804 47.076 cv
cp
ef
252.804 47.076 mo
252.804 47.751 252.255 48.299 251.58 48.299 cv
250.904 48.299 250.355 47.751 250.355 47.076 cv
250.355 46.401 250.904 45.853 251.58 45.853 cv
252.255 45.853 252.804 46.401 252.804 47.076 cv
cp
@
249.984 36.156 mo
249.984 36.831 249.435 37.379 248.76 37.379 cv
248.084 37.379 247.535 36.831 247.535 36.156 cv
247.535 35.481 248.084 34.933 248.76 34.933 cv
249.435 34.933 249.984 35.481 249.984 36.156 cv
cp
ef
249.984 36.156 mo
249.984 36.831 249.435 37.379 248.76 37.379 cv
248.084 37.379 247.535 36.831 247.535 36.156 cv
247.535 35.481 248.084 34.933 248.76 34.933 cv
249.435 34.933 249.984 35.481 249.984 36.156 cv
cp
@
247.284 25.176 mo
247.284 25.851 246.735 26.399 246.06 26.399 cv
245.384 26.399 244.835 25.851 244.835 25.176 cv
244.835 24.501 245.384 23.953 246.06 23.953 cv
246.735 23.953 247.284 24.501 247.284 25.176 cv
cp
ef
247.284 25.176 mo
247.284 25.851 246.735 26.399 246.06 26.399 cv
245.384 26.399 244.835 25.851 244.835 25.176 cv
244.835 24.501 245.384 23.953 246.06 23.953 cv
246.735 23.953 247.284 24.501 247.284 25.176 cv
cp
@
242.724 14.136 mo
242.724 14.811 242.175 15.359 241.5 15.359 cv
240.824 15.359 240.275 14.811 240.275 14.136 cv
240.275 13.461 240.824 12.913 241.5 12.913 cv
242.175 12.913 242.724 13.461 242.724 14.136 cv
cp
ef
242.724 14.136 mo
242.724 14.811 242.175 15.359 241.5 15.359 cv
240.824 15.359 240.275 14.811 240.275 14.136 cv
240.275 13.461 240.824 12.913 241.5 12.913 cv
242.175 12.913 242.724 13.461 242.724 14.136 cv
cp
@
235.464 9.75603 mo
235.464 10.431 234.915 10.979 234.24 10.979 cv
233.564 10.979 233.015 10.431 233.015 9.75603 cv
233.015 9.08102 233.564 8.53302 234.24 8.53302 cv
234.915 8.53302 235.464 9.08102 235.464 9.75603 cv
cp
ef
235.464 9.75603 mo
235.464 10.431 234.915 10.979 234.24 10.979 cv
233.564 10.979 233.015 10.431 233.015 9.75603 cv
233.015 9.08103 233.564 8.53303 234.24 8.53303 cv
234.915 8.53303 235.464 9.08103 235.464 9.75603 cv
cp
@
227.004 7.53603 mo
227.004 8.21103 226.456 8.75903 225.78 8.75903 cv
225.104 8.75903 224.555 8.21103 224.555 7.53603 cv
224.555 6.86102 225.104 6.31302 225.78 6.31302 cv
226.456 6.31302 227.004 6.86102 227.004 7.53603 cv
cp
ef
227.004 7.53603 mo
227.004 8.21103 226.456 8.75903 225.78 8.75903 cv
225.104 8.75903 224.555 8.21103 224.555 7.53603 cv
224.555 6.86103 225.104 6.31303 225.78 6.31303 cv
226.456 6.31303 227.004 6.86103 227.004 7.53603 cv
cp
@
.918 lw
80.399 178.998 mo
83.664 178.896 li
@
88.255 178.794 mo
89.989 178.692 li
91.52 178.59 li
@
96.111 178.284 mo
96.417 178.284 li
99.274 177.978 li
99.376 177.978 li
@
103.967 177.366 mo
104.885 177.264 li
107.232 176.958 li
@
111.823 175.837 mo
112.945 175.531 li
115.088 174.919 li
@
119.679 173.288 mo
121.311 172.574 li
122.944 171.861 li
@
127.535 169.821 mo
128.045 169.515 li
130.8 168.19 li
@
135.391 165.947 mo
137.023 165.131 li
138.656 164.316 li
@
143.247 162.073 mo
146.512 160.748 li
@
151.103 159.014 mo
151.919 158.606 li
154.368 157.281 li
@
158.959 154.63 mo
162.224 152.693 li
@
166.815 150.246 mo
170.08 148.819 li
@
174.671 146.779 mo
177.936 145.25 li
@
182.527 143.21 mo
185.792 141.783 li
@
190.383 139.743 mo
193.648 138.316 li
@
198.239 136.378 mo
198.545 136.174 li
201.504 134.645 li
@
206.095 132.198 mo
209.36 130.465 li
@
213.951 127.916 mo
217.216 125.877 li
@
221.807 123.022 mo
224.664 121.289 li
225.072 120.983 li
@
229.663 117.312 mo
232.928 114.763 li
@
237.213 110.379 mo
240.274 107.116 li
@
243.743 102.528 mo
246.09 99.265 li
@
248.64 94.677 mo
250.272 91.414 li
@
251.293 86.826 mo
251.905 83.869 li
251.905 83.563 li
@
252.517 78.975 mo
252.925 76.324 li
252.925 75.712 li
@
252.721 71.124 mo
252.619 68.779 li
252.313 67.861 li
@
250.68 63.273 mo
249.966 61.336 li
249.558 60.01 li
@
247.823 55.422 mo
247.211 53.791 li
246.599 52.159 li
@
244.966 47.571 mo
244.456 46.347 li
243.027 44.308 li
@
239.763 39.72 mo
239.151 38.802 li
237.212 36.457 li
@
233.335 31.869 mo
232.825 31.257 li
230.172 28.606 li
@
225.683 24.018 mo
225.377 23.712 li
222.418 22.387 li
@
217.827 20.449 mo
217.113 20.143 li
214.562 19.022 li
@
209.971 16.982 mo
206.706 15.759 li
@
202.115 14.025 mo
198.85 13.005 li
@
194.259 11.68 mo
192.218 11.068 li
190.994 10.762 li
@
186.403 9.64104 mo
183.138 8.92704 li
@
178.547 8.01004 mo
175.894 7.50004 li
175.282 7.39804 li
@
170.691 6.68504 mo
167.426 6.17504 li
@
162.835 5.56305 mo
161.101 5.35905 li
159.57 5.25705 li
@
154.979 4.84904 mo
151.816 4.54304 li
151.714 4.54304 li
@
147.123 4.23705 mo
147.123 4.23705 li
143.858 4.03305 li
@
139.267 3.82904 mo
137.532 3.72704 li
136.002 3.62504 li
@
131.411 3.52304 mo
128.146 3.42104 li
@
123.555 3.31905 mo
120.29 3.21705 li
@
grestore
grestore
69.482 84.686 mo
167.532 84.686 li
167.532 39.111 li
69.482 39.111 li
cp
f
66.829 82.035 mo
164.879 82.035 li
164.879 36.46 li
66.829 36.46 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
66.829 36.46 mo
164.879 36.46 li
164.879 82.035 li
66.829 82.035 li
cp
ef
.306 lw
66.829 36.46 mo
164.879 36.46 li
164.879 82.035 li
66.829 82.035 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
.918 lw
76.726 45.942 mo
95.908 45.942 li
@
98.932 48.797 mo
98.932 42.666 98.932 48.797 98.932 42.666 cv
103.368 42.666 98.932 42.666 103.368 42.666 cv
103.368 43.39 103.368 42.666 103.368 43.39 cv
99.744 43.39 103.368 43.39 99.744 43.39 cv
99.744 45.267 99.744 43.39 99.744 45.267 cv
103.138 45.267 99.744 45.267 103.138 45.267 cv
103.138 45.987 103.138 45.267 103.138 45.987 cv
99.744 45.987 103.138 45.987 99.744 45.987 cv
99.744 48.074 99.744 45.987 99.744 48.074 cv
103.51 48.074 99.744 48.074 103.51 48.074 cv
103.51 48.797 103.51 48.074 103.51 48.797 cv
98.932 48.797 103.51 48.797 98.932 48.797 cv
f
106.485 51.74 mo
106.485 52.162 106.485 51.74 106.485 52.162 cv
104.12 52.162 106.485 52.162 104.12 52.162 cv
104.116 52.056 104.133 51.955 104.171 51.857 cv
104.231 51.696 104.327 51.538 104.46 51.381 cv
104.593 51.225 104.784 51.045 105.035 50.84 cv
105.424 50.521 105.687 50.269 105.823 50.082 cv
105.96 49.896 106.029 49.72 106.029 49.554 cv
106.029 49.38 105.966 49.233 105.842 49.114 cv
105.717 48.994 105.555 48.935 105.355 48.935 cv
105.143 48.935 104.974 48.998 104.847 49.125 cv
104.72 49.252 104.656 49.427 104.654 49.652 cv
104.203 49.605 104.654 49.652 104.203 49.605 cv
104.233 49.269 104.35 49.012 104.552 48.836 cv
104.753 48.659 105.024 48.571 105.365 48.571 cv
105.708 48.571 105.98 48.666 106.18 48.857 cv
106.38 49.047 106.48 49.283 106.48 49.564 cv
106.48 49.707 106.451 49.848 106.392 49.986 cv
106.334 50.124 106.236 50.27 106.101 50.423 cv
105.965 50.576 105.739 50.785 105.423 51.052 cv
105.159 51.273 104.99 51.423 104.915 51.502 cv
104.84 51.581 104.779 51.66 104.73 51.74 cv
106.485 51.74 104.73 51.74 106.485 51.74 cv
f
76.726 59.299 mo
79.991 59.299 li
@
84.582 59.299 mo
87.847 59.299 li
@
92.438 59.299 mo
95.703 59.299 li
@
98.932 62.154 mo
98.932 56.023 98.932 62.154 98.932 56.023 cv
103.368 56.023 98.932 56.023 103.368 56.023 cv
103.368 56.747 103.368 56.023 103.368 56.747 cv
99.744 56.747 103.368 56.747 99.744 56.747 cv
99.744 58.624 99.744 56.747 99.744 58.624 cv
103.138 58.624 99.744 58.624 103.138 58.624 cv
103.138 59.344 103.138 58.624 103.138 59.344 cv
99.744 59.344 103.138 59.344 99.744 59.344 cv
99.744 61.431 99.744 59.344 99.744 61.431 cv
103.51 61.431 99.744 61.431 103.51 61.431 cv
103.51 62.154 103.51 61.431 103.51 62.154 cv
98.932 62.154 103.51 62.154 98.932 62.154 cv
f
105.831 65.518 mo
105.392 65.518 105.831 65.518 105.392 65.518 cv
105.392 62.72 105.392 65.518 105.392 62.72 cv
105.286 62.821 105.147 62.922 104.975 63.022 cv
104.804 63.123 104.649 63.199 104.513 63.249 cv
104.513 62.825 104.513 63.249 104.513 62.825 cv
104.759 62.709 104.973 62.57 105.157 62.405 cv
105.341 62.241 105.471 62.082 105.548 61.927 cv
105.831 61.927 105.548 61.927 105.831 61.927 cv
105.831 65.518 105.831 61.927 105.831 65.518 cv
f
87.564 72.636 mo
87.564 73.311 87.015 73.859 86.34 73.859 cv
85.664 73.859 85.115 73.311 85.115 72.636 cv
85.115 71.961 85.664 71.413 86.34 71.413 cv
87.015 71.413 87.564 71.961 87.564 72.636 cv
cp
ef
0 lw
87.564 72.636 mo
87.564 73.311 87.015 73.859 86.34 73.859 cv
85.664 73.859 85.115 73.311 85.115 72.636 cv
85.115 71.961 85.664 71.413 86.34 71.413 cv
87.015 71.413 87.564 71.961 87.564 72.636 cv
cp
@
98.89 75.51 mo
98.89 69.379 98.89 75.51 98.89 69.379 cv
100.112 69.379 98.89 69.379 100.112 69.379 cv
101.564 73.72 100.112 69.379 101.564 73.72 cv
101.698 74.124 101.796 74.427 101.857 74.628 cv
101.927 74.405 102.036 74.077 102.183 73.645 cv
103.652 69.379 102.183 73.645 103.652 69.379 cv
104.745 69.379 103.652 69.379 104.745 69.379 cv
104.745 75.51 104.745 69.379 104.745 75.51 cv
103.962 75.51 104.745 75.51 103.962 75.51 cv
103.962 70.379 103.962 75.51 103.962 70.379 cv
102.179 75.51 103.962 70.379 102.179 75.51 cv
101.447 75.51 102.179 75.51 101.447 75.51 cv
99.673 70.291 101.447 75.51 99.673 70.291 cv
99.673 75.51 99.673 70.291 99.673 75.51 cv
98.89 75.51 99.673 75.51 98.89 75.51 cv
f
108.902 74.08 mo
109.68 74.176 108.902 74.08 109.68 74.176 cv
109.558 74.631 109.33 74.983 108.998 75.234 cv
108.666 75.485 108.242 75.611 107.726 75.611 cv
107.076 75.611 106.561 75.411 106.18 75.01 cv
105.799 74.61 105.609 74.049 105.609 73.327 cv
105.609 72.58 105.801 72 106.186 71.588 cv
106.571 71.175 107.07 70.969 107.684 70.969 cv
108.278 70.969 108.764 71.171 109.141 71.575 cv
109.517 71.979 109.705 72.548 109.705 73.281 cv
109.705 73.326 109.704 73.393 109.701 73.482 cv
106.387 73.482 109.701 73.482 106.387 73.482 cv
106.415 73.97 106.553 74.343 106.801 74.603 cv
107.05 74.862 107.359 74.992 107.73 74.992 cv
108.006 74.992 108.242 74.919 108.437 74.774 cv
108.633 74.629 108.788 74.398 108.902 74.08 cv
cp
106.429 72.863 mo
108.91 72.863 106.429 72.863 108.91 72.863 cv
108.877 72.49 108.782 72.209 108.626 72.023 cv
108.386 71.733 108.075 71.588 107.693 71.588 cv
107.347 71.588 107.056 71.703 106.82 71.935 cv
106.584 72.166 106.454 72.476 106.429 72.863 cv
f
113.555 74.962 mo
113.276 75.199 113.007 75.366 112.749 75.464 cv
112.491 75.561 112.214 75.61 111.919 75.61 cv
111.431 75.61 111.055 75.491 110.793 75.253 cv
110.531 75.014 110.4 74.71 110.4 74.339 cv
110.4 74.121 110.449 73.923 110.548 73.743 cv
110.647 73.563 110.777 73.419 110.937 73.31 cv
111.098 73.201 111.278 73.119 111.479 73.063 cv
111.627 73.024 111.85 72.987 112.149 72.951 cv
112.757 72.878 113.205 72.792 113.492 72.691 cv
113.495 72.588 113.496 72.523 113.496 72.495 cv
113.496 72.188 113.425 71.972 113.283 71.846 cv
113.09 71.676 112.805 71.591 112.425 71.591 cv
112.071 71.591 111.809 71.653 111.64 71.777 cv
111.472 71.902 111.347 72.121 111.266 72.436 cv
110.529 72.336 111.266 72.436 110.529 72.336 cv
110.596 72.021 110.707 71.766 110.86 71.573 cv
111.013 71.379 111.235 71.23 111.525 71.125 cv
111.816 71.021 112.152 70.968 112.534 70.968 cv
112.913 70.968 113.222 71.013 113.459 71.102 cv
113.696 71.191 113.87 71.304 113.982 71.439 cv
114.093 71.574 114.172 71.745 114.216 71.951 cv
114.241 72.079 114.254 72.311 114.254 72.645 cv
114.254 73.649 114.254 72.645 114.254 73.649 cv
114.254 74.349 114.27 74.791 114.302 74.977 cv
114.334 75.162 114.398 75.34 114.492 75.51 cv
113.706 75.51 114.492 75.51 113.706 75.51 cv
113.628 75.354 113.577 75.171 113.555 74.962 cv
cp
113.492 73.281 mo
113.219 73.392 112.809 73.487 112.262 73.565 cv
111.952 73.61 111.733 73.66 111.605 73.716 cv
111.477 73.772 111.378 73.853 111.308 73.96 cv
111.238 74.068 111.203 74.187 111.203 74.318 cv
111.203 74.519 111.279 74.686 111.431 74.82 cv
111.583 74.954 111.806 75.021 112.099 75.021 cv
112.389 75.021 112.647 74.957 112.873 74.83 cv
113.099 74.703 113.265 74.53 113.371 74.31 cv
113.452 74.14 113.492 73.889 113.492 73.557 cv
113.492 73.281 113.492 73.557 113.492 73.281 cv
f
115.149 74.184 mo
115.894 74.067 115.149 74.184 115.894 74.067 cv
115.936 74.365 116.052 74.594 116.243 74.753 cv
116.434 74.912 116.702 74.991 117.045 74.991 cv
117.391 74.991 117.647 74.921 117.815 74.78 cv
117.982 74.639 118.066 74.474 118.066 74.284 cv
118.066 74.114 117.992 73.98 117.844 73.883 cv
117.741 73.816 117.484 73.731 117.074 73.628 cv
116.522 73.488 116.139 73.368 115.925 73.266 cv
115.712 73.164 115.55 73.024 115.44 72.844 cv
115.33 72.664 115.275 72.465 115.275 72.248 cv
115.275 72.05 115.32 71.867 115.411 71.698 cv
115.501 71.529 115.625 71.389 115.781 71.278 cv
115.898 71.191 116.058 71.118 116.26 71.058 cv
116.462 70.998 116.679 70.968 116.911 70.968 cv
117.26 70.968 117.566 71.018 117.829 71.119 cv
118.093 71.219 118.288 71.355 118.413 71.526 cv
118.539 71.698 118.625 71.927 118.673 72.214 cv
117.936 72.315 118.673 72.214 117.936 72.315 cv
117.903 72.086 117.806 71.908 117.645 71.779 cv
117.485 71.651 117.258 71.587 116.965 71.587 cv
116.619 71.587 116.372 71.644 116.224 71.759 cv
116.077 71.873 116.003 72.007 116.003 72.16 cv
116.003 72.258 116.033 72.345 116.095 72.423 cv
116.156 72.504 116.252 72.571 116.384 72.624 cv
116.459 72.652 116.681 72.716 117.049 72.817 cv
117.582 72.959 117.954 73.075 118.164 73.166 cv
118.375 73.256 118.54 73.388 118.66 73.561 cv
118.78 73.734 118.84 73.948 118.84 74.205 cv
118.84 74.456 118.767 74.692 118.62 74.914 cv
118.474 75.135 118.262 75.307 117.986 75.428 cv
117.71 75.549 117.398 75.61 117.049 75.61 cv
116.471 75.61 116.031 75.49 115.729 75.25 cv
115.426 75.011 115.233 74.655 115.149 74.184 cv
f
122.648 75.51 mo
122.648 74.858 122.648 75.51 122.648 74.858 cv
122.302 75.359 121.832 75.61 121.238 75.61 cv
120.975 75.61 120.731 75.56 120.503 75.46 cv
120.276 75.359 120.107 75.233 119.997 75.081 cv
119.887 74.929 119.809 74.743 119.765 74.523 cv
119.734 74.375 119.719 74.141 119.719 73.821 cv
119.719 71.069 119.719 73.821 119.719 71.069 cv
120.472 71.069 119.719 71.069 120.472 71.069 cv
120.472 73.532 120.472 71.069 120.472 73.532 cv
120.472 73.925 120.487 74.19 120.518 74.327 cv
120.565 74.524 120.666 74.68 120.819 74.793 cv
120.973 74.906 121.162 74.962 121.388 74.962 cv
121.614 74.962 121.826 74.904 122.024 74.789 cv
122.223 74.673 122.363 74.515 122.445 74.316 cv
122.527 74.117 122.568 73.828 122.568 73.448 cv
122.568 71.069 122.568 73.448 122.568 71.069 cv
123.322 71.069 122.568 71.069 123.322 71.069 cv
123.322 75.51 123.322 71.069 123.322 75.51 cv
122.648 75.51 123.322 75.51 122.648 75.51 cv
f
124.523 75.51 mo
124.523 71.069 124.523 75.51 124.523 71.069 cv
125.201 71.069 124.523 71.069 125.201 71.069 cv
125.201 71.742 125.201 71.069 125.201 71.742 cv
125.374 71.427 125.534 71.219 125.68 71.119 cv
125.827 71.019 125.988 70.968 126.163 70.968 cv
126.417 70.968 126.675 71.049 126.938 71.211 cv
126.678 71.909 126.938 71.211 126.678 71.909 cv
126.494 71.801 126.31 71.746 126.126 71.746 cv
125.961 71.746 125.813 71.796 125.682 71.895 cv
125.551 71.994 125.458 72.131 125.402 72.307 cv
125.318 72.574 125.276 72.867 125.276 73.185 cv
125.276 75.51 125.276 73.185 125.276 75.51 cv
124.523 75.51 125.276 75.51 124.523 75.51 cv
f
130.43 74.08 mo
131.208 74.176 130.43 74.08 131.208 74.176 cv
131.086 74.631 130.858 74.983 130.526 75.234 cv
130.194 75.485 129.77 75.611 129.254 75.611 cv
128.604 75.611 128.089 75.411 127.708 75.01 cv
127.327 74.61 127.137 74.049 127.137 73.327 cv
127.137 72.58 127.329 72 127.714 71.588 cv
128.099 71.175 128.598 70.969 129.212 70.969 cv
129.806 70.969 130.292 71.171 130.669 71.575 cv
131.045 71.979 131.233 72.548 131.233 73.281 cv
131.233 73.326 131.232 73.393 131.229 73.482 cv
127.915 73.482 131.229 73.482 127.915 73.482 cv
127.943 73.97 128.081 74.343 128.329 74.603 cv
128.578 74.862 128.887 74.992 129.258 74.992 cv
129.534 74.992 129.77 74.919 129.966 74.774 cv
130.161 74.629 130.316 74.398 130.43 74.08 cv
cp
127.957 72.863 mo
130.438 72.863 127.957 72.863 130.438 72.863 cv
130.405 72.49 130.31 72.209 130.154 72.023 cv
129.914 71.733 129.603 71.588 129.221 71.588 cv
128.875 71.588 128.584 71.703 128.348 71.935 cv
128.112 72.166 127.982 72.476 127.957 72.863 cv
f
132.183 75.51 mo
132.183 71.069 132.183 75.51 132.183 71.069 cv
132.857 71.069 132.183 71.069 132.857 71.069 cv
132.857 71.692 132.857 71.069 132.857 71.692 cv
132.996 71.474 133.182 71.3 133.413 71.167 cv
133.645 71.035 133.909 70.968 134.204 70.968 cv
134.533 70.968 134.803 71.037 135.014 71.173 cv
135.225 71.31 135.373 71.501 135.46 71.746 cv
135.811 71.228 136.269 70.968 136.832 70.968 cv
137.273 70.968 137.612 71.09 137.849 71.334 cv
138.086 71.578 138.205 71.954 138.205 72.461 cv
138.205 75.51 138.205 72.461 138.205 75.51 cv
137.456 75.51 138.205 75.51 137.456 75.51 cv
137.456 72.712 137.456 75.51 137.456 72.712 cv
137.456 72.411 137.431 72.194 137.383 72.062 cv
137.334 71.93 137.245 71.823 137.117 71.742 cv
136.989 71.661 136.838 71.621 136.665 71.621 cv
136.352 71.621 136.093 71.725 135.887 71.932 cv
135.68 72.14 135.577 72.473 135.577 72.93 cv
135.577 75.51 135.577 72.93 135.577 75.51 cv
134.824 75.51 135.577 75.51 134.824 75.51 cv
134.824 72.624 134.824 75.51 134.824 72.624 cv
134.824 72.29 134.762 72.039 134.639 71.872 cv
134.517 71.704 134.316 71.621 134.037 71.621 cv
133.825 71.621 133.629 71.677 133.449 71.788 cv
133.269 71.9 133.139 72.063 133.058 72.277 cv
132.977 72.492 132.936 72.802 132.936 73.206 cv
132.936 75.51 132.936 73.206 132.936 75.51 cv
132.183 75.51 132.936 75.51 132.183 75.51 cv
f
142.47 74.08 mo
143.248 74.176 142.47 74.08 143.248 74.176 cv
143.126 74.631 142.898 74.983 142.566 75.234 cv
142.234 75.485 141.81 75.611 141.294 75.611 cv
140.644 75.611 140.129 75.411 139.748 75.01 cv
139.367 74.61 139.177 74.049 139.177 73.327 cv
139.177 72.58 139.369 72 139.754 71.588 cv
140.139 71.175 140.638 70.969 141.252 70.969 cv
141.846 70.969 142.332 71.171 142.709 71.575 cv
143.085 71.979 143.273 72.548 143.273 73.281 cv
143.273 73.326 143.272 73.393 143.269 73.482 cv
139.955 73.482 143.269 73.482 139.955 73.482 cv
139.983 73.97 140.121 74.343 140.369 74.603 cv
140.618 74.862 140.927 74.992 141.298 74.992 cv
141.574 74.992 141.81 74.919 142.006 74.774 cv
142.201 74.629 142.356 74.398 142.47 74.08 cv
cp
139.997 72.863 mo
142.478 72.863 139.997 72.863 142.478 72.863 cv
142.445 72.49 142.35 72.209 142.194 72.023 cv
141.954 71.733 141.643 71.588 141.261 71.588 cv
140.915 71.588 140.624 71.703 140.388 71.935 cv
140.152 72.166 140.022 72.476 139.997 72.863 cv
f
144.223 75.51 mo
144.223 71.069 144.223 75.51 144.223 71.069 cv
144.901 71.069 144.223 71.069 144.901 71.069 cv
144.901 71.7 144.901 71.069 144.901 71.7 cv
145.227 71.212 145.699 70.968 146.315 70.968 cv
146.583 70.968 146.829 71.017 147.054 71.113 cv
147.279 71.209 147.447 71.335 147.558 71.491 cv
147.67 71.647 147.748 71.833 147.793 72.047 cv
147.821 72.187 147.834 72.431 147.834 72.779 cv
147.834 75.51 147.834 72.779 147.834 75.51 cv
147.081 75.51 147.834 75.51 147.081 75.51 cv
147.081 72.809 147.081 75.51 147.081 72.809 cv
147.081 72.502 147.052 72.273 146.993 72.121 cv
146.935 71.969 146.831 71.847 146.682 71.757 cv
146.532 71.666 146.357 71.621 146.156 71.621 cv
145.836 71.621 145.559 71.723 145.326 71.926 cv
145.093 72.13 144.976 72.516 144.976 73.085 cv
144.976 75.51 144.976 73.085 144.976 75.51 cv
144.223 75.51 144.976 75.51 144.223 75.51 cv
f
150.663 74.837 mo
150.772 75.502 150.663 74.837 150.772 75.502 cv
150.56 75.547 150.37 75.569 150.203 75.569 cv
149.929 75.569 149.717 75.526 149.567 75.439 cv
149.416 75.353 149.31 75.239 149.249 75.098 cv
149.187 74.958 149.156 74.661 149.156 74.21 cv
149.156 71.655 149.156 74.21 149.156 71.655 cv
148.604 71.655 149.156 71.655 148.604 71.655 cv
148.604 71.069 148.604 71.655 148.604 71.069 cv
149.156 71.069 148.604 71.069 149.156 71.069 cv
149.156 69.969 149.156 71.069 149.156 69.969 cv
149.906 69.518 149.156 69.969 149.906 69.518 cv
149.906 71.069 149.906 69.518 149.906 71.069 cv
150.663 71.069 149.906 71.069 150.663 71.069 cv
150.663 71.655 150.663 71.069 150.663 71.655 cv
149.906 71.655 150.663 71.655 149.906 71.655 cv
149.906 74.252 149.906 71.655 149.906 74.252 cv
149.906 74.466 149.919 74.604 149.945 74.666 cv
149.972 74.727 150.015 74.776 150.075 74.812 cv
150.135 74.848 150.221 74.866 150.332 74.866 cv
150.416 74.866 150.526 74.857 150.663 74.837 cv
f
151.064 74.184 mo
151.809 74.067 151.064 74.184 151.809 74.067 cv
151.851 74.365 151.967 74.594 152.158 74.753 cv
152.349 74.912 152.617 74.991 152.96 74.991 cv
153.306 74.991 153.562 74.921 153.73 74.78 cv
153.897 74.639 153.981 74.474 153.981 74.284 cv
153.981 74.114 153.907 73.98 153.759 73.883 cv
153.656 73.816 153.399 73.731 152.989 73.628 cv
152.437 73.488 152.054 73.368 151.84 73.266 cv
151.627 73.164 151.465 73.024 151.355 72.844 cv
151.245 72.664 151.19 72.465 151.19 72.248 cv
151.19 72.05 151.235 71.867 151.326 71.698 cv
151.416 71.529 151.54 71.389 151.696 71.278 cv
151.813 71.191 151.973 71.118 152.175 71.058 cv
152.377 70.998 152.594 70.968 152.826 70.968 cv
153.175 70.968 153.481 71.018 153.744 71.119 cv
154.008 71.219 154.203 71.355 154.328 71.526 cv
154.454 71.698 154.54 71.927 154.588 72.214 cv
153.851 72.315 154.588 72.214 153.851 72.315 cv
153.818 72.086 153.721 71.908 153.56 71.779 cv
153.4 71.651 153.173 71.587 152.88 71.587 cv
152.534 71.587 152.287 71.644 152.14 71.759 cv
151.992 71.873 151.918 72.007 151.918 72.16 cv
151.918 72.258 151.948 72.345 152.01 72.423 cv
152.071 72.504 152.167 72.571 152.299 72.624 cv
152.374 72.652 152.596 72.716 152.964 72.817 cv
153.497 72.959 153.869 73.075 154.079 73.166 cv
154.29 73.256 154.455 73.388 154.575 73.561 cv
154.695 73.734 154.755 73.948 154.755 74.205 cv
154.755 74.456 154.682 74.692 154.535 74.914 cv
154.389 75.135 154.178 75.307 153.901 75.428 cv
153.625 75.549 153.313 75.61 152.964 75.61 cv
152.386 75.61 151.946 75.49 151.644 75.25 cv
151.341 75.011 151.148 74.655 151.064 74.184 cv
f
28.638 110.199 mo
28.571 109.434 28.638 110.199 28.571 109.434 cv
28.878 109.397 29.13 109.313 29.326 109.181 cv
29.523 109.048 29.682 108.843 29.803 108.564 cv
29.925 108.285 29.986 107.971 29.986 107.623 cv
29.986 107.313 29.939 107.04 29.847 106.803 cv
29.755 106.566 29.629 106.39 29.469 106.274 cv
29.308 106.159 29.133 106.101 28.943 106.101 cv
28.751 106.101 28.583 106.156 28.439 106.268 cv
28.296 106.38 28.175 106.564 28.077 106.82 cv
28.013 106.984 27.913 107.348 27.778 107.911 cv
27.643 108.475 27.515 108.869 27.395 109.095 cv
27.242 109.388 27.051 109.606 26.824 109.749 cv
26.596 109.893 26.342 109.965 26.06 109.965 cv
25.75 109.965 25.461 109.877 25.192 109.701 cv
24.923 109.526 24.718 109.269 24.579 108.932 cv
24.439 108.595 24.369 108.22 24.369 107.807 cv
24.369 107.353 24.443 106.952 24.589 106.605 cv
24.736 106.258 24.951 105.991 25.236 105.804 cv
25.52 105.617 25.843 105.517 26.202 105.503 cv
26.261 106.281 26.202 105.503 26.261 106.281 cv
25.873 106.322 25.58 106.464 25.382 106.705 cv
25.184 106.946 25.085 107.302 25.085 107.773 cv
25.085 108.264 25.175 108.622 25.355 108.846 cv
25.535 109.071 25.752 109.183 26.006 109.183 cv
26.226 109.183 26.407 109.103 26.55 108.944 cv
26.692 108.788 26.838 108.381 26.987 107.721 cv
27.136 107.062 27.267 106.61 27.378 106.364 cv
27.543 106.007 27.752 105.744 28.004 105.574 cv
28.256 105.404 28.547 105.319 28.877 105.319 cv
29.203 105.319 29.51 105.412 29.799 105.599 cv
30.088 105.786 30.313 106.054 30.473 106.404 cv
30.633 106.754 30.714 107.148 30.714 107.585 cv
30.714 108.14 30.633 108.605 30.471 108.98 cv
30.309 109.355 30.066 109.649 29.741 109.862 cv
29.416 110.076 29.048 110.188 28.638 110.199 cv
f
32.312 104.309 mo
26.165 104.309 32.312 104.309 26.165 104.309 cv
26.165 103.623 26.165 104.309 26.165 103.623 cv
26.742 103.623 26.165 103.623 26.742 103.623 cv
26.516 103.461 26.347 103.279 26.234 103.075 cv
26.121 102.872 26.064 102.625 26.064 102.335 cv
26.064 101.956 26.162 101.621 26.357 101.331 cv
26.552 101.042 26.828 100.823 27.184 100.675 cv
27.539 100.527 27.929 100.453 28.353 100.453 cv
28.808 100.453 29.217 100.535 29.581 100.698 cv
29.946 100.861 30.225 101.098 30.418 101.409 cv
30.612 101.72 30.709 102.047 30.709 102.389 cv
30.709 102.64 30.656 102.866 30.55 103.065 cv
30.444 103.264 30.31 103.428 30.148 103.556 cv
32.312 103.556 30.148 103.556 32.312 103.556 cv
32.312 104.309 32.312 103.556 32.312 104.309 cv
cp
28.412 103.627 mo
28.984 103.627 29.406 103.512 29.68 103.28 cv
29.953 103.049 30.09 102.769 30.09 102.44 cv
30.09 102.105 29.948 101.819 29.665 101.58 cv
29.382 101.342 28.943 101.223 28.349 101.223 cv
27.783 101.223 27.359 101.339 27.077 101.572 cv
26.795 101.805 26.654 102.083 26.654 102.406 cv
26.654 102.727 26.804 103.011 27.104 103.257 cv
27.404 103.504 27.84 103.627 28.412 103.627 cv
f
30.061 96.619 mo
30.298 96.898 30.466 97.166 30.563 97.424 cv
30.661 97.682 30.71 97.959 30.71 98.254 cv
30.71 98.742 30.59 99.117 30.352 99.379 cv
30.113 99.641 29.809 99.772 29.437 99.772 cv
29.22 99.772 29.021 99.723 28.841 99.624 cv
28.661 99.525 28.517 99.395 28.408 99.235 cv
28.299 99.075 28.217 98.894 28.161 98.693 cv
28.122 98.545 28.084 98.322 28.048 98.024 cv
27.976 97.416 27.889 96.969 27.789 96.682 cv
27.685 96.679 27.62 96.678 27.592 96.678 cv
27.285 96.678 27.069 96.749 26.943 96.891 cv
26.773 97.083 26.688 97.369 26.688 97.748 cv
26.688 98.102 26.75 98.364 26.874 98.532 cv
26.998 98.701 27.218 98.826 27.533 98.907 cv
27.433 99.642 27.533 98.907 27.433 99.642 cv
27.118 99.576 26.863 99.465 26.669 99.312 cv
26.475 99.159 26.326 98.937 26.221 98.647 cv
26.117 98.357 26.064 98.021 26.064 97.639 cv
26.064 97.26 26.109 96.952 26.198 96.715 cv
26.288 96.478 26.4 96.304 26.535 96.192 cv
26.671 96.081 26.842 96.003 27.048 95.958 cv
27.176 95.933 27.408 95.921 27.743 95.921 cv
28.747 95.921 27.743 95.921 28.747 95.921 cv
29.447 95.921 29.89 95.905 30.076 95.873 cv
30.261 95.84 30.439 95.777 30.609 95.682 cv
30.609 96.468 30.609 95.682 30.609 96.468 cv
30.453 96.547 30.27 96.597 30.061 96.619 cv
cp
28.379 96.682 mo
28.49 96.955 28.585 97.365 28.663 97.911 cv
28.708 98.221 28.758 98.44 28.814 98.568 cv
28.87 98.696 28.951 98.795 29.059 98.865 cv
29.166 98.934 29.285 98.969 29.417 98.969 cv
29.617 98.969 29.785 98.893 29.919 98.741 cv
30.053 98.589 30.12 98.367 30.12 98.074 cv
30.12 97.784 30.056 97.526 29.929 97.301 cv
29.802 97.075 29.629 96.909 29.408 96.803 cv
29.238 96.722 28.987 96.682 28.655 96.682 cv
28.379 96.682 28.655 96.682 28.379 96.682 cv
f
30.609 94.725 mo
26.165 94.725 30.609 94.725 26.165 94.725 cv
26.165 94.048 26.165 94.725 26.165 94.048 cv
26.797 94.048 26.165 94.048 26.797 94.048 cv
26.308 93.721 26.064 93.25 26.064 92.634 cv
26.064 92.366 26.112 92.12 26.209 91.896 cv
26.305 91.672 26.431 91.504 26.587 91.392 cv
26.744 91.281 26.929 91.202 27.144 91.158 cv
27.283 91.13 27.528 91.116 27.876 91.116 cv
30.609 91.116 27.876 91.116 30.609 91.116 cv
30.609 91.869 30.609 91.116 30.609 91.869 cv
27.906 91.869 30.609 91.869 27.906 91.869 cv
27.599 91.869 27.369 91.898 27.217 91.957 cv
27.065 92.015 26.944 92.119 26.853 92.268 cv
26.762 92.417 26.717 92.592 26.717 92.793 cv
26.717 93.114 26.819 93.39 27.023 93.623 cv
27.226 93.856 27.613 93.972 28.182 93.972 cv
30.609 93.972 28.182 93.972 30.609 93.972 cv
30.609 94.725 30.609 93.972 30.609 94.725 cv
f
32.312 87.572 mo
24.474 87.572 32.312 87.572 24.474 87.572 cv
24.474 85.912 24.474 87.572 24.474 85.912 cv
25.097 85.912 24.474 85.912 25.097 85.912 cv
25.097 86.819 25.097 85.912 25.097 86.819 cv
31.688 86.819 25.097 86.819 31.688 86.819 cv
31.688 85.912 31.688 86.819 31.688 85.912 cv
32.312 85.912 31.688 85.912 32.312 85.912 cv
32.312 87.572 32.312 85.912 32.312 87.572 cv
f
25.947 85.31 mo
25.509 85.31 25.137 85.2 24.83 84.98 cv
24.523 84.759 24.369 84.44 24.369 84.022 cv
24.369 83.637 24.507 83.319 24.782 83.066 cv
25.056 82.814 25.46 82.688 25.993 82.688 cv
26.512 82.688 26.912 82.815 27.192 83.071 cv
27.472 83.326 27.613 83.64 27.613 84.014 cv
27.613 84.384 27.474 84.693 27.198 84.94 cv
26.922 85.187 26.505 85.31 25.947 85.31 cv
cp
24.888 84.001 mo
24.888 84.188 24.969 84.343 25.131 84.467 cv
25.293 84.591 25.59 84.653 26.022 84.653 cv
26.416 84.653 26.693 84.591 26.853 84.465 cv
27.013 84.34 27.094 84.185 27.094 84.001 cv
27.094 83.811 27.013 83.655 26.851 83.531 cv
26.689 83.407 26.393 83.345 25.964 83.345 cv
25.568 83.345 25.289 83.407 25.129 83.533 cv
24.968 83.658 24.888 83.814 24.888 84.001 cv
cp
30.835 83.997 mo
24.369 80.643 30.835 83.997 24.369 80.643 cv
24.369 80.032 24.369 80.643 24.369 80.032 cv
30.835 83.374 24.369 80.032 30.835 83.374 cv
30.835 83.997 30.835 83.374 30.835 83.997 cv
cp
29.169 81.346 mo
28.729 81.346 28.355 81.235 28.05 81.015 cv
27.744 80.795 27.592 80.474 27.592 80.053 cv
27.592 79.669 27.729 79.35 28.004 79.098 cv
28.279 78.846 28.683 78.719 29.215 78.719 cv
29.734 78.719 30.134 78.847 30.414 79.102 cv
30.695 79.357 30.835 79.673 30.835 80.049 cv
30.835 80.42 30.696 80.729 30.418 80.975 cv
30.141 81.222 29.724 81.346 29.169 81.346 cv
cp
28.111 80.032 mo
28.111 80.222 28.191 80.379 28.353 80.503 cv
28.515 80.627 28.812 80.689 29.245 80.689 cv
29.635 80.689 29.911 80.626 30.073 80.501 cv
30.235 80.375 30.316 80.221 30.316 80.037 cv
30.316 79.844 30.235 79.686 30.073 79.562 cv
29.911 79.438 29.616 79.376 29.186 79.376 cv
28.79 79.376 28.512 79.439 28.351 79.564 cv
28.191 79.69 28.111 79.846 28.111 80.032 cv
f
32.312 76.338 mo
32.312 77.998 32.312 76.338 32.312 77.998 cv
31.688 77.998 32.312 77.998 31.688 77.998 cv
31.688 77.091 31.688 77.998 31.688 77.091 cv
25.097 77.091 31.688 77.091 25.097 77.091 cv
25.097 77.998 25.097 77.091 25.097 77.998 cv
24.474 77.998 25.097 77.998 24.474 77.998 cv
24.474 76.338 24.474 77.998 24.474 76.338 cv
32.312 76.338 24.474 76.338 32.312 76.338 cv
f
142.513 203.978 mo
142.513 198.571 142.513 203.978 142.513 198.571 cv
140.492 198.571 142.513 198.571 140.492 198.571 cv
140.492 197.847 140.492 198.571 140.492 197.847 cv
145.354 197.847 140.492 197.847 145.354 197.847 cv
145.354 198.571 145.354 197.847 145.354 198.571 cv
143.325 198.571 145.354 198.571 143.325 198.571 cv
143.325 203.978 143.325 198.571 143.325 203.978 cv
142.513 203.978 143.325 203.978 142.513 203.978 cv
f
145.881 201.757 mo
145.881 200.935 146.11 200.325 146.567 199.93 cv
146.95 199.601 147.415 199.436 147.965 199.436 cv
148.576 199.436 149.075 199.636 149.463 200.036 cv
149.851 200.436 150.045 200.989 150.045 201.694 cv
150.045 202.266 149.959 202.715 149.788 203.043 cv
149.616 203.37 149.366 203.625 149.038 203.806 cv
148.711 203.987 148.353 204.078 147.965 204.078 cv
147.343 204.078 146.84 203.879 146.456 203.48 cv
146.073 203.081 145.881 202.507 145.881 201.757 cv
cp
146.655 201.757 mo
146.655 202.326 146.779 202.752 147.028 203.035 cv
147.276 203.318 147.588 203.459 147.965 203.459 cv
148.339 203.459 148.65 203.317 148.898 203.032 cv
149.147 202.748 149.271 202.315 149.271 201.732 cv
149.271 201.183 149.146 200.767 148.896 200.484 cv
148.646 200.201 148.336 200.059 147.965 200.059 cv
147.588 200.059 147.276 200.2 147.028 200.482 cv
146.779 200.763 146.655 201.188 146.655 201.757 cv
f
152.601 203.304 mo
152.71 203.969 152.601 203.304 152.71 203.969 cv
152.498 204.014 152.308 204.036 152.141 204.036 cv
151.867 204.036 151.655 203.993 151.505 203.906 cv
151.354 203.82 151.248 203.706 151.187 203.565 cv
151.125 203.425 151.094 203.128 151.094 202.677 cv
151.094 200.122 151.094 202.677 151.094 200.122 cv
150.542 200.122 151.094 200.122 150.542 200.122 cv
150.542 199.536 150.542 200.122 150.542 199.536 cv
151.094 199.536 150.542 199.536 151.094 199.536 cv
151.094 198.436 151.094 199.536 151.094 198.436 cv
151.844 197.985 151.094 198.436 151.844 197.985 cv
151.844 199.536 151.844 197.985 151.844 199.536 cv
152.601 199.536 151.844 199.536 152.601 199.536 cv
152.601 200.122 152.601 199.536 152.601 200.122 cv
151.844 200.122 152.601 200.122 151.844 200.122 cv
151.844 202.719 151.844 200.122 151.844 202.719 cv
151.844 202.933 151.857 203.071 151.883 203.133 cv
151.91 203.194 151.953 203.243 152.013 203.279 cv
152.073 203.315 152.159 203.333 152.27 203.333 cv
152.354 203.333 152.464 203.324 152.601 203.304 cv
f
156.203 203.43 mo
155.924 203.667 155.655 203.834 155.397 203.932 cv
155.139 204.029 154.862 204.078 154.567 204.078 cv
154.079 204.078 153.703 203.959 153.441 203.721 cv
153.179 203.482 153.048 203.178 153.048 202.807 cv
153.048 202.589 153.097 202.391 153.196 202.211 cv
153.295 202.031 153.425 201.887 153.585 201.778 cv
153.746 201.669 153.926 201.587 154.127 201.531 cv
154.275 201.492 154.498 201.455 154.797 201.418 cv
155.405 201.346 155.853 201.26 156.14 201.159 cv
156.143 201.056 156.144 200.991 156.144 200.963 cv
156.144 200.656 156.073 200.44 155.931 200.314 cv
155.738 200.144 155.453 200.059 155.073 200.059 cv
154.719 200.059 154.457 200.121 154.288 200.245 cv
154.12 200.37 153.995 200.589 153.914 200.904 cv
153.177 200.804 153.914 200.904 153.177 200.804 cv
153.244 200.489 153.355 200.234 153.508 200.041 cv
153.661 199.847 153.883 199.698 154.173 199.593 cv
154.464 199.489 154.8 199.436 155.182 199.436 cv
155.561 199.436 155.87 199.481 156.107 199.57 cv
156.344 199.659 156.518 199.772 156.63 199.907 cv
156.741 200.042 156.82 200.213 156.864 200.419 cv
156.889 200.547 156.902 200.779 156.902 201.113 cv
156.902 202.117 156.902 201.113 156.902 202.117 cv
156.902 202.817 156.918 203.259 156.95 203.445 cv
156.982 203.63 157.046 203.808 157.14 203.978 cv
156.354 203.978 157.14 203.978 156.354 203.978 cv
156.276 203.822 156.225 203.639 156.203 203.43 cv
cp
156.14 201.749 mo
155.867 201.86 155.457 201.955 154.91 202.033 cv
154.6 202.078 154.381 202.128 154.253 202.184 cv
154.125 202.24 154.026 202.321 153.956 202.428 cv
153.886 202.536 153.851 202.655 153.851 202.786 cv
153.851 202.987 153.927 203.154 154.079 203.288 cv
154.231 203.422 154.454 203.489 154.747 203.489 cv
155.037 203.489 155.295 203.425 155.521 203.298 cv
155.747 203.171 155.913 202.998 156.019 202.778 cv
156.1 202.608 156.14 202.357 156.14 202.025 cv
156.14 201.749 156.14 202.025 156.14 201.749 cv
f
158.082 203.978 mo
158.082 197.847 158.082 203.978 158.082 197.847 cv
158.835 197.847 158.082 197.847 158.835 197.847 cv
158.835 203.978 158.835 197.847 158.835 203.978 cv
158.082 203.978 158.835 203.978 158.082 203.978 cv
f
162.48 203.978 mo
162.48 197.847 162.48 203.978 162.48 197.847 cv
164.794 197.847 162.48 197.847 164.794 197.847 cv
165.201 197.847 165.513 197.867 165.727 197.906 cv
166.029 197.956 166.281 198.052 166.485 198.192 cv
166.689 198.333 166.852 198.53 166.977 198.784 cv
167.101 199.038 167.163 199.317 167.163 199.62 cv
167.163 200.142 166.997 200.583 166.665 200.944 cv
166.333 201.305 165.733 201.486 164.865 201.486 cv
163.292 201.486 164.865 201.486 163.292 201.486 cv
163.292 203.978 163.292 201.486 163.292 203.978 cv
162.48 203.978 163.292 203.978 162.48 203.978 cv
cp
163.292 200.762 mo
164.878 200.762 163.292 200.762 164.878 200.762 cv
165.402 200.762 165.775 200.665 165.995 200.469 cv
166.216 200.274 166.326 200 166.326 199.646 cv
166.326 199.389 166.261 199.17 166.131 198.987 cv
166.002 198.804 165.831 198.684 165.619 198.625 cv
165.482 198.589 165.229 198.571 164.861 198.571 cv
163.292 198.571 164.861 198.571 163.292 198.571 cv
163.292 200.762 163.292 198.571 163.292 200.762 cv
f
168.089 203.978 mo
168.089 199.537 168.089 203.978 168.089 199.537 cv
168.767 199.537 168.089 199.537 168.767 199.537 cv
168.767 200.21 168.767 199.537 168.767 200.21 cv
168.94 199.895 169.1 199.687 169.246 199.587 cv
169.393 199.487 169.554 199.436 169.729 199.436 cv
169.983 199.436 170.241 199.517 170.504 199.679 cv
170.244 200.377 170.504 199.679 170.244 200.377 cv
170.06 200.269 169.876 200.214 169.692 200.214 cv
169.527 200.214 169.379 200.264 169.248 200.363 cv
169.117 200.462 169.024 200.599 168.968 200.775 cv
168.884 201.042 168.842 201.335 168.842 201.653 cv
168.842 203.978 168.842 201.653 168.842 203.978 cv
168.089 203.978 168.842 203.978 168.089 203.978 cv
f
173.997 202.547 mo
174.775 202.643 173.997 202.547 174.775 202.643 cv
174.653 203.098 174.425 203.45 174.093 203.701 cv
173.761 203.952 173.337 204.078 172.821 204.078 cv
172.171 204.078 171.656 203.878 171.275 203.477 cv
170.894 203.077 170.704 202.516 170.704 201.794 cv
170.704 201.047 170.896 200.467 171.281 200.055 cv
171.666 199.642 172.165 199.436 172.779 199.436 cv
173.373 199.436 173.859 199.638 174.236 200.042 cv
174.612 200.446 174.8 201.015 174.8 201.748 cv
174.8 201.793 174.799 201.86 174.796 201.949 cv
171.482 201.949 174.796 201.949 171.482 201.949 cv
171.51 202.437 171.648 202.81 171.896 203.07 cv
172.145 203.329 172.454 203.459 172.825 203.459 cv
173.101 203.459 173.337 203.386 173.532 203.241 cv
173.728 203.096 173.883 202.865 173.997 202.547 cv
cp
171.524 201.33 mo
174.005 201.33 171.524 201.33 174.005 201.33 cv
173.972 200.957 173.877 200.676 173.721 200.49 cv
173.481 200.2 173.17 200.055 172.788 200.055 cv
172.442 200.055 172.151 200.17 171.915 200.402 cv
171.679 200.633 171.549 200.943 171.524 201.33 cv
f
175.448 202.652 mo
176.193 202.535 175.448 202.652 176.193 202.535 cv
176.235 202.833 176.351 203.062 176.542 203.221 cv
176.733 203.38 177.001 203.459 177.344 203.459 cv
177.69 203.459 177.946 203.389 178.114 203.248 cv
178.281 203.107 178.365 202.942 178.365 202.752 cv
178.365 202.582 178.291 202.448 178.143 202.351 cv
178.04 202.284 177.783 202.199 177.373 202.096 cv
176.821 201.956 176.438 201.836 176.224 201.734 cv
176.011 201.632 175.849 201.492 175.739 201.312 cv
175.629 201.132 175.574 200.933 175.574 200.716 cv
175.574 200.518 175.619 200.335 175.71 200.166 cv
175.8 199.997 175.924 199.857 176.08 199.746 cv
176.197 199.659 176.357 199.586 176.559 199.526 cv
176.761 199.466 176.978 199.436 177.21 199.436 cv
177.559 199.436 177.865 199.486 178.128 199.587 cv
178.392 199.687 178.587 199.823 178.712 199.994 cv
178.838 200.166 178.924 200.395 178.972 200.682 cv
178.235 200.783 178.972 200.682 178.235 200.783 cv
178.202 200.554 178.105 200.376 177.944 200.247 cv
177.784 200.119 177.557 200.055 177.264 200.055 cv
176.918 200.055 176.671 200.112 176.524 200.226 cv
176.376 200.341 176.302 200.475 176.302 200.628 cv
176.302 200.726 176.332 200.813 176.394 200.891 cv
176.455 200.972 176.551 201.039 176.683 201.092 cv
176.758 201.12 176.98 201.184 177.348 201.285 cv
177.881 201.427 178.253 201.543 178.463 201.634 cv
178.674 201.724 178.839 201.856 178.959 202.029 cv
179.079 202.202 179.139 202.416 179.139 202.673 cv
179.139 202.924 179.066 203.16 178.919 203.382 cv
178.773 203.603 178.562 203.775 178.285 203.896 cv
178.009 204.017 177.697 204.078 177.348 204.078 cv
176.77 204.078 176.33 203.958 176.028 203.718 cv
175.725 203.479 175.532 203.123 175.448 202.652 cv
f
179.734 202.652 mo
180.479 202.535 179.734 202.652 180.479 202.535 cv
180.521 202.833 180.637 203.062 180.828 203.221 cv
181.019 203.38 181.287 203.459 181.63 203.459 cv
181.976 203.459 182.232 203.389 182.4 203.248 cv
182.567 203.107 182.651 202.942 182.651 202.752 cv
182.651 202.582 182.577 202.448 182.429 202.351 cv
182.326 202.284 182.069 202.199 181.659 202.096 cv
181.107 201.956 180.724 201.836 180.51 201.734 cv
180.297 201.632 180.135 201.492 180.025 201.312 cv
179.915 201.132 179.86 200.933 179.86 200.716 cv
179.86 200.518 179.905 200.335 179.996 200.166 cv
180.086 199.997 180.21 199.857 180.366 199.746 cv
180.483 199.659 180.643 199.586 180.845 199.526 cv
181.047 199.466 181.264 199.436 181.496 199.436 cv
181.845 199.436 182.151 199.486 182.414 199.587 cv
182.678 199.687 182.873 199.823 182.998 199.994 cv
183.124 200.166 183.21 200.395 183.258 200.682 cv
182.521 200.783 183.258 200.682 182.521 200.783 cv
182.488 200.554 182.391 200.376 182.23 200.247 cv
182.07 200.119 181.843 200.055 181.55 200.055 cv
181.204 200.055 180.957 200.112 180.81 200.226 cv
180.662 200.341 180.588 200.475 180.588 200.628 cv
180.588 200.726 180.618 200.813 180.68 200.891 cv
180.741 200.972 180.837 201.039 180.969 201.092 cv
181.044 201.12 181.266 201.184 181.634 201.285 cv
182.167 201.427 182.539 201.543 182.749 201.634 cv
182.96 201.724 183.125 201.856 183.245 202.029 cv
183.365 202.202 183.425 202.416 183.425 202.673 cv
183.425 202.924 183.352 203.16 183.205 203.382 cv
183.059 203.603 182.848 203.775 182.571 203.896 cv
182.295 204.017 181.983 204.078 181.634 204.078 cv
181.056 204.078 180.616 203.958 180.314 203.718 cv
180.011 203.479 179.818 203.123 179.734 202.652 cv
f
187.233 203.978 mo
187.233 203.326 187.233 203.978 187.233 203.326 cv
186.887 203.827 186.417 204.078 185.823 204.078 cv
185.56 204.078 185.316 204.028 185.088 203.928 cv
184.861 203.827 184.692 203.701 184.582 203.549 cv
184.472 203.397 184.394 203.211 184.35 202.991 cv
184.319 202.843 184.304 202.609 184.304 202.288 cv
184.304 199.537 184.304 202.288 184.304 199.537 cv
185.057 199.537 184.304 199.537 185.057 199.537 cv
185.057 202 185.057 199.537 185.057 202 cv
185.057 202.393 185.072 202.658 185.103 202.794 cv
185.15 202.992 185.251 203.148 185.404 203.261 cv
185.558 203.374 185.747 203.43 185.973 203.43 cv
186.199 203.43 186.411 203.372 186.609 203.257 cv
186.808 203.141 186.948 202.983 187.03 202.784 cv
187.112 202.585 187.154 202.296 187.154 201.916 cv
187.154 199.537 187.154 201.916 187.154 199.537 cv
187.907 199.537 187.154 199.537 187.907 199.537 cv
187.907 203.978 187.907 199.537 187.907 203.978 cv
187.233 203.978 187.907 203.978 187.233 203.978 cv
f
189.107 203.978 mo
189.107 199.537 189.107 203.978 189.107 199.537 cv
189.785 199.537 189.107 199.537 189.785 199.537 cv
189.785 200.21 189.785 199.537 189.785 200.21 cv
189.958 199.895 190.118 199.687 190.264 199.587 cv
190.411 199.487 190.572 199.436 190.747 199.436 cv
191.001 199.436 191.259 199.517 191.522 199.679 cv
191.262 200.377 191.522 199.679 191.262 200.377 cv
191.078 200.269 190.894 200.214 190.71 200.214 cv
190.545 200.214 190.397 200.264 190.266 200.363 cv
190.135 200.462 190.042 200.599 189.986 200.775 cv
189.902 201.042 189.86 201.335 189.86 201.653 cv
189.86 203.978 189.86 201.653 189.86 203.978 cv
189.107 203.978 189.86 203.978 189.107 203.978 cv
f
195.015 202.547 mo
195.793 202.643 195.015 202.547 195.793 202.643 cv
195.671 203.098 195.443 203.45 195.111 203.701 cv
194.779 203.952 194.355 204.078 193.839 204.078 cv
193.189 204.078 192.674 203.878 192.293 203.477 cv
191.912 203.077 191.722 202.516 191.722 201.794 cv
191.722 201.047 191.914 200.467 192.299 200.055 cv
192.684 199.642 193.183 199.436 193.797 199.436 cv
194.391 199.436 194.877 199.638 195.254 200.042 cv
195.63 200.446 195.818 201.015 195.818 201.748 cv
195.818 201.793 195.817 201.86 195.814 201.949 cv
192.5 201.949 195.814 201.949 192.5 201.949 cv
192.528 202.437 192.666 202.81 192.914 203.07 cv
193.163 203.329 193.472 203.459 193.843 203.459 cv
194.119 203.459 194.355 203.386 194.55 203.241 cv
194.746 203.096 194.901 202.865 195.015 202.547 cv
cp
192.542 201.33 mo
195.023 201.33 192.542 201.33 195.023 201.33 cv
194.99 200.957 194.895 200.676 194.739 200.49 cv
194.499 200.2 194.188 200.055 193.806 200.055 cv
193.46 200.055 193.169 200.17 192.933 200.402 cv
192.697 200.633 192.567 200.943 192.542 201.33 cv
f
199.131 205.68 mo
199.131 197.847 199.131 205.68 199.131 197.847 cv
200.792 197.847 199.131 197.847 200.792 197.847 cv
200.792 198.47 200.792 197.847 200.792 198.47 cv
199.884 198.47 200.792 198.47 199.884 198.47 cv
199.884 205.057 199.884 198.47 199.884 205.057 cv
200.792 205.057 199.884 205.057 200.792 205.057 cv
200.792 205.68 200.792 205.057 200.792 205.68 cv
199.131 205.68 200.792 205.68 199.131 205.68 cv
f
201.558 203.978 mo
201.558 197.847 201.558 203.978 201.558 197.847 cv
203.872 197.847 201.558 197.847 203.872 197.847 cv
204.279 197.847 204.591 197.867 204.805 197.906 cv
205.107 197.956 205.359 198.052 205.563 198.192 cv
205.767 198.333 205.93 198.53 206.055 198.784 cv
206.179 199.038 206.241 199.317 206.241 199.62 cv
206.241 200.142 206.075 200.583 205.743 200.944 cv
205.411 201.305 204.811 201.486 203.943 201.486 cv
202.37 201.486 203.943 201.486 202.37 201.486 cv
202.37 203.978 202.37 201.486 202.37 203.978 cv
201.558 203.978 202.37 203.978 201.558 203.978 cv
cp
202.37 200.762 mo
203.956 200.762 202.37 200.762 203.956 200.762 cv
204.48 200.762 204.853 200.665 205.073 200.469 cv
205.294 200.274 205.404 200 205.404 199.646 cv
205.404 199.389 205.339 199.17 205.209 198.987 cv
205.08 198.804 204.909 198.684 204.697 198.625 cv
204.56 198.589 204.307 198.571 203.939 198.571 cv
202.37 198.571 203.939 198.571 202.37 198.571 cv
202.37 200.762 202.37 198.571 202.37 200.762 cv
f
210.075 203.43 mo
209.796 203.667 209.528 203.834 209.269 203.932 cv
209.011 204.029 208.734 204.078 208.439 204.078 cv
207.951 204.078 207.575 203.959 207.313 203.721 cv
207.051 203.482 206.92 203.178 206.92 202.807 cv
206.92 202.589 206.969 202.391 207.068 202.211 cv
207.167 202.031 207.297 201.887 207.457 201.778 cv
207.618 201.669 207.798 201.587 207.999 201.531 cv
208.147 201.492 208.37 201.455 208.669 201.418 cv
209.277 201.346 209.725 201.26 210.012 201.159 cv
210.015 201.056 210.016 200.991 210.016 200.963 cv
210.016 200.656 209.945 200.44 209.803 200.314 cv
209.61 200.144 209.325 200.059 208.945 200.059 cv
208.591 200.059 208.329 200.121 208.16 200.245 cv
207.992 200.37 207.867 200.589 207.786 200.904 cv
207.049 200.804 207.786 200.904 207.049 200.804 cv
207.116 200.489 207.227 200.234 207.38 200.041 cv
207.533 199.847 207.755 199.698 208.045 199.593 cv
208.336 199.489 208.672 199.436 209.054 199.436 cv
209.433 199.436 209.742 199.481 209.979 199.57 cv
210.216 199.659 210.39 199.772 210.502 199.907 cv
210.613 200.042 210.692 200.213 210.736 200.419 cv
210.761 200.547 210.774 200.779 210.774 201.113 cv
210.774 202.117 210.774 201.113 210.774 202.117 cv
210.774 202.817 210.79 203.259 210.822 203.445 cv
210.854 203.63 210.918 203.808 211.012 203.978 cv
210.226 203.978 211.012 203.978 210.226 203.978 cv
210.148 203.822 210.097 203.639 210.075 203.43 cv
cp
210.012 201.749 mo
209.739 201.86 209.329 201.955 208.782 202.033 cv
208.472 202.078 208.253 202.128 208.125 202.184 cv
207.997 202.24 207.898 202.321 207.828 202.428 cv
207.758 202.536 207.723 202.655 207.723 202.786 cv
207.723 202.987 207.799 203.154 207.951 203.288 cv
208.103 203.422 208.326 203.489 208.619 203.489 cv
208.909 203.489 209.167 203.425 209.393 203.298 cv
209.619 203.171 209.785 202.998 209.891 202.778 cv
209.972 202.608 210.012 202.357 210.012 202.025 cv
210.012 201.749 210.012 202.025 210.012 201.749 cv
f
213.23 205.68 mo
211.569 205.68 213.23 205.68 211.569 205.68 cv
211.569 205.057 211.569 205.68 211.569 205.057 cv
212.477 205.057 211.569 205.057 212.477 205.057 cv
212.477 198.47 212.477 205.057 212.477 198.47 cv
211.569 198.47 212.477 198.47 211.569 198.47 cv
211.569 197.847 211.569 198.47 211.569 197.847 cv
213.23 197.847 211.569 197.847 213.23 197.847 cv
213.23 205.68 213.23 197.847 213.23 205.68 cv
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.29 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
