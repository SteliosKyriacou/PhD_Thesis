%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADP3A2.tmp.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Kampolis Ioannis
%%CreationDate: 14/2/2009, 11:40:10 μμ
%%BoundingBox: 0 0 280 202
%%HiResBoundingBox: 0 0 279.3971 201.5181
%%CropBox: 0 0 279.3971 201.5181
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: 
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	1 index dup/ID get exch/Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.30 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.30 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.30 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get ne dup
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
				if
				end
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} (% &end XMP packet& %) ReadBypdfmark_5
<?xpacket begin='ο»Ώ' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="Acrobat Distiller 8.0.0 (Windows)"
   xap:CreatorTool="OriginLab Corporation"
   xap:ModifyDate="2009-02-14T23:39:52+02:00"
   xap:CreateDate="2009-02-14T23:39:52+02:00"
   dc:format="application/pdf"
   xapMM:DocumentID="uuid:8200139d-e750-4b56-87aa-1918e92f7921"
   xapMM:InstanceID="uuid:1fa32399-aad0-46a4-ba79-76442d657460">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">C:Documents and SettingsKampolis IoannisDesktopso_par_spea.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
<< /0 
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]

/CSA add_res
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -201.518 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 201.518 li
279.397 201.518 li
279.397 0 li
cp
clp
[1 0 0 1 -22.125 0 ]ct
.204 lw
1 lc
1 lj
10 ml
[] 0 dsh
false sadj
80.297 176.54 mo
80.297 .458038 li
false sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.75294 .75294 .75294 colr
@
118.966 176.54 mo
118.966 .458038 li
@
157.635 176.54 mo
157.635 .458038 li
@
196.406 176.54 mo
196.406 .458038 li
@
235.075 176.54 mo
235.075 .458038 li
@
273.744 176.54 mo
273.744 .458038 li
@
60.91 172.971 mo
293.129 172.971 li
@
60.91 151.866 mo
293.129 151.866 li
@
60.91 130.761 mo
293.129 130.761 li
@
60.91 109.656 mo
293.129 109.656 li
@
60.91 88.551 mo
293.129 88.551 li
@
60.91 67.344 mo
293.129 67.344 li
@
60.91 46.239 mo
293.129 46.239 li
@
60.91 25.134 mo
293.129 25.134 li
@
60.91 4.02905 mo
293.129 4.02905 li
@
.306 lw
99.581 176.54 mo
99.581 .458038 li
@
138.352 176.54 mo
138.352 .458038 li
@
177.021 176.54 mo
177.021 .458038 li
@
215.69 176.54 mo
215.69 .458038 li
@
254.461 176.54 mo
254.461 .458038 li
@
60.911 162.47 mo
293.13 162.47 li
@
60.911 141.365 mo
293.13 141.365 li
@
60.911 120.158 mo
293.13 120.158 li
@
60.911 99.053 mo
293.13 99.053 li
@
60.911 77.948 mo
293.13 77.948 li
@
60.911 56.843 mo
293.13 56.843 li
@
60.911 35.636 mo
293.13 35.636 li
@
60.911 14.5311 mo
293.13 14.5311 li
@
52.429 185.373 mo
52.429 184.778 52.49 184.298 52.613 183.935 cv
52.736 183.572 52.918 183.292 53.159 183.096 cv
53.401 182.899 53.705 182.8 54.072 182.8 cv
54.343 182.8 54.58 182.854 54.784 182.963 cv
54.988 183.072 55.156 183.229 55.289 183.434 cv
55.422 183.639 55.526 183.888 55.602 184.183 cv
55.677 184.477 55.715 184.874 55.715 185.373 cv
55.715 185.964 55.655 186.441 55.533 186.804 cv
55.412 187.167 55.23 187.447 54.988 187.645 cv
54.746 187.843 54.441 187.942 54.072 187.942 cv
53.586 187.942 53.205 187.768 52.927 187.42 cv
52.595 187.001 52.429 186.319 52.429 185.373 cv
cp
53.065 185.373 mo
53.065 186.2 53.162 186.75 53.355 187.024 cv
53.549 187.297 53.788 187.434 54.072 187.434 cv
54.356 187.434 54.595 187.297 54.789 187.022 cv
54.983 186.747 55.079 186.197 55.079 185.373 cv
55.079 184.544 54.983 183.993 54.789 183.721 cv
54.595 183.448 54.354 183.312 54.065 183.312 cv
53.781 183.312 53.554 183.432 53.385 183.673 cv
53.172 183.979 53.065 184.546 53.065 185.373 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
56.64 187.857 mo
56.64 187.153 56.64 187.857 56.64 187.153 cv
57.345 187.153 56.64 187.153 57.345 187.153 cv
57.345 187.857 57.345 187.153 57.345 187.857 cv
57.345 188.116 57.299 188.325 57.207 188.484 cv
57.116 188.643 56.97 188.766 56.771 188.853 cv
56.599 188.589 56.771 188.853 56.599 188.589 cv
56.729 188.531 56.826 188.447 56.887 188.336 cv
56.949 188.225 56.984 188.065 56.991 187.857 cv
56.64 187.857 56.991 187.857 56.64 187.857 cv
f
58.245 185.373 mo
58.245 184.778 58.306 184.298 58.429 183.935 cv
58.552 183.572 58.734 183.292 58.975 183.096 cv
59.217 182.899 59.521 182.8 59.888 182.8 cv
60.159 182.8 60.396 182.854 60.6 182.963 cv
60.804 183.072 60.972 183.229 61.105 183.434 cv
61.238 183.639 61.342 183.888 61.418 184.183 cv
61.493 184.477 61.531 184.874 61.531 185.373 cv
61.531 185.964 61.471 186.441 61.349 186.804 cv
61.228 187.167 61.046 187.447 60.804 187.645 cv
60.562 187.843 60.257 187.942 59.888 187.942 cv
59.402 187.942 59.021 187.768 58.743 187.42 cv
58.411 187.001 58.245 186.319 58.245 185.373 cv
cp
58.881 185.373 mo
58.881 186.2 58.978 186.75 59.171 187.024 cv
59.365 187.297 59.604 187.434 59.888 187.434 cv
60.172 187.434 60.411 187.297 60.605 187.022 cv
60.798 186.747 60.895 186.197 60.895 185.373 cv
60.895 184.544 60.798 183.993 60.605 183.721 cv
60.411 183.448 60.17 183.312 59.881 183.312 cv
59.597 183.312 59.37 183.432 59.201 183.673 cv
58.988 183.979 58.881 184.546 58.881 185.373 cv
f
65.374 187.263 mo
65.374 187.857 65.374 187.263 65.374 187.857 cv
62.043 187.857 65.374 187.857 62.043 187.857 cv
62.038 187.708 62.063 187.565 62.115 187.428 cv
62.2 187.201 62.336 186.978 62.523 186.758 cv
62.709 186.538 62.979 186.284 63.332 185.995 cv
63.88 185.547 64.25 185.191 64.442 184.929 cv
64.635 184.667 64.731 184.419 64.731 184.185 cv
64.731 183.94 64.644 183.733 64.468 183.565 cv
64.293 183.397 64.064 183.313 63.782 183.313 cv
63.484 183.313 63.246 183.402 63.067 183.581 cv
62.889 183.759 62.798 184.007 62.796 184.323 cv
62.16 184.257 62.796 184.323 62.16 184.257 cv
62.203 183.783 62.367 183.422 62.651 183.174 cv
62.936 182.925 63.317 182.801 63.796 182.801 cv
64.28 182.801 64.662 182.935 64.944 183.203 cv
65.226 183.471 65.367 183.803 65.367 184.199 cv
65.367 184.4 65.326 184.598 65.243 184.793 cv
65.161 184.988 65.024 185.193 64.833 185.408 cv
64.641 185.623 64.323 185.919 63.879 186.294 cv
63.507 186.606 63.269 186.817 63.164 186.928 cv
63.058 187.039 62.971 187.151 62.902 187.263 cv
65.374 187.263 62.902 187.263 65.374 187.263 cv
f
68.33 187.857 mo
67.711 187.857 68.33 187.857 67.711 187.857 cv
67.711 183.917 67.711 187.857 67.711 183.917 cv
67.562 184.059 67.367 184.201 67.125 184.343 cv
66.883 184.485 66.666 184.591 66.474 184.662 cv
66.474 184.065 66.474 184.662 66.474 184.065 cv
66.82 183.902 67.122 183.705 67.381 183.474 cv
67.64 183.242 67.824 183.018 67.931 182.801 cv
68.33 182.801 67.931 182.801 68.33 182.801 cv
68.33 187.857 68.33 182.801 68.33 187.857 cv
f
91.098 185.373 mo
91.098 184.778 91.159 184.298 91.282 183.935 cv
91.405 183.572 91.587 183.292 91.828 183.096 cv
92.07 182.899 92.374 182.8 92.741 182.8 cv
93.012 182.8 93.249 182.854 93.453 182.963 cv
93.657 183.072 93.825 183.229 93.958 183.434 cv
94.091 183.639 94.195 183.888 94.271 184.183 cv
94.346 184.477 94.384 184.874 94.384 185.373 cv
94.384 185.964 94.324 186.441 94.202 186.804 cv
94.081 187.167 93.899 187.447 93.657 187.645 cv
93.415 187.843 93.11 187.942 92.741 187.942 cv
92.255 187.942 91.874 187.768 91.596 187.42 cv
91.264 187.001 91.098 186.319 91.098 185.373 cv
cp
91.734 185.373 mo
91.734 186.2 91.831 186.75 92.024 187.024 cv
92.218 187.297 92.457 187.434 92.741 187.434 cv
93.025 187.434 93.264 187.297 93.458 187.022 cv
93.651 186.747 93.748 186.197 93.748 185.373 cv
93.748 184.544 93.651 183.993 93.458 183.721 cv
93.264 183.448 93.023 183.312 92.734 183.312 cv
92.45 183.312 92.223 183.432 92.054 183.673 cv
91.84 183.979 91.734 184.546 91.734 185.373 cv
f
95.309 187.857 mo
95.309 187.153 95.309 187.857 95.309 187.153 cv
96.014 187.153 95.309 187.153 96.014 187.153 cv
96.014 187.857 96.014 187.153 96.014 187.857 cv
96.014 188.116 95.968 188.325 95.876 188.484 cv
95.785 188.643 95.639 188.766 95.44 188.853 cv
95.268 188.589 95.44 188.853 95.268 188.589 cv
95.398 188.531 95.495 188.447 95.556 188.336 cv
95.618 188.225 95.653 188.065 95.66 187.857 cv
95.309 187.857 95.66 187.857 95.309 187.857 cv
f
96.914 185.373 mo
96.914 184.778 96.975 184.298 97.098 183.935 cv
97.221 183.572 97.403 183.292 97.644 183.096 cv
97.886 182.899 98.19 182.8 98.557 182.8 cv
98.828 182.8 99.065 182.854 99.269 182.963 cv
99.473 183.072 99.641 183.229 99.774 183.434 cv
99.907 183.639 100.011 183.888 100.087 184.183 cv
100.162 184.477 100.2 184.874 100.2 185.373 cv
100.2 185.964 100.14 186.441 100.018 186.804 cv
99.897 187.167 99.715 187.447 99.473 187.645 cv
99.231 187.843 98.926 187.942 98.557 187.942 cv
98.071 187.942 97.69 187.768 97.412 187.42 cv
97.08 187.001 96.914 186.319 96.914 185.373 cv
cp
97.55 185.373 mo
97.55 186.2 97.647 186.75 97.84 187.024 cv
98.034 187.297 98.273 187.434 98.557 187.434 cv
98.841 187.434 99.08 187.297 99.274 187.022 cv
99.467 186.747 99.564 186.197 99.564 185.373 cv
99.564 184.544 99.467 183.993 99.274 183.721 cv
99.08 183.448 98.839 183.312 98.55 183.312 cv
98.266 183.312 98.039 183.432 97.87 183.673 cv
97.657 183.979 97.55 184.546 97.55 185.373 cv
f
104.043 187.263 mo
104.043 187.857 104.043 187.263 104.043 187.857 cv
100.712 187.857 104.043 187.857 100.712 187.857 cv
100.707 187.708 100.732 187.565 100.784 187.428 cv
100.869 187.201 101.005 186.978 101.192 186.758 cv
101.378 186.538 101.648 186.284 102.001 185.995 cv
102.549 185.547 102.919 185.191 103.111 184.929 cv
103.304 184.667 103.4 184.419 103.4 184.185 cv
103.4 183.94 103.313 183.733 103.137 183.565 cv
102.962 183.397 102.733 183.313 102.451 183.313 cv
102.154 183.313 101.915 183.402 101.736 183.581 cv
101.558 183.759 101.467 184.007 101.465 184.323 cv
100.829 184.257 101.465 184.323 100.829 184.257 cv
100.872 183.783 101.036 183.422 101.32 183.174 cv
101.605 182.925 101.986 182.801 102.465 182.801 cv
102.949 182.801 103.331 182.935 103.613 183.203 cv
103.895 183.471 104.036 183.803 104.036 184.199 cv
104.036 184.4 103.995 184.598 103.912 184.793 cv
103.83 184.988 103.693 185.193 103.502 185.408 cv
103.31 185.623 102.992 185.919 102.548 186.294 cv
102.176 186.606 101.938 186.817 101.833 186.928 cv
101.727 187.039 101.64 187.151 101.571 187.263 cv
104.043 187.263 101.571 187.263 104.043 187.263 cv
f
107.92 187.263 mo
107.92 187.857 107.92 187.263 107.92 187.857 cv
104.589 187.857 107.92 187.857 104.589 187.857 cv
104.584 187.708 104.609 187.565 104.661 187.428 cv
104.746 187.201 104.882 186.978 105.069 186.758 cv
105.255 186.538 105.525 186.284 105.878 185.995 cv
106.426 185.547 106.796 185.191 106.988 184.929 cv
107.181 184.667 107.277 184.419 107.277 184.185 cv
107.277 183.94 107.19 183.733 107.014 183.565 cv
106.839 183.397 106.61 183.313 106.328 183.313 cv
106.031 183.313 105.792 183.402 105.613 183.581 cv
105.435 183.759 105.344 184.007 105.342 184.323 cv
104.706 184.257 105.342 184.323 104.706 184.257 cv
104.749 183.783 104.913 183.422 105.197 183.174 cv
105.482 182.925 105.863 182.801 106.342 182.801 cv
106.826 182.801 107.208 182.935 107.49 183.203 cv
107.772 183.471 107.913 183.803 107.913 184.199 cv
107.913 184.4 107.872 184.598 107.789 184.793 cv
107.707 184.988 107.57 185.193 107.379 185.408 cv
107.187 185.623 106.869 185.919 106.425 186.294 cv
106.053 186.606 105.815 186.817 105.71 186.928 cv
105.604 187.039 105.517 187.151 105.448 187.263 cv
107.92 187.263 105.448 187.263 107.92 187.263 cv
f
129.87 185.373 mo
129.87 184.778 129.931 184.298 130.054 183.935 cv
130.177 183.572 130.359 183.292 130.6 183.096 cv
130.842 182.899 131.146 182.8 131.513 182.8 cv
131.784 182.8 132.021 182.854 132.225 182.963 cv
132.429 183.072 132.597 183.229 132.73 183.434 cv
132.863 183.639 132.967 183.888 133.043 184.183 cv
133.118 184.477 133.156 184.874 133.156 185.373 cv
133.156 185.964 133.096 186.441 132.974 186.804 cv
132.853 187.167 132.671 187.447 132.429 187.645 cv
132.187 187.843 131.882 187.942 131.513 187.942 cv
131.027 187.942 130.646 187.768 130.368 187.42 cv
130.036 187.001 129.87 186.319 129.87 185.373 cv
cp
130.506 185.373 mo
130.506 186.2 130.603 186.75 130.796 187.024 cv
130.99 187.297 131.229 187.434 131.513 187.434 cv
131.797 187.434 132.036 187.297 132.23 187.022 cv
132.423 186.747 132.52 186.197 132.52 185.373 cv
132.52 184.544 132.423 183.993 132.23 183.721 cv
132.036 183.448 131.795 183.312 131.506 183.312 cv
131.222 183.312 130.995 183.432 130.826 183.673 cv
130.612 183.979 130.506 184.546 130.506 185.373 cv
f
134.08 187.857 mo
134.08 187.153 134.08 187.857 134.08 187.153 cv
134.785 187.153 134.08 187.153 134.785 187.153 cv
134.785 187.857 134.785 187.153 134.785 187.857 cv
134.785 188.116 134.739 188.325 134.647 188.484 cv
134.556 188.643 134.41 188.766 134.211 188.853 cv
134.039 188.589 134.211 188.853 134.039 188.589 cv
134.169 188.531 134.266 188.447 134.327 188.336 cv
134.389 188.225 134.424 188.065 134.431 187.857 cv
134.08 187.857 134.431 187.857 134.08 187.857 cv
f
135.685 185.373 mo
135.685 184.778 135.746 184.298 135.869 183.935 cv
135.992 183.572 136.174 183.292 136.415 183.096 cv
136.657 182.899 136.961 182.8 137.328 182.8 cv
137.599 182.8 137.836 182.854 138.04 182.963 cv
138.244 183.072 138.412 183.229 138.545 183.434 cv
138.678 183.639 138.782 183.888 138.858 184.183 cv
138.933 184.477 138.971 184.874 138.971 185.373 cv
138.971 185.964 138.911 186.441 138.789 186.804 cv
138.668 187.167 138.486 187.447 138.244 187.645 cv
138.002 187.843 137.697 187.942 137.328 187.942 cv
136.842 187.942 136.461 187.768 136.183 187.42 cv
135.851 187.001 135.685 186.319 135.685 185.373 cv
cp
136.321 185.373 mo
136.321 186.2 136.418 186.75 136.611 187.024 cv
136.805 187.297 137.044 187.434 137.328 187.434 cv
137.612 187.434 137.851 187.297 138.045 187.022 cv
138.238 186.747 138.335 186.197 138.335 185.373 cv
138.335 184.544 138.238 183.993 138.045 183.721 cv
137.851 183.448 137.61 183.312 137.321 183.312 cv
137.037 183.312 136.81 183.432 136.641 183.673 cv
136.427 183.979 136.321 184.546 136.321 185.373 cv
f
142.814 187.263 mo
142.814 187.857 142.814 187.263 142.814 187.857 cv
139.483 187.857 142.814 187.857 139.483 187.857 cv
139.478 187.708 139.503 187.565 139.555 187.428 cv
139.64 187.201 139.776 186.978 139.963 186.758 cv
140.149 186.538 140.419 186.284 140.772 185.995 cv
141.32 185.547 141.69 185.191 141.882 184.929 cv
142.075 184.667 142.171 184.419 142.171 184.185 cv
142.171 183.94 142.084 183.733 141.908 183.565 cv
141.733 183.397 141.504 183.313 141.222 183.313 cv
140.925 183.313 140.686 183.402 140.507 183.581 cv
140.329 183.759 140.238 184.007 140.236 184.323 cv
139.6 184.257 140.236 184.323 139.6 184.257 cv
139.643 183.783 139.807 183.422 140.091 183.174 cv
140.376 182.925 140.757 182.801 141.236 182.801 cv
141.72 182.801 142.102 182.935 142.384 183.203 cv
142.666 183.471 142.807 183.803 142.807 184.199 cv
142.807 184.4 142.766 184.598 142.683 184.793 cv
142.601 184.988 142.464 185.193 142.273 185.408 cv
142.081 185.623 141.763 185.919 141.319 186.294 cv
140.947 186.606 140.709 186.817 140.604 186.928 cv
140.498 187.039 140.411 187.151 140.342 187.263 cv
142.814 187.263 140.342 187.263 142.814 187.263 cv
f
143.443 186.528 mo
144.062 186.446 143.443 186.528 144.062 186.446 cv
144.133 186.796 144.254 187.048 144.424 187.203 cv
144.595 187.358 144.803 187.435 145.048 187.435 cv
145.339 187.435 145.585 187.334 145.786 187.133 cv
145.986 186.931 146.086 186.681 146.086 186.384 cv
146.086 186.1 145.994 185.866 145.808 185.681 cv
145.622 185.497 145.386 185.405 145.1 185.405 cv
144.983 185.405 144.838 185.428 144.663 185.473 cv
144.732 184.931 144.663 185.473 144.732 184.931 cv
144.773 184.935 144.807 184.938 144.832 184.938 cv
145.095 184.938 145.333 184.869 145.543 184.731 cv
145.754 184.594 145.86 184.382 145.86 184.096 cv
145.86 183.869 145.783 183.681 145.629 183.533 cv
145.476 183.384 145.278 183.309 145.035 183.309 cv
144.794 183.309 144.593 183.385 144.433 183.536 cv
144.273 183.687 144.169 183.914 144.124 184.216 cv
143.505 184.106 144.124 184.216 143.505 184.106 cv
143.581 183.692 143.752 183.371 144.021 183.143 cv
144.289 182.915 144.622 182.801 145.021 182.801 cv
145.296 182.801 145.549 182.86 145.781 182.978 cv
146.012 183.096 146.189 183.257 146.312 183.46 cv
146.434 183.664 146.496 183.881 146.496 184.11 cv
146.496 184.327 146.437 184.525 146.32 184.704 cv
146.203 184.883 146.03 185.025 145.801 185.13 cv
146.099 185.199 146.331 185.341 146.496 185.558 cv
146.661 185.774 146.743 186.045 146.743 186.37 cv
146.743 186.81 146.583 187.182 146.262 187.488 cv
145.941 187.794 145.535 187.947 145.045 187.947 cv
144.603 187.947 144.235 187.815 143.943 187.552 cv
143.651 187.288 143.484 186.947 143.443 186.528 cv
f
168.539 185.373 mo
168.539 184.778 168.6 184.298 168.723 183.935 cv
168.846 183.572 169.028 183.292 169.269 183.096 cv
169.511 182.899 169.815 182.8 170.182 182.8 cv
170.453 182.8 170.69 182.854 170.894 182.963 cv
171.098 183.072 171.266 183.229 171.399 183.434 cv
171.532 183.639 171.636 183.888 171.712 184.183 cv
171.787 184.477 171.825 184.874 171.825 185.373 cv
171.825 185.964 171.765 186.441 171.643 186.804 cv
171.522 187.167 171.34 187.447 171.098 187.645 cv
170.856 187.843 170.551 187.942 170.182 187.942 cv
169.696 187.942 169.315 187.768 169.037 187.42 cv
168.705 187.001 168.539 186.319 168.539 185.373 cv
cp
169.175 185.373 mo
169.175 186.2 169.272 186.75 169.465 187.024 cv
169.659 187.297 169.898 187.434 170.182 187.434 cv
170.466 187.434 170.705 187.297 170.899 187.022 cv
171.092 186.747 171.189 186.197 171.189 185.373 cv
171.189 184.544 171.092 183.993 170.899 183.721 cv
170.705 183.448 170.464 183.312 170.175 183.312 cv
169.891 183.312 169.664 183.432 169.495 183.673 cv
169.282 183.979 169.175 184.546 169.175 185.373 cv
f
172.749 187.857 mo
172.749 187.153 172.749 187.857 172.749 187.153 cv
173.454 187.153 172.749 187.153 173.454 187.153 cv
173.454 187.857 173.454 187.153 173.454 187.857 cv
173.454 188.116 173.408 188.325 173.316 188.484 cv
173.225 188.643 173.079 188.766 172.88 188.853 cv
172.708 188.589 172.88 188.853 172.708 188.589 cv
172.838 188.531 172.935 188.447 172.997 188.336 cv
173.058 188.225 173.093 188.065 173.1 187.857 cv
172.749 187.857 173.1 187.857 172.749 187.857 cv
f
174.355 185.373 mo
174.355 184.778 174.416 184.298 174.539 183.935 cv
174.662 183.572 174.844 183.292 175.085 183.096 cv
175.327 182.899 175.631 182.8 175.998 182.8 cv
176.269 182.8 176.506 182.854 176.71 182.963 cv
176.914 183.072 177.082 183.229 177.215 183.434 cv
177.348 183.639 177.452 183.888 177.528 184.183 cv
177.603 184.477 177.641 184.874 177.641 185.373 cv
177.641 185.964 177.581 186.441 177.459 186.804 cv
177.338 187.167 177.156 187.447 176.914 187.645 cv
176.672 187.843 176.367 187.942 175.998 187.942 cv
175.512 187.942 175.131 187.768 174.853 187.42 cv
174.521 187.001 174.355 186.319 174.355 185.373 cv
cp
174.991 185.373 mo
174.991 186.2 175.088 186.75 175.281 187.024 cv
175.475 187.297 175.714 187.434 175.998 187.434 cv
176.282 187.434 176.521 187.297 176.715 187.022 cv
176.908 186.747 177.005 186.197 177.005 185.373 cv
177.005 184.544 176.908 183.993 176.715 183.721 cv
176.521 183.448 176.28 183.312 175.991 183.312 cv
175.707 183.312 175.48 183.432 175.311 183.673 cv
175.098 183.979 174.991 184.546 174.991 185.373 cv
f
181.484 187.263 mo
181.484 187.857 181.484 187.263 181.484 187.857 cv
178.153 187.857 181.484 187.857 178.153 187.857 cv
178.148 187.708 178.173 187.565 178.225 187.428 cv
178.31 187.201 178.446 186.978 178.633 186.758 cv
178.819 186.538 179.089 186.284 179.442 185.995 cv
179.99 185.547 180.36 185.191 180.552 184.929 cv
180.745 184.667 180.841 184.419 180.841 184.185 cv
180.841 183.94 180.754 183.733 180.578 183.565 cv
180.403 183.397 180.174 183.313 179.892 183.313 cv
179.595 183.313 179.356 183.402 179.177 183.581 cv
178.999 183.759 178.908 184.007 178.906 184.323 cv
178.27 184.257 178.906 184.323 178.27 184.257 cv
178.313 183.783 178.477 183.422 178.761 183.174 cv
179.046 182.925 179.427 182.801 179.906 182.801 cv
180.39 182.801 180.772 182.935 181.054 183.203 cv
181.336 183.471 181.477 183.803 181.477 184.199 cv
181.477 184.4 181.436 184.598 181.353 184.793 cv
181.271 184.988 181.134 185.193 180.943 185.408 cv
180.751 185.623 180.433 185.919 179.989 186.294 cv
179.617 186.606 179.379 186.817 179.274 186.928 cv
179.168 187.039 179.081 187.151 179.012 187.263 cv
181.484 187.263 179.012 187.263 181.484 187.263 cv
f
184.092 187.857 mo
184.092 186.651 184.092 187.857 184.092 186.651 cv
181.906 186.651 184.092 186.651 181.906 186.651 cv
181.906 186.084 181.906 186.651 181.906 186.084 cv
184.205 182.821 181.906 186.084 184.205 182.821 cv
184.711 182.821 184.205 182.821 184.711 182.821 cv
184.711 186.084 184.711 182.821 184.711 186.084 cv
185.391 186.084 184.711 186.084 185.391 186.084 cv
185.391 186.651 185.391 186.084 185.391 186.651 cv
184.711 186.651 185.391 186.651 184.711 186.651 cv
184.711 187.857 184.711 186.651 184.711 187.857 cv
184.092 187.857 184.711 187.857 184.092 187.857 cv
cp
184.092 186.084 mo
184.092 183.814 184.092 186.084 184.092 183.814 cv
182.514 186.084 184.092 183.814 182.514 186.084 cv
184.092 186.084 182.514 186.084 184.092 186.084 cv
f
207.208 185.373 mo
207.208 184.778 207.269 184.298 207.392 183.935 cv
207.515 183.572 207.697 183.292 207.938 183.096 cv
208.18 182.899 208.484 182.8 208.851 182.8 cv
209.122 182.8 209.359 182.854 209.563 182.963 cv
209.767 183.072 209.935 183.229 210.068 183.434 cv
210.201 183.639 210.305 183.888 210.381 184.183 cv
210.456 184.477 210.494 184.874 210.494 185.373 cv
210.494 185.964 210.434 186.441 210.312 186.804 cv
210.191 187.167 210.009 187.447 209.767 187.645 cv
209.525 187.843 209.22 187.942 208.851 187.942 cv
208.365 187.942 207.984 187.768 207.706 187.42 cv
207.374 187.001 207.208 186.319 207.208 185.373 cv
cp
207.844 185.373 mo
207.844 186.2 207.941 186.75 208.134 187.024 cv
208.328 187.297 208.567 187.434 208.851 187.434 cv
209.135 187.434 209.374 187.297 209.568 187.022 cv
209.761 186.747 209.858 186.197 209.858 185.373 cv
209.858 184.544 209.761 183.993 209.568 183.721 cv
209.374 183.448 209.133 183.312 208.844 183.312 cv
208.56 183.312 208.333 183.432 208.164 183.673 cv
207.95 183.979 207.844 184.546 207.844 185.373 cv
f
211.419 187.857 mo
211.419 187.153 211.419 187.857 211.419 187.153 cv
212.124 187.153 211.419 187.153 212.124 187.153 cv
212.124 187.857 212.124 187.153 212.124 187.857 cv
212.124 188.116 212.078 188.325 211.986 188.484 cv
211.895 188.643 211.749 188.766 211.55 188.853 cv
211.378 188.589 211.55 188.853 211.378 188.589 cv
211.508 188.531 211.605 188.447 211.666 188.336 cv
211.728 188.225 211.763 188.065 211.77 187.857 cv
211.419 187.857 211.77 187.857 211.419 187.857 cv
f
213.024 185.373 mo
213.024 184.778 213.085 184.298 213.208 183.935 cv
213.331 183.572 213.513 183.292 213.754 183.096 cv
213.996 182.899 214.3 182.8 214.667 182.8 cv
214.938 182.8 215.175 182.854 215.379 182.963 cv
215.583 183.072 215.751 183.229 215.884 183.434 cv
216.017 183.639 216.121 183.888 216.197 184.183 cv
216.272 184.477 216.31 184.874 216.31 185.373 cv
216.31 185.964 216.25 186.441 216.128 186.804 cv
216.007 187.167 215.825 187.447 215.583 187.645 cv
215.341 187.843 215.036 187.942 214.667 187.942 cv
214.181 187.942 213.8 187.768 213.522 187.42 cv
213.19 187.001 213.024 186.319 213.024 185.373 cv
cp
213.66 185.373 mo
213.66 186.2 213.757 186.75 213.95 187.024 cv
214.144 187.297 214.383 187.434 214.667 187.434 cv
214.951 187.434 215.19 187.297 215.384 187.022 cv
215.577 186.747 215.674 186.197 215.674 185.373 cv
215.674 184.544 215.577 183.993 215.384 183.721 cv
215.19 183.448 214.949 183.312 214.66 183.312 cv
214.376 183.312 214.149 183.432 213.98 183.673 cv
213.766 183.979 213.66 184.546 213.66 185.373 cv
f
220.153 187.263 mo
220.153 187.857 220.153 187.263 220.153 187.857 cv
216.822 187.857 220.153 187.857 216.822 187.857 cv
216.817 187.708 216.842 187.565 216.894 187.428 cv
216.979 187.201 217.115 186.978 217.302 186.758 cv
217.488 186.538 217.758 186.284 218.111 185.995 cv
218.659 185.547 219.029 185.191 219.221 184.929 cv
219.414 184.667 219.51 184.419 219.51 184.185 cv
219.51 183.94 219.423 183.733 219.247 183.565 cv
219.072 183.397 218.843 183.313 218.561 183.313 cv
218.264 183.313 218.025 183.402 217.846 183.581 cv
217.668 183.759 217.577 184.007 217.575 184.323 cv
216.939 184.257 217.575 184.323 216.939 184.257 cv
216.982 183.783 217.146 183.422 217.43 183.174 cv
217.715 182.925 218.096 182.801 218.575 182.801 cv
219.059 182.801 219.441 182.935 219.723 183.203 cv
220.005 183.471 220.146 183.803 220.146 184.199 cv
220.146 184.4 220.105 184.598 220.022 184.793 cv
219.94 184.988 219.803 185.193 219.612 185.408 cv
219.42 185.623 219.102 185.919 218.658 186.294 cv
218.286 186.606 218.048 186.817 217.943 186.928 cv
217.837 187.039 217.75 187.151 217.681 187.263 cv
220.153 187.263 217.681 187.263 220.153 187.263 cv
f
220.778 186.538 mo
221.428 186.483 220.778 186.538 221.428 186.483 cv
221.476 186.799 221.588 187.037 221.763 187.196 cv
221.938 187.355 222.15 187.435 222.397 187.435 cv
222.695 187.435 222.947 187.322 223.153 187.098 cv
223.36 186.874 223.463 186.576 223.463 186.205 cv
223.463 185.852 223.364 185.574 223.165 185.37 cv
222.967 185.166 222.708 185.064 222.387 185.064 cv
222.187 185.064 222.007 185.11 221.847 185.2 cv
221.687 185.29 221.561 185.408 221.469 185.552 cv
220.888 185.477 221.469 185.552 220.888 185.477 cv
221.376 182.89 220.888 185.477 221.376 182.89 cv
223.882 182.89 221.376 182.89 223.882 182.89 cv
223.882 183.481 223.882 182.89 223.882 183.481 cv
221.871 183.481 223.882 183.481 221.871 183.481 cv
221.6 184.834 221.871 183.481 221.6 184.834 cv
221.902 184.624 222.219 184.518 222.552 184.518 cv
222.992 184.518 223.363 184.67 223.666 184.975 cv
223.968 185.28 224.119 185.671 224.119 186.15 cv
224.119 186.606 223.986 186.999 223.721 187.332 cv
223.397 187.739 222.956 187.943 222.397 187.943 cv
221.939 187.943 221.565 187.815 221.275 187.558 cv
220.985 187.302 220.819 186.962 220.778 186.538 cv
f
245.979 185.373 mo
245.979 184.778 246.04 184.298 246.163 183.935 cv
246.286 183.572 246.468 183.292 246.709 183.096 cv
246.951 182.899 247.255 182.8 247.622 182.8 cv
247.893 182.8 248.13 182.854 248.334 182.963 cv
248.538 183.072 248.706 183.229 248.839 183.434 cv
248.972 183.639 249.076 183.888 249.152 184.183 cv
249.227 184.477 249.265 184.874 249.265 185.373 cv
249.265 185.964 249.205 186.441 249.083 186.804 cv
248.962 187.167 248.78 187.447 248.538 187.645 cv
248.296 187.843 247.991 187.942 247.622 187.942 cv
247.136 187.942 246.755 187.768 246.477 187.42 cv
246.145 187.001 245.979 186.319 245.979 185.373 cv
cp
246.615 185.373 mo
246.615 186.2 246.712 186.75 246.905 187.024 cv
247.099 187.297 247.338 187.434 247.622 187.434 cv
247.906 187.434 248.145 187.297 248.339 187.022 cv
248.532 186.747 248.629 186.197 248.629 185.373 cv
248.629 184.544 248.532 183.993 248.339 183.721 cv
248.145 183.448 247.904 183.312 247.615 183.312 cv
247.331 183.312 247.104 183.432 246.935 183.673 cv
246.722 183.979 246.615 184.546 246.615 185.373 cv
f
250.19 187.857 mo
250.19 187.153 250.19 187.857 250.19 187.153 cv
250.895 187.153 250.19 187.153 250.895 187.153 cv
250.895 187.857 250.895 187.153 250.895 187.857 cv
250.895 188.116 250.849 188.325 250.757 188.484 cv
250.666 188.643 250.52 188.766 250.321 188.853 cv
250.149 188.589 250.321 188.853 250.149 188.589 cv
250.279 188.531 250.376 188.447 250.438 188.336 cv
250.499 188.225 250.534 188.065 250.541 187.857 cv
250.19 187.857 250.541 187.857 250.19 187.857 cv
f
251.795 185.373 mo
251.795 184.778 251.856 184.298 251.979 183.935 cv
252.102 183.572 252.284 183.292 252.525 183.096 cv
252.767 182.899 253.071 182.8 253.438 182.8 cv
253.709 182.8 253.946 182.854 254.15 182.963 cv
254.354 183.072 254.522 183.229 254.655 183.434 cv
254.788 183.639 254.892 183.888 254.968 184.183 cv
255.043 184.477 255.081 184.874 255.081 185.373 cv
255.081 185.964 255.021 186.441 254.899 186.804 cv
254.778 187.167 254.596 187.447 254.354 187.645 cv
254.112 187.843 253.807 187.942 253.438 187.942 cv
252.952 187.942 252.571 187.768 252.293 187.42 cv
251.961 187.001 251.795 186.319 251.795 185.373 cv
cp
252.431 185.373 mo
252.431 186.2 252.528 186.75 252.721 187.024 cv
252.915 187.297 253.154 187.434 253.438 187.434 cv
253.722 187.434 253.961 187.297 254.155 187.022 cv
254.348 186.747 254.445 186.197 254.445 185.373 cv
254.445 184.544 254.348 183.993 254.155 183.721 cv
253.961 183.448 253.72 183.312 253.431 183.312 cv
253.147 183.312 252.92 183.432 252.751 183.673 cv
252.538 183.979 252.431 184.546 252.431 185.373 cv
f
258.924 187.263 mo
258.924 187.857 258.924 187.263 258.924 187.857 cv
255.593 187.857 258.924 187.857 255.593 187.857 cv
255.588 187.708 255.613 187.565 255.665 187.428 cv
255.75 187.201 255.886 186.978 256.073 186.758 cv
256.259 186.538 256.529 186.284 256.882 185.995 cv
257.43 185.547 257.8 185.191 257.992 184.929 cv
258.185 184.667 258.281 184.419 258.281 184.185 cv
258.281 183.94 258.194 183.733 258.018 183.565 cv
257.843 183.397 257.614 183.313 257.332 183.313 cv
257.035 183.313 256.796 183.402 256.617 183.581 cv
256.439 183.759 256.348 184.007 256.346 184.323 cv
255.71 184.257 256.346 184.323 255.71 184.257 cv
255.753 183.783 255.917 183.422 256.201 183.174 cv
256.486 182.925 256.867 182.801 257.346 182.801 cv
257.83 182.801 258.212 182.935 258.494 183.203 cv
258.776 183.471 258.917 183.803 258.917 184.199 cv
258.917 184.4 258.876 184.598 258.793 184.793 cv
258.711 184.988 258.574 185.193 258.383 185.408 cv
258.191 185.623 257.873 185.919 257.429 186.294 cv
257.057 186.606 256.819 186.817 256.714 186.928 cv
256.608 187.039 256.521 187.151 256.452 187.263 cv
258.924 187.263 256.452 187.263 258.924 187.263 cv
f
262.76 184.054 mo
262.145 184.102 262.76 184.054 262.145 184.102 cv
262.09 183.859 262.012 183.683 261.911 183.573 cv
261.744 183.397 261.537 183.309 261.292 183.309 cv
261.095 183.309 260.922 183.364 260.773 183.473 cv
260.578 183.615 260.425 183.823 260.312 184.095 cv
260.2 184.368 260.142 184.756 260.137 185.26 cv
260.286 185.033 260.468 184.865 260.684 184.755 cv
260.899 184.645 261.125 184.59 261.361 184.59 cv
261.773 184.59 262.125 184.742 262.415 185.045 cv
262.704 185.348 262.849 185.741 262.849 186.222 cv
262.849 186.538 262.781 186.831 262.645 187.103 cv
262.508 187.374 262.321 187.582 262.083 187.726 cv
261.844 187.87 261.574 187.943 261.272 187.943 cv
260.756 187.943 260.335 187.753 260.01 187.374 cv
259.685 186.995 259.522 186.37 259.522 185.5 cv
259.522 184.527 259.702 183.819 260.062 183.377 cv
260.376 182.993 260.798 182.8 261.33 182.8 cv
261.726 182.8 262.051 182.911 262.305 183.133 cv
262.558 183.356 262.71 183.662 262.76 184.054 cv
cp
260.233 186.225 mo
260.233 186.438 260.279 186.642 260.369 186.836 cv
260.46 187.031 260.586 187.179 260.749 187.281 cv
260.912 187.383 261.082 187.434 261.261 187.434 cv
261.522 187.434 261.747 187.329 261.935 187.118 cv
262.123 186.907 262.217 186.621 262.217 186.259 cv
262.217 185.911 262.124 185.637 261.938 185.437 cv
261.753 185.236 261.519 185.136 261.237 185.136 cv
260.958 185.136 260.72 185.236 260.526 185.437 cv
260.331 185.637 260.233 185.9 260.233 186.225 cv
f
284.648 185.373 mo
284.648 184.778 284.709 184.298 284.832 183.935 cv
284.955 183.572 285.137 183.292 285.378 183.096 cv
285.62 182.899 285.924 182.8 286.291 182.8 cv
286.562 182.8 286.799 182.854 287.003 182.963 cv
287.207 183.072 287.375 183.229 287.508 183.434 cv
287.641 183.639 287.745 183.888 287.821 184.183 cv
287.896 184.477 287.934 184.874 287.934 185.373 cv
287.934 185.964 287.874 186.441 287.752 186.804 cv
287.631 187.167 287.449 187.447 287.207 187.645 cv
286.965 187.843 286.66 187.942 286.291 187.942 cv
285.805 187.942 285.424 187.768 285.146 187.42 cv
284.814 187.001 284.648 186.319 284.648 185.373 cv
cp
285.284 185.373 mo
285.284 186.2 285.381 186.75 285.574 187.024 cv
285.768 187.297 286.007 187.434 286.291 187.434 cv
286.575 187.434 286.814 187.297 287.008 187.022 cv
287.201 186.747 287.298 186.197 287.298 185.373 cv
287.298 184.544 287.201 183.993 287.008 183.721 cv
286.814 183.448 286.573 183.312 286.284 183.312 cv
286 183.312 285.773 183.432 285.604 183.673 cv
285.391 183.979 285.284 184.546 285.284 185.373 cv
f
288.859 187.857 mo
288.859 187.153 288.859 187.857 288.859 187.153 cv
289.564 187.153 288.859 187.153 289.564 187.153 cv
289.564 187.857 289.564 187.153 289.564 187.857 cv
289.564 188.116 289.518 188.325 289.426 188.484 cv
289.334 188.643 289.189 188.766 288.99 188.853 cv
288.818 188.589 288.99 188.853 288.818 188.589 cv
288.948 188.531 289.045 188.447 289.106 188.336 cv
289.168 188.225 289.203 188.065 289.21 187.857 cv
288.859 187.857 289.21 187.857 288.859 187.857 cv
f
290.464 185.373 mo
290.464 184.778 290.525 184.298 290.648 183.935 cv
290.771 183.572 290.953 183.292 291.194 183.096 cv
291.436 182.899 291.74 182.8 292.107 182.8 cv
292.378 182.8 292.615 182.854 292.819 182.963 cv
293.023 183.072 293.191 183.229 293.324 183.434 cv
293.457 183.639 293.561 183.888 293.637 184.183 cv
293.712 184.477 293.75 184.874 293.75 185.373 cv
293.75 185.964 293.69 186.441 293.568 186.804 cv
293.447 187.167 293.265 187.447 293.023 187.645 cv
292.781 187.843 292.476 187.942 292.107 187.942 cv
291.621 187.942 291.24 187.768 290.962 187.42 cv
290.63 187.001 290.464 186.319 290.464 185.373 cv
cp
291.1 185.373 mo
291.1 186.2 291.197 186.75 291.39 187.024 cv
291.584 187.297 291.823 187.434 292.107 187.434 cv
292.391 187.434 292.63 187.297 292.824 187.022 cv
293.017 186.747 293.114 186.197 293.114 185.373 cv
293.114 184.544 293.017 183.993 292.824 183.721 cv
292.63 183.448 292.389 183.312 292.1 183.312 cv
291.816 183.312 291.589 183.432 291.42 183.673 cv
291.206 183.979 291.1 184.546 291.1 185.373 cv
f
297.593 187.263 mo
297.593 187.857 297.593 187.263 297.593 187.857 cv
294.262 187.857 297.593 187.857 294.262 187.857 cv
294.257 187.708 294.282 187.565 294.334 187.428 cv
294.419 187.201 294.555 186.978 294.742 186.758 cv
294.928 186.538 295.198 186.284 295.551 185.995 cv
296.099 185.547 296.469 185.191 296.661 184.929 cv
296.854 184.667 296.95 184.419 296.95 184.185 cv
296.95 183.94 296.863 183.733 296.687 183.565 cv
296.512 183.397 296.283 183.313 296.001 183.313 cv
295.704 183.313 295.465 183.402 295.286 183.581 cv
295.108 183.759 295.017 184.007 295.015 184.323 cv
294.379 184.257 295.015 184.323 294.379 184.257 cv
294.422 183.783 294.586 183.422 294.87 183.174 cv
295.155 182.925 295.536 182.801 296.015 182.801 cv
296.499 182.801 296.881 182.935 297.163 183.203 cv
297.445 183.471 297.586 183.803 297.586 184.199 cv
297.586 184.4 297.545 184.598 297.462 184.793 cv
297.38 184.988 297.243 185.193 297.052 185.408 cv
296.86 185.623 296.542 185.919 296.098 186.294 cv
295.726 186.606 295.488 186.817 295.383 186.928 cv
295.277 187.039 295.19 187.151 295.121 187.263 cv
297.593 187.263 295.121 187.263 297.593 187.263 cv
f
298.26 183.481 mo
298.26 182.887 298.26 183.481 298.26 182.887 cv
301.522 182.887 298.26 182.887 301.522 182.887 cv
301.522 183.368 301.522 182.887 301.522 183.368 cv
301.201 183.709 300.883 184.162 300.568 184.728 cv
300.253 185.294 300.01 185.875 299.838 186.473 cv
299.714 186.894 299.635 187.356 299.601 187.857 cv
298.965 187.857 299.601 187.857 298.965 187.857 cv
298.972 187.461 299.049 186.982 299.198 186.421 cv
299.347 185.86 299.561 185.319 299.84 184.798 cv
300.118 184.277 300.414 183.838 300.728 183.481 cv
298.26 183.481 300.728 183.481 298.26 183.481 cv
f
35.526 162.895 mo
35.526 162.273 35.526 162.895 35.526 162.273 cv
37.427 162.273 35.526 162.273 37.427 162.273 cv
37.427 162.895 37.427 162.273 37.427 162.895 cv
35.526 162.895 37.427 162.895 35.526 162.895 cv
f
40.272 164.407 mo
39.653 164.407 40.272 164.407 39.653 164.407 cv
39.653 160.467 39.653 164.407 39.653 160.467 cv
39.504 160.609 39.309 160.751 39.067 160.893 cv
38.825 161.035 38.608 161.141 38.416 161.212 cv
38.416 160.615 38.416 161.212 38.416 160.615 cv
38.762 160.452 39.064 160.255 39.323 160.024 cv
39.582 159.792 39.766 159.568 39.873 159.35 cv
40.272 159.35 39.873 159.35 40.272 159.35 cv
40.272 164.407 40.272 159.35 40.272 164.407 cv
f
42.152 164.407 mo
42.152 163.703 42.152 164.407 42.152 163.703 cv
42.857 163.703 42.152 163.703 42.857 163.703 cv
42.857 164.407 42.857 163.703 42.857 164.407 cv
42.857 164.666 42.811 164.875 42.719 165.034 cv
42.627 165.193 42.482 165.316 42.283 165.403 cv
42.111 165.139 42.283 165.403 42.111 165.139 cv
42.241 165.081 42.338 164.997 42.399 164.886 cv
42.461 164.775 42.496 164.615 42.503 164.407 cv
42.152 164.407 42.503 164.407 42.152 164.407 cv
f
46.087 164.407 mo
45.468 164.407 46.087 164.407 45.468 164.407 cv
45.468 160.467 45.468 164.407 45.468 160.467 cv
45.319 160.609 45.124 160.751 44.882 160.893 cv
44.64 161.035 44.423 161.141 44.231 161.212 cv
44.231 160.615 44.231 161.212 44.231 160.615 cv
44.577 160.452 44.879 160.255 45.138 160.024 cv
45.397 159.792 45.581 159.568 45.688 159.35 cv
46.087 159.35 45.688 159.35 46.087 159.35 cv
46.087 164.407 46.087 159.35 46.087 164.407 cv
f
49.965 164.407 mo
49.346 164.407 49.965 164.407 49.346 164.407 cv
49.346 160.467 49.346 164.407 49.346 160.467 cv
49.197 160.609 49.002 160.751 48.76 160.893 cv
48.518 161.035 48.301 161.141 48.109 161.212 cv
48.109 160.615 48.109 161.212 48.109 160.615 cv
48.455 160.452 48.757 160.255 49.016 160.024 cv
49.275 159.792 49.459 159.568 49.566 159.35 cv
49.965 159.35 49.566 159.35 49.965 159.35 cv
49.965 164.407 49.965 159.35 49.965 164.407 cv
f
51.515 163.077 mo
52.134 162.995 51.515 163.077 52.134 162.995 cv
52.205 163.345 52.326 163.597 52.496 163.752 cv
52.667 163.907 52.875 163.984 53.12 163.984 cv
53.411 163.984 53.657 163.883 53.858 163.682 cv
54.058 163.48 54.158 163.23 54.158 162.933 cv
54.158 162.649 54.066 162.415 53.88 162.23 cv
53.694 162.046 53.458 161.954 53.172 161.954 cv
53.055 161.954 52.91 161.977 52.735 162.022 cv
52.804 161.48 52.735 162.022 52.804 161.48 cv
52.845 161.484 52.879 161.487 52.904 161.487 cv
53.167 161.487 53.405 161.418 53.615 161.28 cv
53.826 161.143 53.932 160.931 53.932 160.645 cv
53.932 160.418 53.855 160.23 53.701 160.082 cv
53.548 159.933 53.349 159.858 53.107 159.858 cv
52.866 159.858 52.665 159.934 52.505 160.085 cv
52.345 160.236 52.241 160.463 52.196 160.765 cv
51.577 160.655 52.196 160.765 51.577 160.655 cv
51.652 160.241 51.824 159.92 52.092 159.692 cv
52.361 159.464 52.694 159.35 53.093 159.35 cv
53.368 159.35 53.621 159.409 53.853 159.527 cv
54.084 159.645 54.261 159.806 54.384 160.009 cv
54.506 160.213 54.568 160.43 54.568 160.659 cv
54.568 160.876 54.509 161.074 54.392 161.253 cv
54.275 161.432 54.102 161.574 53.873 161.679 cv
54.171 161.748 54.403 161.89 54.568 162.107 cv
54.732 162.323 54.815 162.594 54.815 162.919 cv
54.815 163.359 54.655 163.731 54.334 164.037 cv
54.013 164.343 53.607 164.496 53.117 164.496 cv
52.675 164.496 52.307 164.364 52.015 164.101 cv
51.723 163.837 51.556 163.496 51.515 163.077 cv
f
35.526 141.79 mo
35.526 141.168 35.526 141.79 35.526 141.168 cv
37.427 141.168 35.526 141.168 37.427 141.168 cv
37.427 141.79 37.427 141.168 37.427 141.79 cv
35.526 141.79 37.427 141.79 35.526 141.79 cv
f
40.272 143.301 mo
39.653 143.301 40.272 143.301 39.653 143.301 cv
39.653 139.361 39.653 143.301 39.653 139.361 cv
39.504 139.503 39.309 139.645 39.067 139.787 cv
38.825 139.929 38.608 140.035 38.416 140.106 cv
38.416 139.509 38.416 140.106 38.416 139.509 cv
38.762 139.346 39.064 139.149 39.323 138.918 cv
39.582 138.687 39.766 138.462 39.873 138.245 cv
40.272 138.245 39.873 138.245 40.272 138.245 cv
40.272 143.301 40.272 138.245 40.272 143.301 cv
f
42.152 143.301 mo
42.152 142.597 42.152 143.301 42.152 142.597 cv
42.857 142.597 42.152 142.597 42.857 142.597 cv
42.857 143.301 42.857 142.597 42.857 143.301 cv
42.857 143.56 42.811 143.769 42.719 143.928 cv
42.627 144.087 42.482 144.21 42.283 144.297 cv
42.111 144.033 42.283 144.297 42.111 144.033 cv
42.241 143.975 42.338 143.891 42.399 143.78 cv
42.461 143.669 42.496 143.509 42.503 143.301 cv
42.152 143.301 42.503 143.301 42.152 143.301 cv
f
46.087 143.301 mo
45.468 143.301 46.087 143.301 45.468 143.301 cv
45.468 139.361 45.468 143.301 45.468 139.361 cv
45.319 139.503 45.124 139.645 44.882 139.787 cv
44.64 139.929 44.423 140.035 44.231 140.106 cv
44.231 139.509 44.231 140.106 44.231 139.509 cv
44.577 139.346 44.879 139.149 45.138 138.918 cv
45.397 138.687 45.581 138.462 45.688 138.245 cv
46.087 138.245 45.688 138.245 46.087 138.245 cv
46.087 143.301 46.087 138.245 46.087 143.301 cv
f
49.965 143.301 mo
49.346 143.301 49.965 143.301 49.346 143.301 cv
49.346 139.361 49.346 143.301 49.346 139.361 cv
49.197 139.503 49.002 139.645 48.76 139.787 cv
48.518 139.929 48.301 140.035 48.109 140.106 cv
48.109 139.509 48.109 140.106 48.109 139.509 cv
48.455 139.346 48.757 139.149 49.016 138.918 cv
49.275 138.687 49.459 138.462 49.566 138.245 cv
49.965 138.245 49.566 138.245 49.965 138.245 cv
49.965 143.301 49.965 138.245 49.965 143.301 cv
f
51.511 140.818 mo
51.511 140.223 51.572 139.743 51.695 139.38 cv
51.818 139.017 52 138.737 52.241 138.541 cv
52.483 138.344 52.787 138.245 53.154 138.245 cv
53.425 138.245 53.662 138.299 53.866 138.408 cv
54.07 138.517 54.238 138.674 54.371 138.879 cv
54.504 139.084 54.608 139.333 54.684 139.628 cv
54.759 139.922 54.797 140.319 54.797 140.818 cv
54.797 141.409 54.737 141.886 54.615 142.249 cv
54.494 142.612 54.312 142.892 54.07 143.09 cv
53.828 143.288 53.523 143.387 53.154 143.387 cv
52.668 143.387 52.287 143.213 52.009 142.865 cv
51.677 142.446 51.511 141.764 51.511 140.818 cv
cp
52.147 140.818 mo
52.147 141.645 52.244 142.195 52.437 142.469 cv
52.631 142.742 52.87 142.879 53.154 142.879 cv
53.438 142.879 53.677 142.742 53.871 142.467 cv
54.065 142.192 54.161 141.642 54.161 140.818 cv
54.161 139.989 54.065 139.438 53.871 139.166 cv
53.677 138.893 53.436 138.757 53.147 138.757 cv
52.863 138.757 52.636 138.877 52.467 139.118 cv
52.254 139.424 52.147 139.991 52.147 140.818 cv
f
35.526 120.583 mo
35.526 119.961 35.526 120.583 35.526 119.961 cv
37.427 119.961 35.526 119.961 37.427 119.961 cv
37.427 120.583 37.427 119.961 37.427 120.583 cv
35.526 120.583 37.427 120.583 35.526 120.583 cv
f
40.272 122.094 mo
39.653 122.094 40.272 122.094 39.653 122.094 cv
39.653 118.154 39.653 122.094 39.653 118.154 cv
39.504 118.296 39.309 118.438 39.067 118.58 cv
38.825 118.722 38.608 118.828 38.416 118.899 cv
38.416 118.302 38.416 118.899 38.416 118.302 cv
38.762 118.139 39.064 117.942 39.323 117.711 cv
39.582 117.48 39.766 117.255 39.873 117.038 cv
40.272 117.038 39.873 117.038 40.272 117.038 cv
40.272 122.094 40.272 117.038 40.272 122.094 cv
f
42.152 122.094 mo
42.152 121.39 42.152 122.094 42.152 121.39 cv
42.857 121.39 42.152 121.39 42.857 121.39 cv
42.857 122.094 42.857 121.39 42.857 122.094 cv
42.857 122.353 42.811 122.562 42.719 122.721 cv
42.627 122.88 42.482 123.003 42.283 123.09 cv
42.111 122.826 42.283 123.09 42.111 122.826 cv
42.241 122.768 42.338 122.684 42.399 122.573 cv
42.461 122.462 42.496 122.302 42.503 122.094 cv
42.152 122.094 42.503 122.094 42.152 122.094 cv
f
46.087 122.094 mo
45.468 122.094 46.087 122.094 45.468 122.094 cv
45.468 118.154 45.468 122.094 45.468 118.154 cv
45.319 118.296 45.124 118.438 44.882 118.58 cv
44.64 118.722 44.423 118.828 44.231 118.899 cv
44.231 118.302 44.231 118.899 44.231 118.302 cv
44.577 118.139 44.879 117.942 45.138 117.711 cv
45.397 117.48 45.581 117.255 45.688 117.038 cv
46.087 117.038 45.688 117.038 46.087 117.038 cv
46.087 122.094 46.087 117.038 46.087 122.094 cv
f
47.634 119.61 mo
47.634 119.015 47.695 118.535 47.818 118.172 cv
47.941 117.809 48.123 117.529 48.364 117.333 cv
48.606 117.136 48.91 117.037 49.277 117.037 cv
49.548 117.037 49.785 117.091 49.989 117.2 cv
50.193 117.309 50.361 117.466 50.494 117.671 cv
50.627 117.876 50.731 118.125 50.807 118.42 cv
50.882 118.714 50.92 119.111 50.92 119.61 cv
50.92 120.201 50.86 120.678 50.738 121.041 cv
50.617 121.404 50.435 121.684 50.193 121.882 cv
49.951 122.08 49.646 122.179 49.277 122.179 cv
48.791 122.179 48.41 122.005 48.132 121.657 cv
47.8 121.238 47.634 120.556 47.634 119.61 cv
cp
48.27 119.61 mo
48.27 120.437 48.367 120.987 48.56 121.261 cv
48.754 121.534 48.993 121.671 49.277 121.671 cv
49.561 121.671 49.8 121.534 49.994 121.259 cv
50.188 120.984 50.284 120.434 50.284 119.61 cv
50.284 118.781 50.188 118.23 49.994 117.958 cv
49.8 117.685 49.559 117.549 49.27 117.549 cv
48.986 117.549 48.759 117.669 48.59 117.91 cv
48.377 118.216 48.27 118.783 48.27 119.61 cv
f
51.552 117.718 mo
51.552 117.124 51.552 117.718 51.552 117.124 cv
54.814 117.124 51.552 117.124 54.814 117.124 cv
54.814 117.605 54.814 117.124 54.814 117.605 cv
54.493 117.946 54.175 118.399 53.86 118.965 cv
53.545 119.531 53.302 120.112 53.13 120.71 cv
53.006 121.131 52.927 121.593 52.893 122.094 cv
52.257 122.094 52.893 122.094 52.257 122.094 cv
52.264 121.698 52.341 121.219 52.49 120.658 cv
52.639 120.097 52.853 119.556 53.132 119.035 cv
53.41 118.514 53.706 118.075 54.02 117.718 cv
51.552 117.718 54.02 117.718 51.552 117.718 cv
f
35.526 99.477 mo
35.526 98.855 35.526 99.477 35.526 98.855 cv
37.427 98.855 35.526 98.855 37.427 98.855 cv
37.427 99.477 37.427 98.855 37.427 99.477 cv
35.526 99.477 37.427 99.477 35.526 99.477 cv
f
40.272 100.989 mo
39.653 100.989 40.272 100.989 39.653 100.989 cv
39.653 97.049 39.653 100.989 39.653 97.049 cv
39.504 97.191 39.309 97.333 39.067 97.475 cv
38.825 97.617 38.608 97.723 38.416 97.794 cv
38.416 97.197 38.416 97.794 38.416 97.197 cv
38.762 97.034 39.064 96.837 39.323 96.606 cv
39.582 96.375 39.766 96.15 39.873 95.933 cv
40.272 95.933 39.873 95.933 40.272 95.933 cv
40.272 100.989 40.272 95.933 40.272 100.989 cv
f
42.152 100.989 mo
42.152 100.285 42.152 100.989 42.152 100.285 cv
42.857 100.285 42.152 100.285 42.857 100.285 cv
42.857 100.989 42.857 100.285 42.857 100.989 cv
42.857 101.248 42.811 101.457 42.719 101.616 cv
42.627 101.775 42.482 101.898 42.283 101.985 cv
42.111 101.721 42.283 101.985 42.111 101.721 cv
42.241 101.663 42.338 101.579 42.399 101.468 cv
42.461 101.357 42.496 101.197 42.503 100.989 cv
42.152 100.989 42.503 100.989 42.152 100.989 cv
f
46.087 100.989 mo
45.468 100.989 46.087 100.989 45.468 100.989 cv
45.468 97.049 45.468 100.989 45.468 97.049 cv
45.319 97.191 45.124 97.333 44.882 97.475 cv
44.64 97.617 44.423 97.723 44.231 97.794 cv
44.231 97.197 44.231 97.794 44.231 97.197 cv
44.577 97.034 44.879 96.837 45.138 96.606 cv
45.397 96.375 45.581 96.15 45.688 95.933 cv
46.087 95.933 45.688 95.933 46.087 95.933 cv
46.087 100.989 46.087 95.933 46.087 100.989 cv
f
47.634 98.505 mo
47.634 97.91 47.695 97.43 47.818 97.067 cv
47.941 96.704 48.123 96.424 48.364 96.228 cv
48.606 96.031 48.91 95.932 49.277 95.932 cv
49.548 95.932 49.785 95.986 49.989 96.095 cv
50.193 96.204 50.361 96.361 50.494 96.566 cv
50.627 96.771 50.731 97.02 50.807 97.315 cv
50.882 97.609 50.92 98.006 50.92 98.505 cv
50.92 99.096 50.86 99.573 50.738 99.936 cv
50.617 100.299 50.435 100.579 50.193 100.777 cv
49.951 100.975 49.646 101.074 49.277 101.074 cv
48.791 101.074 48.41 100.9 48.132 100.552 cv
47.8 100.133 47.634 99.451 47.634 98.505 cv
cp
48.27 98.505 mo
48.27 99.332 48.367 99.882 48.56 100.156 cv
48.754 100.429 48.993 100.566 49.277 100.566 cv
49.561 100.566 49.8 100.429 49.994 100.154 cv
50.188 99.879 50.284 99.329 50.284 98.505 cv
50.284 97.676 50.188 97.125 49.994 96.853 cv
49.8 96.58 49.559 96.444 49.27 96.444 cv
48.986 96.444 48.759 96.564 48.59 96.805 cv
48.377 97.111 48.27 97.678 48.27 98.505 cv
f
53.495 100.989 mo
53.495 99.783 53.495 100.989 53.495 99.783 cv
51.309 99.783 53.495 99.783 51.309 99.783 cv
51.309 99.216 51.309 99.783 51.309 99.216 cv
53.608 95.953 51.309 99.216 53.608 95.953 cv
54.114 95.953 53.608 95.953 54.114 95.953 cv
54.114 99.216 54.114 95.953 54.114 99.216 cv
54.794 99.216 54.114 99.216 54.794 99.216 cv
54.794 99.783 54.794 99.216 54.794 99.783 cv
54.114 99.783 54.794 99.783 54.114 99.783 cv
54.114 100.989 54.114 99.783 54.114 100.989 cv
53.495 100.989 54.114 100.989 53.495 100.989 cv
cp
53.495 99.216 mo
53.495 96.946 53.495 99.216 53.495 96.946 cv
51.917 99.216 53.495 96.946 51.917 99.216 cv
53.495 99.216 51.917 99.216 53.495 99.216 cv
f
35.526 78.372 mo
35.526 77.75 35.526 78.372 35.526 77.75 cv
37.427 77.75 35.526 77.75 37.427 77.75 cv
37.427 78.372 37.427 77.75 37.427 78.372 cv
35.526 78.372 37.427 78.372 35.526 78.372 cv
f
40.272 79.883 mo
39.653 79.883 40.272 79.883 39.653 79.883 cv
39.653 75.943 39.653 79.883 39.653 75.943 cv
39.504 76.085 39.309 76.227 39.067 76.369 cv
38.825 76.511 38.608 76.617 38.416 76.688 cv
38.416 76.091 38.416 76.688 38.416 76.091 cv
38.762 75.928 39.064 75.731 39.323 75.5 cv
39.582 75.269 39.766 75.044 39.873 74.827 cv
40.272 74.827 39.873 74.827 40.272 74.827 cv
40.272 79.883 40.272 74.827 40.272 79.883 cv
f
42.152 79.883 mo
42.152 79.179 42.152 79.883 42.152 79.179 cv
42.857 79.179 42.152 79.179 42.857 79.179 cv
42.857 79.883 42.857 79.179 42.857 79.883 cv
42.857 80.142 42.811 80.351 42.719 80.51 cv
42.627 80.669 42.482 80.792 42.283 80.879 cv
42.111 80.615 42.283 80.879 42.111 80.615 cv
42.241 80.557 42.338 80.473 42.399 80.362 cv
42.461 80.251 42.496 80.091 42.503 79.883 cv
42.152 79.883 42.503 79.883 42.152 79.883 cv
f
46.087 79.883 mo
45.468 79.883 46.087 79.883 45.468 79.883 cv
45.468 75.943 45.468 79.883 45.468 75.943 cv
45.319 76.085 45.124 76.227 44.882 76.369 cv
44.64 76.511 44.423 76.617 44.231 76.688 cv
44.231 76.091 44.231 76.688 44.231 76.091 cv
44.577 75.928 44.879 75.731 45.138 75.5 cv
45.397 75.269 45.581 75.044 45.688 74.827 cv
46.087 74.827 45.688 74.827 46.087 74.827 cv
46.087 79.883 46.087 74.827 46.087 79.883 cv
f
47.634 77.4 mo
47.634 76.805 47.695 76.325 47.818 75.962 cv
47.941 75.599 48.123 75.319 48.364 75.123 cv
48.606 74.926 48.91 74.827 49.277 74.827 cv
49.548 74.827 49.785 74.881 49.989 74.99 cv
50.193 75.099 50.361 75.256 50.494 75.461 cv
50.627 75.666 50.731 75.915 50.807 76.21 cv
50.882 76.504 50.92 76.901 50.92 77.4 cv
50.92 77.991 50.86 78.468 50.738 78.831 cv
50.617 79.194 50.435 79.474 50.193 79.672 cv
49.951 79.87 49.646 79.969 49.277 79.969 cv
48.791 79.969 48.41 79.795 48.132 79.447 cv
47.8 79.028 47.634 78.346 47.634 77.4 cv
cp
48.27 77.4 mo
48.27 78.227 48.367 78.777 48.56 79.051 cv
48.754 79.324 48.993 79.461 49.277 79.461 cv
49.561 79.461 49.8 79.324 49.994 79.049 cv
50.188 78.774 50.284 78.224 50.284 77.4 cv
50.284 76.571 50.188 76.02 49.994 75.748 cv
49.8 75.475 49.559 75.339 49.27 75.339 cv
48.986 75.339 48.759 75.459 48.59 75.7 cv
48.377 76.006 48.27 76.573 48.27 77.4 cv
f
53.842 79.883 mo
53.223 79.883 53.842 79.883 53.223 79.883 cv
53.223 75.943 53.223 79.883 53.223 75.943 cv
53.074 76.085 52.879 76.227 52.637 76.369 cv
52.395 76.511 52.178 76.617 51.986 76.688 cv
51.986 76.091 51.986 76.688 51.986 76.091 cv
52.332 75.928 52.634 75.731 52.893 75.5 cv
53.152 75.269 53.336 75.044 53.443 74.827 cv
53.842 74.827 53.443 74.827 53.842 74.827 cv
53.842 79.883 53.842 74.827 53.842 79.883 cv
f
35.526 57.266 mo
35.526 56.644 35.526 57.266 35.526 56.644 cv
37.427 56.644 35.526 56.644 37.427 56.644 cv
37.427 57.266 37.427 56.644 37.427 57.266 cv
35.526 57.266 37.427 57.266 35.526 57.266 cv
f
40.272 58.778 mo
39.653 58.778 40.272 58.778 39.653 58.778 cv
39.653 54.838 39.653 58.778 39.653 54.838 cv
39.504 54.98 39.309 55.122 39.067 55.264 cv
38.825 55.406 38.608 55.512 38.416 55.583 cv
38.416 54.986 38.416 55.583 38.416 54.986 cv
38.762 54.823 39.064 54.626 39.323 54.395 cv
39.582 54.164 39.766 53.939 39.873 53.722 cv
40.272 53.722 39.873 53.722 40.272 53.722 cv
40.272 58.778 40.272 53.722 40.272 58.778 cv
f
42.152 58.778 mo
42.152 58.074 42.152 58.778 42.152 58.074 cv
42.857 58.074 42.152 58.074 42.857 58.074 cv
42.857 58.778 42.857 58.074 42.857 58.778 cv
42.857 59.037 42.811 59.246 42.719 59.405 cv
42.627 59.564 42.482 59.687 42.283 59.774 cv
42.111 59.51 42.283 59.774 42.111 59.51 cv
42.241 59.452 42.338 59.368 42.399 59.257 cv
42.461 59.146 42.496 58.986 42.503 58.778 cv
42.152 58.778 42.503 58.778 42.152 58.778 cv
f
43.757 56.294 mo
43.757 55.699 43.818 55.219 43.941 54.856 cv
44.064 54.493 44.246 54.213 44.487 54.017 cv
44.729 53.82 45.033 53.721 45.4 53.721 cv
45.671 53.721 45.908 53.775 46.112 53.884 cv
46.316 53.993 46.484 54.15 46.617 54.355 cv
46.75 54.56 46.854 54.809 46.93 55.104 cv
47.005 55.398 47.043 55.795 47.043 56.294 cv
47.043 56.885 46.983 57.362 46.861 57.725 cv
46.74 58.088 46.558 58.368 46.316 58.566 cv
46.074 58.764 45.769 58.863 45.4 58.863 cv
44.914 58.863 44.533 58.689 44.255 58.341 cv
43.923 57.922 43.757 57.24 43.757 56.294 cv
cp
44.393 56.294 mo
44.393 57.121 44.49 57.671 44.683 57.945 cv
44.877 58.218 45.116 58.355 45.4 58.355 cv
45.684 58.355 45.923 58.218 46.117 57.943 cv
46.311 57.668 46.407 57.118 46.407 56.294 cv
46.407 55.465 46.311 54.914 46.117 54.642 cv
45.923 54.369 45.682 54.233 45.393 54.233 cv
45.109 54.233 44.882 54.353 44.713 54.594 cv
44.5 54.9 44.393 55.467 44.393 56.294 cv
f
47.727 57.613 mo
48.322 57.558 47.727 57.613 48.322 57.558 cv
48.372 57.837 48.468 58.04 48.61 58.166 cv
48.753 58.292 48.935 58.355 49.157 58.355 cv
49.347 58.355 49.514 58.311 49.657 58.224 cv
49.8 58.137 49.918 58.021 50.01 57.876 cv
50.101 57.73 50.178 57.534 50.24 57.287 cv
50.302 57.039 50.333 56.787 50.333 56.531 cv
50.333 56.503 50.332 56.462 50.329 56.407 cv
50.205 56.604 50.036 56.764 49.822 56.886 cv
49.608 57.009 49.376 57.07 49.126 57.07 cv
48.709 57.07 48.356 56.919 48.067 56.617 cv
47.779 56.315 47.634 55.916 47.634 55.421 cv
47.634 54.911 47.785 54.5 48.086 54.188 cv
48.388 53.877 48.765 53.721 49.219 53.721 cv
49.547 53.721 49.846 53.809 50.118 53.986 cv
50.389 54.162 50.596 54.413 50.737 54.74 cv
50.877 55.066 50.948 55.538 50.948 56.157 cv
50.948 56.8 50.878 57.312 50.738 57.694 cv
50.598 58.075 50.39 58.365 50.114 58.565 cv
49.838 58.764 49.515 58.863 49.143 58.863 cv
48.749 58.863 48.427 58.754 48.177 58.535 cv
47.928 58.317 47.777 58.009 47.727 57.613 cv
cp
50.26 55.39 mo
50.26 55.036 50.166 54.754 49.977 54.545 cv
49.788 54.337 49.56 54.233 49.295 54.233 cv
49.02 54.233 48.78 54.345 48.576 54.569 cv
48.372 54.794 48.27 55.085 48.27 55.442 cv
48.27 55.763 48.367 56.023 48.561 56.223 cv
48.754 56.424 48.993 56.524 49.277 56.524 cv
49.564 56.524 49.799 56.424 49.984 56.223 cv
50.168 56.023 50.26 55.745 50.26 55.39 cv
f
52.463 56.047 mo
52.206 55.953 52.016 55.819 51.892 55.645 cv
51.769 55.471 51.707 55.263 51.707 55.02 cv
51.707 54.653 51.839 54.345 52.102 54.096 cv
52.366 53.846 52.716 53.721 53.154 53.721 cv
53.594 53.721 53.948 53.849 54.216 54.104 cv
54.484 54.36 54.618 54.671 54.618 55.037 cv
54.618 55.271 54.557 55.474 54.434 55.647 cv
54.312 55.82 54.126 55.953 53.876 56.047 cv
54.185 56.148 54.421 56.31 54.582 56.535 cv
54.744 56.759 54.825 57.027 54.825 57.339 cv
54.825 57.769 54.672 58.131 54.367 58.424 cv
54.063 58.717 53.662 58.864 53.164 58.864 cv
52.667 58.864 52.266 58.717 51.961 58.422 cv
51.656 58.128 51.504 57.761 51.504 57.321 cv
51.504 56.994 51.587 56.72 51.753 56.499 cv
51.919 56.278 52.156 56.127 52.463 56.047 cv
cp
52.339 54.999 mo
52.339 55.237 52.416 55.432 52.57 55.583 cv
52.723 55.734 52.922 55.81 53.168 55.81 cv
53.406 55.81 53.601 55.735 53.754 55.585 cv
53.906 55.435 53.982 55.251 53.982 55.034 cv
53.982 54.807 53.904 54.616 53.747 54.462 cv
53.59 54.307 53.395 54.23 53.161 54.23 cv
52.925 54.23 52.729 54.305 52.573 54.457 cv
52.417 54.608 52.339 54.789 52.339 54.999 cv
cp
52.14 57.325 mo
52.14 57.501 52.182 57.672 52.265 57.837 cv
52.349 58.002 52.473 58.129 52.638 58.22 cv
52.803 58.31 52.981 58.355 53.171 58.355 cv
53.467 58.355 53.711 58.26 53.903 58.07 cv
54.096 57.88 54.192 57.639 54.192 57.345 cv
54.192 57.048 54.093 56.802 53.895 56.607 cv
53.696 56.412 53.448 56.315 53.151 56.315 cv
52.859 56.315 52.618 56.411 52.427 56.604 cv
52.236 56.796 52.14 57.036 52.14 57.325 cv
f
35.526 36.059 mo
35.526 35.437 35.526 36.059 35.526 35.437 cv
37.427 35.437 35.526 35.437 37.427 35.437 cv
37.427 36.059 37.427 35.437 37.427 36.059 cv
35.526 36.059 37.427 36.059 35.526 36.059 cv
f
40.272 37.57 mo
39.653 37.57 40.272 37.57 39.653 37.57 cv
39.653 33.63 39.653 37.57 39.653 33.63 cv
39.504 33.772 39.309 33.914 39.067 34.056 cv
38.825 34.198 38.608 34.304 38.416 34.375 cv
38.416 33.778 38.416 34.375 38.416 33.778 cv
38.762 33.615 39.064 33.418 39.323 33.187 cv
39.582 32.955 39.766 32.731 39.873 32.514 cv
40.272 32.514 39.873 32.514 40.272 32.514 cv
40.272 37.57 40.272 32.514 40.272 37.57 cv
f
42.152 37.57 mo
42.152 36.866 42.152 37.57 42.152 36.866 cv
42.857 36.866 42.152 36.866 42.857 36.866 cv
42.857 37.57 42.857 36.866 42.857 37.57 cv
42.857 37.829 42.811 38.038 42.719 38.197 cv
42.627 38.356 42.482 38.479 42.283 38.566 cv
42.111 38.302 42.283 38.566 42.111 38.302 cv
42.241 38.244 42.338 38.16 42.399 38.049 cv
42.461 37.938 42.496 37.778 42.503 37.57 cv
42.152 37.57 42.503 37.57 42.152 37.57 cv
f
43.757 35.087 mo
43.757 34.492 43.818 34.012 43.941 33.649 cv
44.064 33.286 44.246 33.006 44.487 32.81 cv
44.729 32.613 45.033 32.514 45.4 32.514 cv
45.671 32.514 45.908 32.568 46.112 32.677 cv
46.316 32.786 46.484 32.943 46.617 33.148 cv
46.75 33.353 46.854 33.602 46.93 33.897 cv
47.005 34.191 47.043 34.588 47.043 35.087 cv
47.043 35.678 46.983 36.155 46.861 36.518 cv
46.74 36.881 46.558 37.161 46.316 37.359 cv
46.074 37.557 45.769 37.656 45.4 37.656 cv
44.914 37.656 44.533 37.482 44.255 37.134 cv
43.923 36.715 43.757 36.033 43.757 35.087 cv
cp
44.393 35.087 mo
44.393 35.914 44.49 36.464 44.683 36.738 cv
44.877 37.011 45.116 37.148 45.4 37.148 cv
45.684 37.148 45.923 37.011 46.117 36.736 cv
46.311 36.461 46.407 35.911 46.407 35.087 cv
46.407 34.258 46.311 33.707 46.117 33.435 cv
45.923 33.162 45.682 33.026 45.393 33.026 cv
45.109 33.026 44.882 33.146 44.713 33.387 cv
44.5 33.693 44.393 34.26 44.393 35.087 cv
f
47.727 36.406 mo
48.322 36.351 47.727 36.406 48.322 36.351 cv
48.372 36.63 48.468 36.833 48.61 36.959 cv
48.753 37.085 48.935 37.148 49.157 37.148 cv
49.347 37.148 49.514 37.104 49.657 37.017 cv
49.8 36.93 49.918 36.814 50.01 36.669 cv
50.101 36.523 50.178 36.327 50.24 36.08 cv
50.302 35.832 50.333 35.58 50.333 35.324 cv
50.333 35.296 50.332 35.255 50.329 35.2 cv
50.205 35.397 50.036 35.557 49.822 35.679 cv
49.608 35.802 49.376 35.863 49.126 35.863 cv
48.709 35.863 48.356 35.712 48.067 35.41 cv
47.779 35.108 47.634 34.709 47.634 34.214 cv
47.634 33.704 47.785 33.293 48.086 32.981 cv
48.388 32.67 48.765 32.514 49.219 32.514 cv
49.547 32.514 49.846 32.602 50.118 32.779 cv
50.389 32.955 50.596 33.206 50.737 33.533 cv
50.877 33.859 50.948 34.331 50.948 34.95 cv
50.948 35.593 50.878 36.105 50.738 36.487 cv
50.598 36.868 50.39 37.158 50.114 37.358 cv
49.838 37.557 49.515 37.656 49.143 37.656 cv
48.749 37.656 48.427 37.547 48.177 37.328 cv
47.928 37.11 47.777 36.802 47.727 36.406 cv
cp
50.26 34.183 mo
50.26 33.829 50.166 33.547 49.977 33.338 cv
49.788 33.13 49.56 33.026 49.295 33.026 cv
49.02 33.026 48.78 33.138 48.576 33.362 cv
48.372 33.587 48.27 33.878 48.27 34.235 cv
48.27 34.556 48.367 34.816 48.561 35.016 cv
48.754 35.217 48.993 35.317 49.277 35.317 cv
49.564 35.317 49.799 35.217 49.984 35.016 cv
50.168 34.816 50.26 34.538 50.26 34.183 cv
f
51.511 36.251 mo
52.161 36.196 51.511 36.251 52.161 36.196 cv
52.209 36.512 52.321 36.75 52.496 36.909 cv
52.671 37.068 52.883 37.148 53.13 37.148 cv
53.428 37.148 53.68 37.035 53.886 36.811 cv
54.093 36.587 54.196 36.289 54.196 35.918 cv
54.196 35.565 54.097 35.287 53.898 35.083 cv
53.7 34.879 53.441 34.777 53.12 34.777 cv
52.92 34.777 52.74 34.823 52.58 34.913 cv
52.42 35.003 52.294 35.121 52.202 35.265 cv
51.621 35.19 52.202 35.265 51.621 35.19 cv
52.109 32.603 51.621 35.19 52.109 32.603 cv
54.615 32.603 52.109 32.603 54.615 32.603 cv
54.615 33.194 54.615 32.603 54.615 33.194 cv
52.604 33.194 54.615 33.194 52.604 33.194 cv
52.333 34.547 52.604 33.194 52.333 34.547 cv
52.635 34.337 52.952 34.231 53.285 34.231 cv
53.725 34.231 54.096 34.383 54.399 34.688 cv
54.701 34.993 54.852 35.384 54.852 35.863 cv
54.852 36.319 54.719 36.712 54.454 37.045 cv
54.13 37.452 53.689 37.656 53.13 37.656 cv
52.672 37.656 52.298 37.528 52.008 37.271 cv
51.718 37.015 51.552 36.675 51.511 36.251 cv
f
35.526 14.954 mo
35.526 14.332 35.526 14.954 35.526 14.332 cv
37.427 14.332 35.526 14.332 37.427 14.332 cv
37.427 14.954 37.427 14.332 37.427 14.954 cv
35.526 14.954 37.427 14.954 35.526 14.954 cv
f
40.272 16.465 mo
39.653 16.465 40.272 16.465 39.653 16.465 cv
39.653 12.525 39.653 16.465 39.653 12.525 cv
39.504 12.667 39.309 12.809 39.067 12.951 cv
38.825 13.093 38.608 13.199 38.416 13.27 cv
38.416 12.673 38.416 13.27 38.416 12.673 cv
38.762 12.51 39.064 12.313 39.323 12.082 cv
39.582 11.85 39.766 11.626 39.873 11.408 cv
40.272 11.408 39.873 11.408 40.272 11.408 cv
40.272 16.465 40.272 11.408 40.272 16.465 cv
f
42.152 16.465 mo
42.152 15.761 42.152 16.465 42.152 15.761 cv
42.857 15.761 42.152 15.761 42.857 15.761 cv
42.857 16.465 42.857 15.761 42.857 16.465 cv
42.857 16.724 42.811 16.933 42.719 17.092 cv
42.627 17.251 42.482 17.374 42.283 17.461 cv
42.111 17.197 42.283 17.461 42.111 17.197 cv
42.241 17.139 42.338 17.055 42.399 16.944 cv
42.461 16.833 42.496 16.673 42.503 16.465 cv
42.152 16.465 42.503 16.465 42.152 16.465 cv
f
43.757 13.981 mo
43.757 13.386 43.818 12.906 43.941 12.543 cv
44.064 12.18 44.246 11.9 44.487 11.704 cv
44.729 11.507 45.033 11.408 45.4 11.408 cv
45.671 11.408 45.908 11.462 46.112 11.571 cv
46.316 11.68 46.484 11.837 46.617 12.042 cv
46.75 12.247 46.854 12.496 46.93 12.791 cv
47.005 13.085 47.043 13.482 47.043 13.981 cv
47.043 14.572 46.983 15.049 46.861 15.412 cv
46.74 15.775 46.558 16.055 46.316 16.253 cv
46.074 16.451 45.769 16.55 45.4 16.55 cv
44.914 16.55 44.533 16.376 44.255 16.028 cv
43.923 15.609 43.757 14.927 43.757 13.981 cv
cp
44.393 13.981 mo
44.393 14.808 44.49 15.358 44.683 15.632 cv
44.877 15.905 45.116 16.042 45.4 16.042 cv
45.684 16.042 45.923 15.905 46.117 15.63 cv
46.311 15.355 46.407 14.805 46.407 13.981 cv
46.407 13.152 46.311 12.601 46.117 12.329 cv
45.923 12.056 45.682 11.92 45.393 11.92 cv
45.109 11.92 44.882 12.04 44.713 12.281 cv
44.5 12.587 44.393 13.154 44.393 13.981 cv
f
47.727 15.301 mo
48.322 15.246 47.727 15.301 48.322 15.246 cv
48.372 15.525 48.468 15.728 48.61 15.854 cv
48.753 15.98 48.935 16.043 49.157 16.043 cv
49.347 16.043 49.514 15.999 49.657 15.912 cv
49.8 15.825 49.918 15.709 50.01 15.564 cv
50.101 15.418 50.178 15.222 50.24 14.975 cv
50.302 14.727 50.333 14.475 50.333 14.219 cv
50.333 14.191 50.332 14.15 50.329 14.095 cv
50.205 14.292 50.036 14.452 49.822 14.574 cv
49.608 14.697 49.376 14.758 49.126 14.758 cv
48.709 14.758 48.356 14.607 48.067 14.305 cv
47.779 14.003 47.634 13.604 47.634 13.109 cv
47.634 12.599 47.785 12.188 48.086 11.876 cv
48.388 11.565 48.765 11.409 49.219 11.409 cv
49.547 11.409 49.846 11.497 50.118 11.674 cv
50.389 11.85 50.596 12.101 50.737 12.428 cv
50.877 12.754 50.948 13.226 50.948 13.845 cv
50.948 14.488 50.878 15 50.738 15.382 cv
50.598 15.763 50.39 16.053 50.114 16.253 cv
49.838 16.452 49.515 16.551 49.143 16.551 cv
48.749 16.551 48.427 16.442 48.177 16.223 cv
47.928 16.005 47.777 15.697 47.727 15.301 cv
cp
50.26 13.078 mo
50.26 12.724 50.166 12.442 49.977 12.233 cv
49.788 12.025 49.56 11.921 49.295 11.921 cv
49.02 11.921 48.78 12.033 48.576 12.257 cv
48.372 12.482 48.27 12.773 48.27 13.13 cv
48.27 13.451 48.367 13.711 48.561 13.911 cv
48.754 14.112 48.993 14.212 49.277 14.212 cv
49.564 14.212 49.799 14.112 49.984 13.911 cv
50.168 13.711 50.26 13.433 50.26 13.078 cv
f
54.763 15.871 mo
54.763 16.465 54.763 15.871 54.763 16.465 cv
51.432 16.465 54.763 16.465 51.432 16.465 cv
51.427 16.316 51.452 16.173 51.504 16.036 cv
51.589 15.809 51.725 15.586 51.912 15.366 cv
52.098 15.146 52.368 14.892 52.721 14.603 cv
53.269 14.155 53.639 13.799 53.831 13.537 cv
54.024 13.275 54.12 13.027 54.12 12.793 cv
54.12 12.548 54.033 12.341 53.857 12.173 cv
53.682 12.005 53.453 11.921 53.171 11.921 cv
52.874 11.921 52.635 12.01 52.456 12.189 cv
52.278 12.367 52.187 12.614 52.185 12.931 cv
51.549 12.865 52.185 12.931 51.549 12.865 cv
51.592 12.391 51.756 12.03 52.04 11.781 cv
52.325 11.533 52.706 11.409 53.185 11.409 cv
53.669 11.409 54.051 11.543 54.333 11.811 cv
54.615 12.079 54.756 12.411 54.756 12.807 cv
54.756 13.008 54.715 13.206 54.632 13.401 cv
54.55 13.596 54.413 13.801 54.222 14.016 cv
54.03 14.231 53.712 14.527 53.268 14.902 cv
52.896 15.214 52.658 15.425 52.553 15.536 cv
52.447 15.647 52.36 15.759 52.291 15.871 cv
54.763 15.871 52.291 15.871 54.763 15.871 cv
f
.714 lw
60.912 180.006 mo
60.912 176.539 li
@
80.298 178.273 mo
80.298 176.54 li
@
99.582 180.006 mo
99.582 176.539 li
@
118.968 178.273 mo
118.968 176.54 li
@
138.354 180.006 mo
138.354 176.539 li
@
157.638 178.273 mo
157.638 176.54 li
@
177.024 180.006 mo
177.024 176.539 li
@
196.41 178.273 mo
196.41 176.54 li
@
215.694 180.006 mo
215.694 176.539 li
@
235.08 178.273 mo
235.08 176.54 li
@
254.466 180.006 mo
254.466 176.539 li
@
273.75 178.273 mo
273.75 176.54 li
@
293.136 180.006 mo
293.136 176.539 li
@
60.917 176.539 mo
293.136 176.539 li
@
60.917 .457031 mo
293.136 .457031 li
@
59.182 172.971 mo
60.917 172.971 li
@
57.448 162.469 mo
60.917 162.469 li
@
59.182 151.865 mo
60.917 151.865 li
@
57.448 141.363 mo
60.917 141.363 li
@
59.182 130.759 mo
60.917 130.759 li
@
57.448 120.155 mo
60.917 120.155 li
@
59.182 109.653 mo
60.917 109.653 li
@
57.448 99.049 mo
60.917 99.049 li
@
59.182 88.547 mo
60.917 88.547 li
@
57.448 77.943 mo
60.917 77.943 li
@
59.182 67.339 mo
60.917 67.339 li
@
57.448 56.837 mo
60.917 56.837 li
@
59.182 46.233 mo
60.917 46.233 li
@
57.448 35.629 mo
60.917 35.629 li
@
59.182 25.127 mo
60.917 25.127 li
@
57.448 14.523 mo
60.917 14.523 li
@
59.182 4.02101 mo
60.917 4.02101 li
@
60.917 176.535 mo
60.917 .453018 li
@
293.136 176.535 mo
293.136 .453018 li
@
gsave
60.912 .458038 mo
293.233 .458038 li
293.233 176.642 li
60.912 176.642 li
cp
eclp
gsave
0 -27.986 mo
340.81 -27.986 li
340.81 217.574 li
0 217.574 li
cp
clp
75.517 18.734 mo
75.517 19.747 74.694 20.569 73.68 20.569 cv
72.667 20.569 71.844 19.747 71.844 18.734 cv
71.844 17.721 72.667 16.899 73.68 16.899 cv
74.694 16.899 75.517 17.721 75.517 18.734 cv
cp
ef
.306 lw
75.517 18.734 mo
75.517 19.747 74.694 20.569 73.68 20.569 cv
72.667 20.569 71.844 19.747 71.844 18.734 cv
71.844 17.721 72.667 16.899 73.68 16.899 cv
74.694 16.899 75.517 17.721 75.517 18.734 cv
cp
@
77.437 18.794 mo
77.437 19.807 76.614 20.629 75.6 20.629 cv
74.587 20.629 73.764 19.807 73.764 18.794 cv
73.764 17.781 74.587 16.959 75.6 16.959 cv
76.614 16.959 77.437 17.781 77.437 18.794 cv
cp
ef
77.437 18.794 mo
77.437 19.807 76.614 20.629 75.6 20.629 cv
74.587 20.629 73.764 19.807 73.764 18.794 cv
73.764 17.781 74.587 16.959 75.6 16.959 cv
76.614 16.959 77.437 17.781 77.437 18.794 cv
cp
@
79.357 20.834 mo
79.357 21.847 78.534 22.669 77.52 22.669 cv
76.507 22.669 75.684 21.847 75.684 20.834 cv
75.684 19.821 76.507 18.999 77.52 18.999 cv
78.534 18.999 79.357 19.821 79.357 20.834 cv
cp
ef
79.357 20.834 mo
79.357 21.847 78.534 22.669 77.52 22.669 cv
76.507 22.669 75.684 21.847 75.684 20.834 cv
75.684 19.821 76.507 18.999 77.52 18.999 cv
78.534 18.999 79.357 19.821 79.357 20.834 cv
cp
@
82.417 39.734 mo
82.417 40.747 81.594 41.569 80.58 41.569 cv
79.567 41.569 78.744 40.747 78.744 39.734 cv
78.744 38.721 79.567 37.899 80.58 37.899 cv
81.594 37.899 82.417 38.721 82.417 39.734 cv
cp
ef
82.417 39.734 mo
82.417 40.747 81.594 41.569 80.58 41.569 cv
79.567 41.569 78.744 40.747 78.744 39.734 cv
78.744 38.721 79.567 37.899 80.58 37.899 cv
81.594 37.899 82.417 38.721 82.417 39.734 cv
cp
@
84.757 44.774 mo
84.757 45.787 83.934 46.609 82.92 46.609 cv
81.907 46.609 81.084 45.787 81.084 44.774 cv
81.084 43.761 81.907 42.939 82.92 42.939 cv
83.934 42.939 84.757 43.761 84.757 44.774 cv
cp
ef
84.757 44.774 mo
84.757 45.787 83.934 46.609 82.92 46.609 cv
81.907 46.609 81.084 45.787 81.084 44.774 cv
81.084 43.761 81.907 42.939 82.92 42.939 cv
83.934 42.939 84.757 43.761 84.757 44.774 cv
cp
@
89.497 48.614 mo
89.497 49.627 88.674 50.449 87.66 50.449 cv
86.647 50.449 85.824 49.627 85.824 48.614 cv
85.824 47.601 86.647 46.779 87.66 46.779 cv
88.674 46.779 89.497 47.601 89.497 48.614 cv
cp
ef
89.497 48.614 mo
89.497 49.627 88.674 50.449 87.66 50.449 cv
86.647 50.449 85.824 49.627 85.824 48.614 cv
85.824 47.601 86.647 46.779 87.66 46.779 cv
88.674 46.779 89.497 47.601 89.497 48.614 cv
cp
@
90.997 49.994 mo
90.997 51.007 90.174 51.829 89.16 51.829 cv
88.147 51.829 87.324 51.007 87.324 49.994 cv
87.324 48.981 88.147 48.159 89.16 48.159 cv
90.174 48.159 90.997 48.981 90.997 49.994 cv
cp
ef
90.997 49.994 mo
90.997 51.007 90.174 51.829 89.16 51.829 cv
88.147 51.829 87.324 51.007 87.324 49.994 cv
87.324 48.981 88.147 48.159 89.16 48.159 cv
90.174 48.159 90.997 48.981 90.997 49.994 cv
cp
@
94.897 50.894 mo
94.897 51.907 94.074 52.729 93.06 52.729 cv
92.047 52.729 91.224 51.907 91.224 50.894 cv
91.224 49.881 92.047 49.059 93.06 49.059 cv
94.074 49.059 94.897 49.881 94.897 50.894 cv
cp
ef
94.897 50.894 mo
94.897 51.907 94.074 52.729 93.06 52.729 cv
92.047 52.729 91.224 51.907 91.224 50.894 cv
91.224 49.881 92.047 49.059 93.06 49.059 cv
94.074 49.059 94.897 49.881 94.897 50.894 cv
cp
@
95.317 51.134 mo
95.317 52.147 94.494 52.969 93.48 52.969 cv
92.467 52.969 91.644 52.147 91.644 51.134 cv
91.644 50.121 92.467 49.299 93.48 49.299 cv
94.494 49.299 95.317 50.121 95.317 51.134 cv
cp
ef
95.317 51.134 mo
95.317 52.147 94.494 52.969 93.48 52.969 cv
92.467 52.969 91.644 52.147 91.644 51.134 cv
91.644 50.121 92.467 49.299 93.48 49.299 cv
94.494 49.299 95.317 50.121 95.317 51.134 cv
cp
@
99.157 54.974 mo
99.157 55.987 98.334 56.809 97.32 56.809 cv
96.307 56.809 95.484 55.987 95.484 54.974 cv
95.484 53.961 96.307 53.139 97.32 53.139 cv
98.334 53.139 99.157 53.961 99.157 54.974 cv
cp
ef
99.157 54.974 mo
99.157 55.987 98.334 56.809 97.32 56.809 cv
96.307 56.809 95.484 55.987 95.484 54.974 cv
95.484 53.961 96.307 53.139 97.32 53.139 cv
98.334 53.139 99.157 53.961 99.157 54.974 cv
cp
@
100.297 58.994 mo
100.297 60.007 99.474 60.829 98.46 60.829 cv
97.447 60.829 96.624 60.007 96.624 58.994 cv
96.624 57.981 97.447 57.159 98.46 57.159 cv
99.474 57.159 100.297 57.981 100.297 58.994 cv
cp
ef
100.297 58.994 mo
100.297 60.007 99.474 60.829 98.46 60.829 cv
97.447 60.829 96.624 60.007 96.624 58.994 cv
96.624 57.981 97.447 57.159 98.46 57.159 cv
99.474 57.159 100.297 57.981 100.297 58.994 cv
cp
@
100.297 55.934 mo
100.297 56.947 99.474 57.769 98.46 57.769 cv
97.447 57.769 96.624 56.947 96.624 55.934 cv
96.624 54.921 97.447 54.099 98.46 54.099 cv
99.474 54.099 100.297 54.921 100.297 55.934 cv
cp
ef
100.297 55.934 mo
100.297 56.947 99.474 57.769 98.46 57.769 cv
97.447 57.769 96.624 56.947 96.624 55.934 cv
96.624 54.921 97.447 54.099 98.46 54.099 cv
99.474 54.099 100.297 54.921 100.297 55.934 cv
cp
@
109.597 59.774 mo
109.597 60.787 108.774 61.609 107.76 61.609 cv
106.747 61.609 105.924 60.787 105.924 59.774 cv
105.924 58.761 106.747 57.939 107.76 57.939 cv
108.774 57.939 109.597 58.761 109.597 59.774 cv
cp
ef
109.597 59.774 mo
109.597 60.787 108.774 61.609 107.76 61.609 cv
106.747 61.609 105.924 60.787 105.924 59.774 cv
105.924 58.761 106.747 57.939 107.76 57.939 cv
108.774 57.939 109.597 58.761 109.597 59.774 cv
cp
@
117.757 74.354 mo
117.757 75.367 116.934 76.189 115.92 76.189 cv
114.907 76.189 114.084 75.367 114.084 74.354 cv
114.084 73.341 114.907 72.519 115.92 72.519 cv
116.934 72.519 117.757 73.341 117.757 74.354 cv
cp
ef
117.757 74.354 mo
117.757 75.367 116.934 76.189 115.92 76.189 cv
114.907 76.189 114.084 75.367 114.084 74.354 cv
114.084 73.341 114.907 72.519 115.92 72.519 cv
116.934 72.519 117.757 73.341 117.757 74.354 cv
cp
@
130.897 82.754 mo
130.897 83.767 130.074 84.589 129.06 84.589 cv
128.047 84.589 127.224 83.767 127.224 82.754 cv
127.224 81.741 128.047 80.919 129.06 80.919 cv
130.074 80.919 130.897 81.741 130.897 82.754 cv
cp
ef
130.897 82.754 mo
130.897 83.767 130.074 84.589 129.06 84.589 cv
128.047 84.589 127.224 83.767 127.224 82.754 cv
127.224 81.741 128.047 80.919 129.06 80.919 cv
130.074 80.919 130.897 81.741 130.897 82.754 cv
cp
@
132.457 87.854 mo
132.457 88.867 131.634 89.689 130.62 89.689 cv
129.607 89.689 128.784 88.867 128.784 87.854 cv
128.784 86.841 129.607 86.019 130.62 86.019 cv
131.634 86.019 132.457 86.841 132.457 87.854 cv
cp
ef
132.457 87.854 mo
132.457 88.867 131.634 89.689 130.62 89.689 cv
129.607 89.689 128.784 88.867 128.784 87.854 cv
128.784 86.841 129.607 86.019 130.62 86.019 cv
131.634 86.019 132.457 86.841 132.457 87.854 cv
cp
@
135.517 90.794 mo
135.517 91.807 134.694 92.629 133.68 92.629 cv
132.667 92.629 131.844 91.807 131.844 90.794 cv
131.844 89.781 132.667 88.959 133.68 88.959 cv
134.694 88.959 135.517 89.781 135.517 90.794 cv
cp
ef
135.517 90.794 mo
135.517 91.807 134.694 92.629 133.68 92.629 cv
132.667 92.629 131.844 91.807 131.844 90.794 cv
131.844 89.781 132.667 88.959 133.68 88.959 cv
134.694 88.959 135.517 89.781 135.517 90.794 cv
cp
@
137.437 91.214 mo
137.437 92.227 136.614 93.049 135.6 93.049 cv
134.587 93.049 133.764 92.227 133.764 91.214 cv
133.764 90.201 134.587 89.379 135.6 89.379 cv
136.614 89.379 137.437 90.201 137.437 91.214 cv
cp
ef
137.437 91.214 mo
137.437 92.227 136.614 93.049 135.6 93.049 cv
134.587 93.049 133.764 92.227 133.764 91.214 cv
133.764 90.201 134.587 89.379 135.6 89.379 cv
136.614 89.379 137.437 90.201 137.437 91.214 cv
cp
@
139.357 92.654 mo
139.357 93.667 138.534 94.489 137.52 94.489 cv
136.507 94.489 135.684 93.667 135.684 92.654 cv
135.684 91.641 136.507 90.819 137.52 90.819 cv
138.534 90.819 139.357 91.641 139.357 92.654 cv
cp
ef
139.357 92.654 mo
139.357 93.667 138.534 94.489 137.52 94.489 cv
136.507 94.489 135.684 93.667 135.684 92.654 cv
135.684 91.641 136.507 90.819 137.52 90.819 cv
138.534 90.819 139.357 91.641 139.357 92.654 cv
cp
@
144.037 134.414 mo
144.037 135.427 143.214 136.249 142.2 136.249 cv
141.187 136.249 140.364 135.427 140.364 134.414 cv
140.364 133.401 141.187 132.579 142.2 132.579 cv
143.214 132.579 144.037 133.401 144.037 134.414 cv
cp
ef
144.037 134.414 mo
144.037 135.427 143.214 136.249 142.2 136.249 cv
141.187 136.249 140.364 135.427 140.364 134.414 cv
140.364 133.401 141.187 132.579 142.2 132.579 cv
143.214 132.579 144.037 133.401 144.037 134.414 cv
cp
@
161.797 135.134 mo
161.797 136.147 160.974 136.969 159.96 136.969 cv
158.947 136.969 158.124 136.147 158.124 135.134 cv
158.124 134.121 158.947 133.299 159.96 133.299 cv
160.974 133.299 161.797 134.121 161.797 135.134 cv
cp
ef
161.797 135.134 mo
161.797 136.147 160.974 136.969 159.96 136.969 cv
158.947 136.969 158.124 136.147 158.124 135.134 cv
158.124 134.121 158.947 133.299 159.96 133.299 cv
160.974 133.299 161.797 134.121 161.797 135.134 cv
cp
@
163.777 136.454 mo
163.777 137.467 162.954 138.289 161.94 138.289 cv
160.927 138.289 160.104 137.467 160.104 136.454 cv
160.104 135.441 160.927 134.619 161.94 134.619 cv
162.954 134.619 163.777 135.441 163.777 136.454 cv
cp
ef
163.777 136.454 mo
163.777 137.467 162.954 138.289 161.94 138.289 cv
160.927 138.289 160.104 137.467 160.104 136.454 cv
160.104 135.441 160.927 134.619 161.94 134.619 cv
162.954 134.619 163.777 135.441 163.777 136.454 cv
cp
@
180.817 139.334 mo
180.817 140.347 179.994 141.169 178.98 141.169 cv
177.967 141.169 177.144 140.347 177.144 139.334 cv
177.144 138.321 177.967 137.499 178.98 137.499 cv
179.994 137.499 180.817 138.321 180.817 139.334 cv
cp
ef
180.817 139.334 mo
180.817 140.347 179.994 141.169 178.98 141.169 cv
177.967 141.169 177.144 140.347 177.144 139.334 cv
177.144 138.321 177.967 137.499 178.98 137.499 cv
179.994 137.499 180.817 138.321 180.817 139.334 cv
cp
@
192.037 146.654 mo
192.037 147.667 191.214 148.489 190.2 148.489 cv
189.187 148.489 188.364 147.667 188.364 146.654 cv
188.364 145.641 189.187 144.819 190.2 144.819 cv
191.214 144.819 192.037 145.641 192.037 146.654 cv
cp
ef
192.037 146.654 mo
192.037 147.667 191.214 148.489 190.2 148.489 cv
189.187 148.489 188.364 147.667 188.364 146.654 cv
188.364 145.641 189.187 144.819 190.2 144.819 cv
191.214 144.819 192.037 145.641 192.037 146.654 cv
cp
@
194.797 148.094 mo
194.797 149.107 193.974 149.929 192.96 149.929 cv
191.947 149.929 191.124 149.107 191.124 148.094 cv
191.124 147.081 191.947 146.259 192.96 146.259 cv
193.974 146.259 194.797 147.081 194.797 148.094 cv
cp
ef
194.797 148.094 mo
194.797 149.107 193.974 149.929 192.96 149.929 cv
191.947 149.929 191.124 149.107 191.124 148.094 cv
191.124 147.081 191.947 146.259 192.96 146.259 cv
193.974 146.259 194.797 147.081 194.797 148.094 cv
cp
@
200.497 149.714 mo
200.497 150.727 199.674 151.549 198.66 151.549 cv
197.647 151.549 196.824 150.727 196.824 149.714 cv
196.824 148.701 197.647 147.879 198.66 147.879 cv
199.674 147.879 200.497 148.701 200.497 149.714 cv
cp
ef
200.497 149.714 mo
200.497 150.727 199.674 151.549 198.66 151.549 cv
197.647 151.549 196.824 150.727 196.824 149.714 cv
196.824 148.701 197.647 147.879 198.66 147.879 cv
199.674 147.879 200.497 148.701 200.497 149.714 cv
cp
@
201.697 150.014 mo
201.697 151.027 200.874 151.849 199.86 151.849 cv
198.847 151.849 198.024 151.027 198.024 150.014 cv
198.024 149.001 198.847 148.179 199.86 148.179 cv
200.874 148.179 201.697 149.001 201.697 150.014 cv
cp
ef
201.697 150.014 mo
201.697 151.027 200.874 151.849 199.86 151.849 cv
198.847 151.849 198.024 151.027 198.024 150.014 cv
198.024 149.001 198.847 148.179 199.86 148.179 cv
200.874 148.179 201.697 149.001 201.697 150.014 cv
cp
@
210.577 151.694 mo
210.577 152.707 209.754 153.529 208.74 153.529 cv
207.727 153.529 206.904 152.707 206.904 151.694 cv
206.904 150.681 207.727 149.859 208.74 149.859 cv
209.754 149.859 210.577 150.681 210.577 151.694 cv
cp
ef
210.577 151.694 mo
210.577 152.707 209.754 153.529 208.74 153.529 cv
207.727 153.529 206.904 152.707 206.904 151.694 cv
206.904 150.681 207.727 149.859 208.74 149.859 cv
209.754 149.859 210.577 150.681 210.577 151.694 cv
cp
@
212.137 151.754 mo
212.137 152.767 211.314 153.589 210.3 153.589 cv
209.287 153.589 208.464 152.767 208.464 151.754 cv
208.464 150.741 209.287 149.919 210.3 149.919 cv
211.314 149.919 212.137 150.741 212.137 151.754 cv
cp
ef
212.137 151.754 mo
212.137 152.767 211.314 153.589 210.3 153.589 cv
209.287 153.589 208.464 152.767 208.464 151.754 cv
208.464 150.741 209.287 149.919 210.3 149.919 cv
211.314 149.919 212.137 150.741 212.137 151.754 cv
cp
@
212.557 152.294 mo
212.557 153.307 211.734 154.129 210.72 154.129 cv
209.707 154.129 208.884 153.307 208.884 152.294 cv
208.884 151.281 209.707 150.459 210.72 150.459 cv
211.734 150.459 212.557 151.281 212.557 152.294 cv
cp
ef
212.557 152.294 mo
212.557 153.307 211.734 154.129 210.72 154.129 cv
209.707 154.129 208.884 153.307 208.884 152.294 cv
208.884 151.281 209.707 150.459 210.72 150.459 cv
211.734 150.459 212.557 151.281 212.557 152.294 cv
cp
@
215.977 152.774 mo
215.977 153.787 215.154 154.609 214.14 154.609 cv
213.127 154.609 212.304 153.787 212.304 152.774 cv
212.304 151.761 213.127 150.939 214.14 150.939 cv
215.154 150.939 215.977 151.761 215.977 152.774 cv
cp
ef
215.977 152.774 mo
215.977 153.787 215.154 154.609 214.14 154.609 cv
213.127 154.609 212.304 153.787 212.304 152.774 cv
212.304 151.761 213.127 150.939 214.14 150.939 cv
215.154 150.939 215.977 151.761 215.977 152.774 cv
cp
@
226.117 159.734 mo
226.117 160.747 225.294 161.569 224.28 161.569 cv
223.267 161.569 222.444 160.747 222.444 159.734 cv
222.444 158.721 223.267 157.899 224.28 157.899 cv
225.294 157.899 226.117 158.721 226.117 159.734 cv
cp
ef
226.117 159.734 mo
226.117 160.747 225.294 161.569 224.28 161.569 cv
223.267 161.569 222.444 160.747 222.444 159.734 cv
222.444 158.721 223.267 157.899 224.28 157.899 cv
225.294 157.899 226.117 158.721 226.117 159.734 cv
cp
@
242.317 160.034 mo
242.317 161.047 241.494 161.869 240.48 161.869 cv
239.467 161.869 238.644 161.047 238.644 160.034 cv
238.644 159.021 239.467 158.199 240.48 158.199 cv
241.494 158.199 242.317 159.021 242.317 160.034 cv
cp
ef
242.317 160.034 mo
242.317 161.047 241.494 161.869 240.48 161.869 cv
239.467 161.869 238.644 161.047 238.644 160.034 cv
238.644 159.021 239.467 158.199 240.48 158.199 cv
241.494 158.199 242.317 159.021 242.317 160.034 cv
cp
@
256.297 167.894 mo
256.297 168.907 255.474 169.729 254.46 169.729 cv
253.447 169.729 252.624 168.907 252.624 167.894 cv
252.624 166.881 253.447 166.059 254.46 166.059 cv
255.474 166.059 256.297 166.881 256.297 167.894 cv
cp
ef
256.297 167.894 mo
256.297 168.907 255.474 169.729 254.46 169.729 cv
253.447 169.729 252.624 168.907 252.624 167.894 cv
252.624 166.881 253.447 166.059 254.46 166.059 cv
255.474 166.059 256.297 166.881 256.297 167.894 cv
cp
@
263.257 170.954 mo
263.257 171.967 262.434 172.789 261.42 172.789 cv
260.407 172.789 259.584 171.967 259.584 170.954 cv
259.584 169.941 260.407 169.119 261.42 169.119 cv
262.434 169.119 263.257 169.941 263.257 170.954 cv
cp
ef
263.257 170.954 mo
263.257 171.967 262.434 172.789 261.42 172.789 cv
260.407 172.789 259.584 171.967 259.584 170.954 cv
259.584 169.941 260.407 169.119 261.42 169.119 cv
262.434 169.119 263.257 169.941 263.257 170.954 cv
cp
@
grestore
grestore
26.523 104.489 mo
25.766 104.489 26.523 104.489 25.766 104.489 cv
25.766 102.176 25.766 104.489 25.766 102.176 cv
26.523 102.176 25.766 102.176 26.523 102.176 cv
26.523 104.489 26.523 102.176 26.523 104.489 cv
f
30.067 101.342 mo
23.92 101.342 30.067 101.342 23.92 101.342 cv
23.92 100.656 23.92 101.342 23.92 100.656 cv
24.497 100.656 23.92 100.656 24.497 100.656 cv
24.271 100.494 24.102 100.312 23.989 100.108 cv
23.876 99.905 23.819 99.658 23.819 99.368 cv
23.819 98.989 23.917 98.654 24.112 98.365 cv
24.307 98.075 24.583 97.856 24.939 97.708 cv
25.294 97.56 25.684 97.486 26.108 97.486 cv
26.563 97.486 26.972 97.568 27.336 97.731 cv
27.701 97.894 27.98 98.131 28.173 98.442 cv
28.367 98.753 28.464 99.08 28.464 99.423 cv
28.464 99.673 28.411 99.899 28.305 100.098 cv
28.199 100.297 28.065 100.461 27.903 100.589 cv
30.067 100.589 27.903 100.589 30.067 100.589 cv
30.067 101.342 30.067 100.589 30.067 101.342 cv
cp
26.167 100.66 mo
26.739 100.66 27.161 100.545 27.435 100.313 cv
27.708 100.082 27.845 99.802 27.845 99.473 cv
27.845 99.138 27.703 98.852 27.42 98.613 cv
27.137 98.375 26.698 98.256 26.104 98.256 cv
25.538 98.256 25.114 98.372 24.832 98.605 cv
24.55 98.838 24.409 99.116 24.409 99.439 cv
24.409 99.76 24.559 100.044 24.859 100.29 cv
25.159 100.537 25.595 100.66 26.167 100.66 cv
f
31.309 94.599 mo
31.731 94.599 31.309 94.599 31.731 94.599 cv
31.731 96.963 31.731 94.599 31.731 96.963 cv
31.626 96.966 31.524 96.949 31.426 96.912 cv
31.265 96.851 31.106 96.755 30.95 96.622 cv
30.794 96.49 30.613 96.298 30.408 96.048 cv
30.089 95.659 29.837 95.397 29.65 95.26 cv
29.464 95.123 29.288 95.055 29.122 95.055 cv
28.948 95.055 28.801 95.117 28.681 95.242 cv
28.562 95.366 28.502 95.528 28.502 95.728 cv
28.502 95.94 28.565 96.109 28.692 96.236 cv
28.819 96.363 28.995 96.427 29.219 96.429 cv
29.173 96.88 29.219 96.429 29.173 96.88 cv
28.836 96.849 28.579 96.733 28.403 96.531 cv
28.226 96.329 28.138 96.059 28.138 95.719 cv
28.138 95.376 28.233 95.104 28.424 94.904 cv
28.614 94.704 28.85 94.604 29.132 94.604 cv
29.275 94.604 29.415 94.633 29.554 94.692 cv
29.692 94.75 29.838 94.847 29.991 94.983 cv
30.144 95.119 30.354 95.345 30.621 95.66 cv
30.842 95.924 30.992 96.093 31.071 96.168 cv
31.15 96.242 31.229 96.304 31.309 96.353 cv
31.309 94.599 31.309 96.353 31.309 94.599 cv
f
28.469 94.259 mo
22.125 92.482 28.469 94.259 22.125 92.482 cv
22.125 91.88 22.125 92.482 22.125 91.88 cv
28.469 93.653 22.125 91.88 28.469 93.653 cv
28.469 94.259 28.469 93.653 28.469 94.259 cv
f
30.067 91.35 mo
23.92 91.35 30.067 91.35 23.92 91.35 cv
23.92 90.664 23.92 91.35 23.92 90.664 cv
24.497 90.664 23.92 90.664 24.497 90.664 cv
24.271 90.502 24.102 90.32 23.989 90.116 cv
23.876 89.913 23.819 89.666 23.819 89.376 cv
23.819 88.997 23.917 88.662 24.112 88.372 cv
24.307 88.083 24.583 87.864 24.939 87.716 cv
25.294 87.568 25.684 87.494 26.108 87.494 cv
26.563 87.494 26.972 87.576 27.336 87.739 cv
27.701 87.902 27.98 88.139 28.173 88.45 cv
28.367 88.761 28.464 89.088 28.464 89.43 cv
28.464 89.681 28.411 89.907 28.305 90.106 cv
28.199 90.305 28.065 90.469 27.903 90.597 cv
30.067 90.597 27.903 90.597 30.067 90.597 cv
30.067 91.35 30.067 90.597 30.067 91.35 cv
cp
26.167 90.668 mo
26.739 90.668 27.161 90.553 27.435 90.321 cv
27.708 90.09 27.845 89.81 27.845 89.481 cv
27.845 89.146 27.703 88.86 27.42 88.621 cv
27.137 88.383 26.698 88.264 26.104 88.264 cv
25.538 88.264 25.114 88.38 24.832 88.613 cv
24.55 88.846 24.409 89.124 24.409 89.447 cv
24.409 89.768 24.559 90.052 24.859 90.298 cv
25.159 90.545 25.595 90.668 26.167 90.668 cv
f
31.731 85.261 mo
31.731 85.7 31.731 85.261 31.731 85.7 cv
28.931 85.7 31.731 85.7 28.931 85.7 cv
29.032 85.806 29.133 85.944 29.234 86.116 cv
29.335 86.288 29.41 86.442 29.461 86.578 cv
29.036 86.578 29.461 86.578 29.036 86.578 cv
28.92 86.333 28.78 86.118 28.616 85.934 cv
28.452 85.751 28.292 85.62 28.138 85.544 cv
28.138 85.261 28.138 85.544 28.138 85.261 cv
31.731 85.261 28.138 85.261 31.731 85.261 cv
f
147.958 201.418 mo
147.958 195.287 147.958 201.418 147.958 195.287 cv
148.77 195.287 147.958 195.287 148.77 195.287 cv
148.77 200.695 148.77 195.287 148.77 200.695 cv
151.791 200.695 148.77 200.695 151.791 200.695 cv
151.791 201.418 151.791 200.695 151.791 201.418 cv
147.958 201.418 151.791 201.418 147.958 201.418 cv
f
152.411 199.197 mo
152.411 198.375 152.64 197.765 153.097 197.37 cv
153.48 197.041 153.945 196.876 154.495 196.876 cv
155.106 196.876 155.605 197.076 155.993 197.476 cv
156.381 197.876 156.575 198.429 156.575 199.134 cv
156.575 199.706 156.489 200.155 156.318 200.483 cv
156.146 200.81 155.896 201.065 155.568 201.246 cv
155.241 201.427 154.883 201.518 154.495 201.518 cv
153.873 201.518 153.37 201.319 152.986 200.92 cv
152.603 200.521 152.411 199.947 152.411 199.197 cv
cp
153.185 199.197 mo
153.185 199.766 153.309 200.192 153.558 200.475 cv
153.806 200.758 154.118 200.899 154.495 200.899 cv
154.869 200.899 155.18 200.757 155.428 200.472 cv
155.677 200.188 155.801 199.755 155.801 199.172 cv
155.801 198.623 155.676 198.207 155.426 197.924 cv
155.176 197.641 154.866 197.499 154.495 197.499 cv
154.118 197.499 153.806 197.64 153.558 197.922 cv
153.309 198.203 153.185 198.628 153.185 199.197 cv
f
157.185 200.092 mo
157.93 199.975 157.185 200.092 157.93 199.975 cv
157.972 200.273 158.088 200.502 158.279 200.661 cv
158.47 200.82 158.738 200.899 159.081 200.899 cv
159.427 200.899 159.683 200.829 159.851 200.688 cv
160.018 200.547 160.102 200.382 160.102 200.192 cv
160.102 200.022 160.028 199.888 159.88 199.791 cv
159.777 199.724 159.52 199.639 159.11 199.536 cv
158.558 199.396 158.175 199.276 157.961 199.174 cv
157.748 199.072 157.586 198.932 157.476 198.752 cv
157.366 198.572 157.311 198.373 157.311 198.156 cv
157.311 197.958 157.356 197.775 157.447 197.606 cv
157.537 197.437 157.661 197.297 157.817 197.186 cv
157.934 197.099 158.094 197.026 158.296 196.966 cv
158.498 196.906 158.715 196.876 158.947 196.876 cv
159.296 196.876 159.602 196.926 159.865 197.027 cv
160.129 197.127 160.324 197.263 160.449 197.434 cv
160.575 197.606 160.661 197.835 160.709 198.122 cv
159.972 198.223 160.709 198.122 159.972 198.223 cv
159.939 197.994 159.842 197.816 159.681 197.687 cv
159.521 197.559 159.294 197.495 159.001 197.495 cv
158.655 197.495 158.408 197.552 158.26 197.667 cv
158.113 197.781 158.039 197.915 158.039 198.068 cv
158.039 198.166 158.069 198.253 158.131 198.331 cv
158.192 198.412 158.288 198.479 158.42 198.532 cv
158.495 198.56 158.717 198.624 159.085 198.725 cv
159.618 198.867 159.99 198.983 160.2 199.074 cv
160.411 199.164 160.576 199.296 160.696 199.469 cv
160.816 199.642 160.876 199.856 160.876 200.113 cv
160.876 200.364 160.803 200.6 160.656 200.822 cv
160.51 201.043 160.298 201.215 160.022 201.336 cv
159.746 201.457 159.434 201.518 159.085 201.518 cv
158.507 201.518 158.067 201.398 157.765 201.158 cv
157.462 200.919 157.269 200.563 157.185 200.092 cv
f
161.47 200.092 mo
162.215 199.975 161.47 200.092 162.215 199.975 cv
162.257 200.273 162.373 200.502 162.564 200.661 cv
162.755 200.82 163.023 200.899 163.366 200.899 cv
163.712 200.899 163.968 200.829 164.136 200.688 cv
164.303 200.547 164.387 200.382 164.387 200.192 cv
164.387 200.022 164.313 199.888 164.165 199.791 cv
164.062 199.724 163.805 199.639 163.395 199.536 cv
162.843 199.396 162.46 199.276 162.246 199.174 cv
162.033 199.072 161.871 198.932 161.761 198.752 cv
161.651 198.572 161.596 198.373 161.596 198.156 cv
161.596 197.958 161.641 197.775 161.732 197.606 cv
161.822 197.437 161.946 197.297 162.102 197.186 cv
162.219 197.099 162.379 197.026 162.581 196.966 cv
162.783 196.906 163 196.876 163.232 196.876 cv
163.581 196.876 163.887 196.926 164.15 197.027 cv
164.414 197.127 164.609 197.263 164.734 197.434 cv
164.86 197.606 164.946 197.835 164.994 198.122 cv
164.257 198.223 164.994 198.122 164.257 198.223 cv
164.224 197.994 164.127 197.816 163.966 197.687 cv
163.806 197.559 163.579 197.495 163.286 197.495 cv
162.94 197.495 162.693 197.552 162.545 197.667 cv
162.398 197.781 162.324 197.915 162.324 198.068 cv
162.324 198.166 162.354 198.253 162.416 198.331 cv
162.477 198.412 162.573 198.479 162.705 198.532 cv
162.78 198.56 163.002 198.624 163.37 198.725 cv
163.903 198.867 164.275 198.983 164.485 199.074 cv
164.696 199.164 164.861 199.296 164.981 199.469 cv
165.101 199.642 165.161 199.856 165.161 200.113 cv
165.161 200.364 165.088 200.6 164.941 200.822 cv
164.795 201.043 164.583 201.215 164.307 201.336 cv
164.031 201.457 163.719 201.518 163.37 201.518 cv
162.792 201.518 162.352 201.398 162.05 201.158 cv
161.747 200.919 161.554 200.563 161.47 200.092 cv
f
171.304 199.791 mo
172.045 199.887 171.304 199.791 172.045 199.887 cv
171.964 200.397 171.757 200.797 171.423 201.085 cv
171.09 201.374 170.68 201.518 170.195 201.518 cv
169.587 201.518 169.098 201.32 168.728 200.922 cv
168.359 200.525 168.174 199.956 168.174 199.214 cv
168.174 198.734 168.253 198.315 168.412 197.955 cv
168.571 197.596 168.813 197.326 169.138 197.146 cv
169.463 196.966 169.817 196.876 170.199 196.876 cv
170.682 196.876 171.077 196.998 171.384 197.242 cv
171.69 197.486 171.887 197.833 171.974 198.281 cv
171.241 198.394 171.974 198.281 171.241 198.394 cv
171.171 198.096 171.048 197.872 170.871 197.721 cv
170.694 197.57 170.48 197.495 170.229 197.495 cv
169.849 197.495 169.541 197.631 169.304 197.903 cv
169.067 198.175 168.948 198.605 168.948 199.193 cv
168.948 199.79 169.062 200.223 169.291 200.494 cv
169.52 200.764 169.818 200.899 170.187 200.899 cv
170.482 200.899 170.729 200.809 170.927 200.627 cv
171.125 200.446 171.251 200.167 171.304 199.791 cv
f
172.408 199.197 mo
172.408 198.375 172.637 197.765 173.094 197.37 cv
173.477 197.041 173.942 196.876 174.492 196.876 cv
175.103 196.876 175.602 197.076 175.99 197.476 cv
176.378 197.876 176.572 198.429 176.572 199.134 cv
176.572 199.706 176.486 200.155 176.315 200.483 cv
176.143 200.81 175.893 201.065 175.565 201.246 cv
175.238 201.427 174.88 201.518 174.492 201.518 cv
173.87 201.518 173.367 201.319 172.983 200.92 cv
172.6 200.521 172.408 199.947 172.408 199.197 cv
cp
173.182 199.197 mo
173.182 199.766 173.306 200.192 173.555 200.475 cv
173.803 200.758 174.115 200.899 174.492 200.899 cv
174.866 200.899 175.177 200.757 175.425 200.472 cv
175.674 200.188 175.798 199.755 175.798 199.172 cv
175.798 198.623 175.673 198.207 175.423 197.924 cv
175.173 197.641 174.863 197.499 174.492 197.499 cv
174.115 197.499 173.803 197.64 173.555 197.922 cv
173.306 198.203 173.182 198.628 173.182 199.197 cv
f
180.527 199.987 mo
181.305 200.083 180.527 199.987 181.305 200.083 cv
181.183 200.538 180.955 200.89 180.623 201.141 cv
180.291 201.392 179.867 201.518 179.351 201.518 cv
178.701 201.518 178.186 201.318 177.805 200.917 cv
177.424 200.517 177.234 199.956 177.234 199.234 cv
177.234 198.487 177.426 197.907 177.811 197.495 cv
178.196 197.082 178.695 196.876 179.309 196.876 cv
179.903 196.876 180.389 197.078 180.766 197.482 cv
181.142 197.886 181.33 198.455 181.33 199.188 cv
181.33 199.233 181.329 199.3 181.326 199.389 cv
178.012 199.389 181.326 199.389 178.012 199.389 cv
178.04 199.877 178.178 200.25 178.426 200.51 cv
178.675 200.769 178.984 200.899 179.355 200.899 cv
179.631 200.899 179.867 200.826 180.063 200.681 cv
180.258 200.536 180.413 200.305 180.527 199.987 cv
cp
178.054 198.77 mo
180.535 198.77 178.054 198.77 180.535 198.77 cv
180.502 198.397 180.407 198.116 180.251 197.93 cv
180.011 197.64 179.7 197.495 179.318 197.495 cv
178.972 197.495 178.681 197.61 178.445 197.842 cv
178.209 198.073 178.079 198.383 178.054 198.77 cv
f
182.46 201.418 mo
182.46 197.562 182.46 201.418 182.46 197.562 cv
181.795 197.562 182.46 197.562 181.795 197.562 cv
181.795 196.977 181.795 197.562 181.795 196.977 cv
182.46 196.977 181.795 196.977 182.46 196.977 cv
182.46 196.504 182.46 196.977 182.46 196.504 cv
182.46 196.206 182.486 195.984 182.539 195.839 cv
182.612 195.644 182.74 195.486 182.922 195.365 cv
183.105 195.243 183.361 195.183 183.69 195.183 cv
183.902 195.183 184.137 195.208 184.393 195.258 cv
184.28 195.915 184.393 195.258 184.28 195.915 cv
184.124 195.887 183.976 195.873 183.837 195.873 cv
183.608 195.873 183.446 195.922 183.351 196.019 cv
183.256 196.117 183.209 196.299 183.209 196.567 cv
183.209 196.977 183.209 196.567 183.209 196.977 cv
184.075 196.977 183.209 196.977 184.075 196.977 cv
184.075 197.562 184.075 196.977 184.075 197.562 cv
183.209 197.562 184.075 197.562 183.209 197.562 cv
183.209 201.418 183.209 197.562 183.209 201.418 cv
182.46 201.418 183.209 201.418 182.46 201.418 cv
f
184.908 201.418 mo
184.908 197.562 184.908 201.418 184.908 197.562 cv
184.243 197.562 184.908 197.562 184.243 197.562 cv
184.243 196.977 184.243 197.562 184.243 196.977 cv
184.908 196.977 184.243 196.977 184.908 196.977 cv
184.908 196.504 184.908 196.977 184.908 196.504 cv
184.908 196.206 184.935 195.984 184.988 195.839 cv
185.06 195.644 185.188 195.486 185.37 195.365 cv
185.553 195.243 185.809 195.183 186.138 195.183 cv
186.35 195.183 186.585 195.208 186.841 195.258 cv
186.728 195.915 186.841 195.258 186.728 195.915 cv
186.572 195.887 186.424 195.873 186.285 195.873 cv
186.056 195.873 185.894 195.922 185.799 196.019 cv
185.704 196.117 185.657 196.299 185.657 196.567 cv
185.657 196.977 185.657 196.567 185.657 196.977 cv
186.523 196.977 185.657 196.977 186.523 196.977 cv
186.523 197.562 186.523 196.977 186.523 197.562 cv
185.657 197.562 186.523 197.562 185.657 197.562 cv
185.657 201.418 185.657 197.562 185.657 201.418 cv
184.908 201.418 185.657 201.418 184.908 201.418 cv
f
187.181 196.153 mo
187.181 195.287 187.181 196.153 187.181 195.287 cv
187.934 195.287 187.181 195.287 187.934 195.287 cv
187.934 196.153 187.934 195.287 187.934 196.153 cv
187.181 196.153 187.934 196.153 187.181 196.153 cv
cp
187.181 201.418 mo
187.181 196.977 187.181 201.418 187.181 196.977 cv
187.934 196.977 187.181 196.977 187.934 196.977 cv
187.934 201.418 187.934 196.977 187.934 201.418 cv
187.181 201.418 187.934 201.418 187.181 201.418 cv
f
192.016 199.791 mo
192.757 199.887 192.016 199.791 192.757 199.887 cv
192.676 200.397 192.469 200.797 192.135 201.085 cv
191.802 201.374 191.392 201.518 190.907 201.518 cv
190.299 201.518 189.81 201.32 189.44 200.922 cv
189.071 200.525 188.886 199.956 188.886 199.214 cv
188.886 198.734 188.965 198.315 189.124 197.955 cv
189.283 197.596 189.525 197.326 189.85 197.146 cv
190.175 196.966 190.529 196.876 190.911 196.876 cv
191.394 196.876 191.789 196.998 192.096 197.242 cv
192.402 197.486 192.599 197.833 192.686 198.281 cv
191.953 198.394 192.686 198.281 191.953 198.394 cv
191.883 198.096 191.76 197.872 191.583 197.721 cv
191.406 197.57 191.192 197.495 190.941 197.495 cv
190.561 197.495 190.253 197.631 190.016 197.903 cv
189.779 198.175 189.66 198.605 189.66 199.193 cv
189.66 199.79 189.774 200.223 190.003 200.494 cv
190.232 200.764 190.53 200.899 190.899 200.899 cv
191.194 200.899 191.441 200.809 191.639 200.627 cv
191.837 200.446 191.963 200.167 192.016 199.791 cv
f
193.405 196.153 mo
193.405 195.287 193.405 196.153 193.405 195.287 cv
194.158 195.287 193.405 195.287 194.158 195.287 cv
194.158 196.153 194.158 195.287 194.158 196.153 cv
193.405 196.153 194.158 196.153 193.405 196.153 cv
cp
193.405 201.418 mo
193.405 196.977 193.405 201.418 193.405 196.977 cv
194.158 196.977 193.405 196.977 194.158 196.977 cv
194.158 201.418 194.158 196.977 194.158 201.418 cv
193.405 201.418 194.158 201.418 193.405 201.418 cv
f
198.382 199.987 mo
199.16 200.083 198.382 199.987 199.16 200.083 cv
199.038 200.538 198.81 200.89 198.478 201.141 cv
198.146 201.392 197.722 201.518 197.206 201.518 cv
196.556 201.518 196.041 201.318 195.66 200.917 cv
195.279 200.517 195.089 199.956 195.089 199.234 cv
195.089 198.487 195.281 197.907 195.666 197.495 cv
196.051 197.082 196.55 196.876 197.164 196.876 cv
197.758 196.876 198.244 197.078 198.621 197.482 cv
198.997 197.886 199.185 198.455 199.185 199.188 cv
199.185 199.233 199.184 199.3 199.181 199.389 cv
195.867 199.389 199.181 199.389 195.867 199.389 cv
195.895 199.877 196.033 200.25 196.281 200.51 cv
196.53 200.769 196.839 200.899 197.21 200.899 cv
197.486 200.899 197.722 200.826 197.917 200.681 cv
198.113 200.536 198.268 200.305 198.382 199.987 cv
cp
195.909 198.77 mo
198.39 198.77 195.909 198.77 198.39 198.77 cv
198.357 198.397 198.262 198.116 198.106 197.93 cv
197.866 197.64 197.555 197.495 197.173 197.495 cv
196.827 197.495 196.536 197.61 196.3 197.842 cv
196.064 198.073 195.934 198.383 195.909 198.77 cv
f
200.135 201.418 mo
200.135 196.977 200.135 201.418 200.135 196.977 cv
200.813 196.977 200.135 196.977 200.813 196.977 cv
200.813 197.608 200.813 196.977 200.813 197.608 cv
201.139 197.12 201.611 196.876 202.227 196.876 cv
202.495 196.876 202.741 196.925 202.966 197.021 cv
203.191 197.117 203.359 197.243 203.47 197.399 cv
203.582 197.555 203.66 197.741 203.705 197.955 cv
203.733 198.095 203.746 198.339 203.746 198.687 cv
203.746 201.418 203.746 198.687 203.746 201.418 cv
202.993 201.418 203.746 201.418 202.993 201.418 cv
202.993 198.717 202.993 201.418 202.993 198.717 cv
202.993 198.41 202.964 198.181 202.905 198.029 cv
202.847 197.877 202.743 197.755 202.594 197.665 cv
202.444 197.574 202.269 197.529 202.068 197.529 cv
201.748 197.529 201.471 197.631 201.238 197.834 cv
201.005 198.038 200.888 198.424 200.888 198.993 cv
200.888 201.418 200.888 198.993 200.888 201.418 cv
200.135 201.418 200.888 201.418 200.135 201.418 cv
f
206.575 200.744 mo
206.684 201.409 206.575 200.744 206.684 201.409 cv
206.472 201.454 206.282 201.476 206.115 201.476 cv
205.841 201.476 205.629 201.433 205.479 201.346 cv
205.328 201.26 205.222 201.146 205.161 201.005 cv
205.099 200.865 205.068 200.568 205.068 200.117 cv
205.068 197.562 205.068 200.117 205.068 197.562 cv
204.516 197.562 205.068 197.562 204.516 197.562 cv
204.516 196.976 204.516 197.562 204.516 196.976 cv
205.068 196.976 204.516 196.976 205.068 196.976 cv
205.068 195.876 205.068 196.976 205.068 195.876 cv
205.818 195.425 205.068 195.876 205.818 195.425 cv
205.818 196.976 205.818 195.425 205.818 196.976 cv
206.575 196.976 205.818 196.976 206.575 196.976 cv
206.575 197.562 206.575 196.976 206.575 197.562 cv
205.818 197.562 206.575 197.562 205.818 197.562 cv
205.818 200.159 205.818 197.562 205.818 200.159 cv
205.818 200.373 205.831 200.511 205.857 200.573 cv
205.884 200.634 205.927 200.683 205.987 200.719 cv
206.047 200.755 206.133 200.773 206.244 200.773 cv
206.328 200.773 206.438 200.764 206.575 200.744 cv
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.29 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
