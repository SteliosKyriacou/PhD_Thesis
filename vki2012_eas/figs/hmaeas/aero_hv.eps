%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADP39E.tmp.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Kampolis Ioannis
%%CreationDate: 14/2/2009, 11:39:45 μμ
%%BoundingBox: 0 0 275 205
%%HiResBoundingBox: 0 0 274.1741 204.0821
%%CropBox: 0 0 274.1741 204.0821
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: 
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	1 index dup/ID get exch/Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.30 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.30 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.30 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get ne dup
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
				if
				end
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} (% &end XMP packet& %) ReadBypdfmark_5
<?xpacket begin='ο»Ώ' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="Acrobat Distiller 8.0.0 (Windows)"
   xap:CreatorTool="OriginLab Corporation"
   xap:ModifyDate="2009-02-14T23:39:23+02:00"
   xap:CreateDate="2009-02-14T23:39:23+02:00"
   dc:format="application/pdf"
   xapMM:DocumentID="uuid:e8513223-96e3-4499-b794-4b374a0f0859"
   xapMM:InstanceID="uuid:c13e6fc0-7167-4210-baf5-31cb2f616d20">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">C:Documents and SettingsKampolis IoannisDesktopaero_hv.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
<< /0 
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]

/CSA add_res
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -204.082 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
7.62939e-6 0 mo
7.62939e-6 204.082 li
274.174 204.082 li
274.174 0 li
cp
clp
[1 0 0 1 -26.412 0 ]ct
.204 lw
1 lc
1 lj
10 ml
[] 0 dsh
false sadj
84.174 179.1 mo
84.174 3.12003 li
false sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.75294 .75294 .75294 colr
@
130.597 179.1 mo
130.597 3.12003 li
@
177.02 179.1 mo
177.02 3.12003 li
@
223.443 179.1 mo
223.443 3.12003 li
@
269.866 179.1 mo
269.866 3.12003 li
@
60.91 161.461 mo
293.129 161.461 li
@
60.91 126.285 mo
293.129 126.285 li
@
60.91 91.109 mo
293.129 91.109 li
@
60.91 55.933 mo
293.129 55.933 li
@
60.91 20.757 mo
293.129 20.757 li
@
.306 lw
107.335 179.1 mo
107.335 3.12003 li
@
153.758 179.1 mo
153.758 3.12003 li
@
200.283 179.1 mo
200.283 3.12003 li
@
246.706 179.1 mo
246.706 3.12003 li
@
60.91 143.924 mo
293.129 143.924 li
@
60.91 108.748 mo
293.129 108.748 li
@
60.91 73.47 mo
293.129 73.47 li
@
60.91 38.294 mo
293.129 38.294 li
@
59.265 187.934 mo
59.265 187.339 59.326 186.859 59.449 186.496 cv
59.572 186.133 59.754 185.853 59.995 185.657 cv
60.237 185.46 60.541 185.361 60.908 185.361 cv
61.179 185.361 61.416 185.415 61.62 185.524 cv
61.824 185.633 61.992 185.79 62.125 185.995 cv
62.258 186.2 62.362 186.449 62.438 186.744 cv
62.513 187.038 62.551 187.435 62.551 187.934 cv
62.551 188.525 62.491 189.002 62.369 189.365 cv
62.248 189.728 62.066 190.008 61.824 190.206 cv
61.582 190.404 61.277 190.503 60.908 190.503 cv
60.422 190.503 60.041 190.329 59.763 189.981 cv
59.431 189.562 59.265 188.88 59.265 187.934 cv
cp
59.901 187.934 mo
59.901 188.761 59.998 189.311 60.191 189.585 cv
60.385 189.858 60.624 189.995 60.908 189.995 cv
61.192 189.995 61.431 189.858 61.625 189.583 cv
61.818 189.308 61.915 188.758 61.915 187.934 cv
61.915 187.105 61.818 186.554 61.625 186.282 cv
61.431 186.009 61.19 185.873 60.901 185.873 cv
60.617 185.873 60.39 185.993 60.221 186.234 cv
60.008 186.54 59.901 187.107 59.901 187.934 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
105.063 189.823 mo
105.063 190.417 105.063 189.823 105.063 190.417 cv
101.732 190.417 105.063 190.417 101.732 190.417 cv
101.727 190.268 101.752 190.125 101.804 189.988 cv
101.889 189.761 102.025 189.538 102.212 189.318 cv
102.398 189.098 102.668 188.844 103.021 188.555 cv
103.569 188.107 103.939 187.751 104.131 187.489 cv
104.324 187.227 104.42 186.979 104.42 186.745 cv
104.42 186.5 104.333 186.293 104.157 186.125 cv
103.982 185.957 103.753 185.873 103.471 185.873 cv
103.174 185.873 102.935 185.962 102.756 186.141 cv
102.578 186.319 102.487 186.566 102.485 186.883 cv
101.849 186.817 102.485 186.883 101.849 186.817 cv
101.892 186.343 102.056 185.982 102.34 185.733 cv
102.625 185.485 103.006 185.361 103.485 185.361 cv
103.969 185.361 104.351 185.495 104.633 185.763 cv
104.915 186.031 105.056 186.363 105.056 186.759 cv
105.056 186.96 105.015 187.158 104.932 187.353 cv
104.85 187.548 104.713 187.753 104.522 187.968 cv
104.33 188.183 104.012 188.479 103.568 188.854 cv
103.196 189.166 102.958 189.377 102.853 189.488 cv
102.747 189.599 102.66 189.711 102.591 189.823 cv
105.063 189.823 102.591 189.823 105.063 189.823 cv
f
105.689 187.934 mo
105.689 187.339 105.75 186.859 105.873 186.496 cv
105.996 186.133 106.178 185.853 106.419 185.657 cv
106.661 185.46 106.965 185.361 107.332 185.361 cv
107.603 185.361 107.84 185.415 108.044 185.524 cv
108.248 185.633 108.416 185.79 108.549 185.995 cv
108.682 186.2 108.786 186.449 108.862 186.744 cv
108.937 187.038 108.975 187.435 108.975 187.934 cv
108.975 188.525 108.915 189.002 108.793 189.365 cv
108.672 189.728 108.49 190.008 108.248 190.206 cv
108.006 190.404 107.701 190.503 107.332 190.503 cv
106.846 190.503 106.465 190.329 106.187 189.981 cv
105.855 189.562 105.689 188.88 105.689 187.934 cv
cp
106.325 187.934 mo
106.325 188.761 106.422 189.311 106.615 189.585 cv
106.809 189.858 107.048 189.995 107.332 189.995 cv
107.616 189.995 107.855 189.858 108.049 189.583 cv
108.242 189.308 108.339 188.758 108.339 187.934 cv
108.339 187.105 108.242 186.554 108.049 186.282 cv
107.855 186.009 107.614 185.873 107.325 185.873 cv
107.041 185.873 106.814 185.993 106.645 186.234 cv
106.431 186.54 106.325 187.107 106.325 187.934 cv
f
109.566 187.934 mo
109.566 187.339 109.627 186.859 109.75 186.496 cv
109.873 186.133 110.055 185.853 110.296 185.657 cv
110.538 185.46 110.842 185.361 111.209 185.361 cv
111.48 185.361 111.717 185.415 111.921 185.524 cv
112.125 185.633 112.293 185.79 112.426 185.995 cv
112.559 186.2 112.663 186.449 112.739 186.744 cv
112.814 187.038 112.852 187.435 112.852 187.934 cv
112.852 188.525 112.792 189.002 112.67 189.365 cv
112.549 189.728 112.367 190.008 112.125 190.206 cv
111.883 190.404 111.578 190.503 111.209 190.503 cv
110.723 190.503 110.342 190.329 110.064 189.981 cv
109.732 189.562 109.566 188.88 109.566 187.934 cv
cp
110.202 187.934 mo
110.202 188.761 110.299 189.311 110.492 189.585 cv
110.686 189.858 110.925 189.995 111.209 189.995 cv
111.493 189.995 111.732 189.858 111.926 189.583 cv
112.119 189.308 112.216 188.758 112.216 187.934 cv
112.216 187.105 112.119 186.554 111.926 186.282 cv
111.732 186.009 111.491 185.873 111.202 185.873 cv
110.918 185.873 110.691 185.993 110.522 186.234 cv
110.308 186.54 110.202 187.107 110.202 187.934 cv
f
150.218 190.417 mo
150.218 189.211 150.218 190.417 150.218 189.211 cv
148.032 189.211 150.218 189.211 148.032 189.211 cv
148.032 188.644 148.032 189.211 148.032 188.644 cv
150.331 185.381 148.032 188.644 150.331 185.381 cv
150.837 185.381 150.331 185.381 150.837 185.381 cv
150.837 188.644 150.837 185.381 150.837 188.644 cv
151.517 188.644 150.837 188.644 151.517 188.644 cv
151.517 189.211 151.517 188.644 151.517 189.211 cv
150.837 189.211 151.517 189.211 150.837 189.211 cv
150.837 190.417 150.837 189.211 150.837 190.417 cv
150.218 190.417 150.837 190.417 150.218 190.417 cv
cp
150.218 188.644 mo
150.218 186.374 150.218 188.644 150.218 186.374 cv
148.64 188.644 150.218 186.374 148.64 188.644 cv
150.218 188.644 148.64 188.644 150.218 188.644 cv
f
152.112 187.934 mo
152.112 187.339 152.173 186.859 152.296 186.496 cv
152.419 186.133 152.601 185.853 152.842 185.657 cv
153.084 185.46 153.388 185.361 153.755 185.361 cv
154.026 185.361 154.263 185.415 154.467 185.524 cv
154.671 185.633 154.839 185.79 154.972 185.995 cv
155.105 186.2 155.209 186.449 155.285 186.744 cv
155.36 187.038 155.398 187.435 155.398 187.934 cv
155.398 188.525 155.338 189.002 155.216 189.365 cv
155.095 189.728 154.913 190.008 154.671 190.206 cv
154.429 190.404 154.124 190.503 153.755 190.503 cv
153.269 190.503 152.888 190.329 152.61 189.981 cv
152.278 189.562 152.112 188.88 152.112 187.934 cv
cp
152.748 187.934 mo
152.748 188.761 152.845 189.311 153.038 189.585 cv
153.232 189.858 153.471 189.995 153.755 189.995 cv
154.039 189.995 154.278 189.858 154.472 189.583 cv
154.665 189.308 154.762 188.758 154.762 187.934 cv
154.762 187.105 154.665 186.554 154.472 186.282 cv
154.278 186.009 154.037 185.873 153.748 185.873 cv
153.464 185.873 153.237 185.993 153.068 186.234 cv
152.855 186.54 152.748 187.107 152.748 187.934 cv
f
155.989 187.934 mo
155.989 187.339 156.05 186.859 156.173 186.496 cv
156.296 186.133 156.478 185.853 156.719 185.657 cv
156.961 185.46 157.265 185.361 157.632 185.361 cv
157.903 185.361 158.14 185.415 158.344 185.524 cv
158.548 185.633 158.716 185.79 158.849 185.995 cv
158.982 186.2 159.086 186.449 159.162 186.744 cv
159.237 187.038 159.275 187.435 159.275 187.934 cv
159.275 188.525 159.215 189.002 159.093 189.365 cv
158.972 189.728 158.79 190.008 158.548 190.206 cv
158.306 190.404 158.001 190.503 157.632 190.503 cv
157.146 190.503 156.765 190.329 156.487 189.981 cv
156.155 189.562 155.989 188.88 155.989 187.934 cv
cp
156.625 187.934 mo
156.625 188.761 156.722 189.311 156.915 189.585 cv
157.109 189.858 157.348 189.995 157.632 189.995 cv
157.916 189.995 158.155 189.858 158.349 189.583 cv
158.542 189.308 158.639 188.758 158.639 187.934 cv
158.639 187.105 158.542 186.554 158.349 186.282 cv
158.155 186.009 157.914 185.873 157.625 185.873 cv
157.341 185.873 157.114 185.993 156.945 186.234 cv
156.731 186.54 156.625 187.107 156.625 187.934 cv
f
197.971 186.614 mo
197.356 186.662 197.971 186.614 197.356 186.662 cv
197.301 186.419 197.223 186.243 197.122 186.133 cv
196.955 185.957 196.748 185.869 196.503 185.869 cv
196.306 185.869 196.133 185.924 195.984 186.033 cv
195.789 186.175 195.636 186.383 195.523 186.655 cv
195.411 186.928 195.353 187.316 195.348 187.82 cv
195.497 187.593 195.679 187.425 195.895 187.315 cv
196.11 187.205 196.336 187.15 196.572 187.15 cv
196.984 187.15 197.336 187.302 197.626 187.605 cv
197.915 187.908 198.06 188.301 198.06 188.782 cv
198.06 189.098 197.992 189.391 197.856 189.663 cv
197.719 189.934 197.532 190.142 197.294 190.286 cv
197.055 190.43 196.785 190.503 196.483 190.503 cv
195.967 190.503 195.546 190.313 195.221 189.934 cv
194.896 189.555 194.733 188.93 194.733 188.06 cv
194.733 187.087 194.913 186.379 195.273 185.937 cv
195.586 185.553 196.009 185.36 196.541 185.36 cv
196.937 185.36 197.262 185.471 197.516 185.693 cv
197.769 185.916 197.921 186.222 197.971 186.614 cv
cp
195.444 188.785 mo
195.444 188.998 195.49 189.202 195.58 189.396 cv
195.671 189.591 195.797 189.739 195.96 189.841 cv
196.123 189.943 196.293 189.994 196.472 189.994 cv
196.733 189.994 196.958 189.889 197.146 189.678 cv
197.334 189.467 197.428 189.181 197.428 188.819 cv
197.428 188.471 197.335 188.197 197.149 187.997 cv
196.964 187.796 196.73 187.696 196.448 187.696 cv
196.169 187.696 195.931 187.796 195.737 187.997 cv
195.542 188.197 195.444 188.46 195.444 188.785 cv
f
198.638 187.934 mo
198.638 187.339 198.699 186.859 198.822 186.496 cv
198.945 186.133 199.127 185.853 199.368 185.657 cv
199.61 185.46 199.914 185.361 200.281 185.361 cv
200.552 185.361 200.789 185.415 200.993 185.524 cv
201.197 185.633 201.365 185.79 201.498 185.995 cv
201.631 186.2 201.735 186.449 201.811 186.744 cv
201.886 187.038 201.924 187.435 201.924 187.934 cv
201.924 188.525 201.864 189.002 201.742 189.365 cv
201.621 189.728 201.439 190.008 201.197 190.206 cv
200.955 190.404 200.65 190.503 200.281 190.503 cv
199.795 190.503 199.414 190.329 199.136 189.981 cv
198.804 189.562 198.638 188.88 198.638 187.934 cv
cp
199.274 187.934 mo
199.274 188.761 199.371 189.311 199.564 189.585 cv
199.758 189.858 199.997 189.995 200.281 189.995 cv
200.565 189.995 200.804 189.858 200.998 189.583 cv
201.191 189.308 201.288 188.758 201.288 187.934 cv
201.288 187.105 201.191 186.554 200.998 186.282 cv
200.804 186.009 200.563 185.873 200.274 185.873 cv
199.99 185.873 199.763 185.993 199.594 186.234 cv
199.381 186.54 199.274 187.107 199.274 187.934 cv
f
202.515 187.934 mo
202.515 187.339 202.576 186.859 202.699 186.496 cv
202.822 186.133 203.004 185.853 203.245 185.657 cv
203.487 185.46 203.791 185.361 204.158 185.361 cv
204.429 185.361 204.666 185.415 204.87 185.524 cv
205.074 185.633 205.242 185.79 205.375 185.995 cv
205.508 186.2 205.612 186.449 205.688 186.744 cv
205.763 187.038 205.801 187.435 205.801 187.934 cv
205.801 188.525 205.741 189.002 205.619 189.365 cv
205.498 189.728 205.316 190.008 205.074 190.206 cv
204.832 190.404 204.527 190.503 204.158 190.503 cv
203.672 190.503 203.291 190.329 203.013 189.981 cv
202.681 189.562 202.515 188.88 202.515 187.934 cv
cp
203.151 187.934 mo
203.151 188.761 203.248 189.311 203.441 189.585 cv
203.635 189.858 203.874 189.995 204.158 189.995 cv
204.442 189.995 204.681 189.858 204.875 189.583 cv
205.068 189.308 205.165 188.758 205.165 187.934 cv
205.165 187.105 205.068 186.554 204.875 186.282 cv
204.681 186.009 204.44 185.873 204.151 185.873 cv
203.867 185.873 203.64 185.993 203.471 186.234 cv
203.257 186.54 203.151 187.107 203.151 187.934 cv
f
242.136 187.686 mo
241.879 187.592 241.689 187.458 241.565 187.284 cv
241.442 187.11 241.38 186.902 241.38 186.659 cv
241.38 186.292 241.511 185.984 241.775 185.735 cv
242.039 185.485 242.389 185.36 242.827 185.36 cv
243.267 185.36 243.621 185.488 243.889 185.743 cv
244.157 185.999 244.291 186.31 244.291 186.676 cv
244.291 186.91 244.23 187.113 244.107 187.286 cv
243.985 187.459 243.799 187.592 243.549 187.686 cv
243.858 187.787 244.094 187.949 244.255 188.174 cv
244.417 188.398 244.498 188.666 244.498 188.978 cv
244.498 189.408 244.345 189.77 244.04 190.063 cv
243.736 190.356 243.335 190.503 242.837 190.503 cv
242.34 190.503 241.939 190.356 241.634 190.061 cv
241.329 189.767 241.177 189.4 241.177 188.96 cv
241.177 188.633 241.26 188.359 241.426 188.138 cv
241.592 187.917 241.829 187.766 242.136 187.686 cv
cp
242.012 186.638 mo
242.012 186.876 242.089 187.071 242.243 187.222 cv
242.396 187.373 242.595 187.449 242.841 187.449 cv
243.079 187.449 243.274 187.374 243.427 187.224 cv
243.579 187.074 243.655 186.89 243.655 186.673 cv
243.655 186.446 243.577 186.255 243.42 186.101 cv
243.263 185.946 243.068 185.869 242.834 185.869 cv
242.598 185.869 242.402 185.944 242.246 186.096 cv
242.09 186.247 242.012 186.428 242.012 186.638 cv
cp
241.813 188.964 mo
241.813 189.14 241.855 189.311 241.938 189.476 cv
242.022 189.641 242.146 189.768 242.311 189.859 cv
242.476 189.949 242.654 189.994 242.844 189.994 cv
243.14 189.994 243.384 189.899 243.576 189.709 cv
243.769 189.519 243.865 189.278 243.865 188.984 cv
243.865 188.687 243.766 188.441 243.568 188.246 cv
243.369 188.051 243.121 187.954 242.824 187.954 cv
242.532 187.954 242.291 188.05 242.1 188.242 cv
241.909 188.435 241.813 188.675 241.813 188.964 cv
f
245.061 187.934 mo
245.061 187.339 245.122 186.859 245.245 186.496 cv
245.368 186.133 245.55 185.853 245.791 185.657 cv
246.033 185.46 246.337 185.361 246.704 185.361 cv
246.975 185.361 247.212 185.415 247.416 185.524 cv
247.62 185.633 247.788 185.79 247.921 185.995 cv
248.054 186.2 248.158 186.449 248.234 186.744 cv
248.309 187.038 248.347 187.435 248.347 187.934 cv
248.347 188.525 248.287 189.002 248.165 189.365 cv
248.044 189.728 247.862 190.008 247.62 190.206 cv
247.378 190.404 247.073 190.503 246.704 190.503 cv
246.218 190.503 245.837 190.329 245.559 189.981 cv
245.227 189.562 245.061 188.88 245.061 187.934 cv
cp
245.697 187.934 mo
245.697 188.761 245.794 189.311 245.987 189.585 cv
246.181 189.858 246.42 189.995 246.704 189.995 cv
246.988 189.995 247.227 189.858 247.421 189.583 cv
247.614 189.308 247.711 188.758 247.711 187.934 cv
247.711 187.105 247.614 186.554 247.421 186.282 cv
247.227 186.009 246.986 185.873 246.697 185.873 cv
246.413 185.873 246.186 185.993 246.017 186.234 cv
245.804 186.54 245.697 187.107 245.697 187.934 cv
f
248.938 187.934 mo
248.938 187.339 248.999 186.859 249.122 186.496 cv
249.245 186.133 249.427 185.853 249.668 185.657 cv
249.91 185.46 250.214 185.361 250.581 185.361 cv
250.852 185.361 251.089 185.415 251.293 185.524 cv
251.497 185.633 251.665 185.79 251.798 185.995 cv
251.931 186.2 252.035 186.449 252.111 186.744 cv
252.186 187.038 252.224 187.435 252.224 187.934 cv
252.224 188.525 252.164 189.002 252.042 189.365 cv
251.921 189.728 251.739 190.008 251.497 190.206 cv
251.255 190.404 250.95 190.503 250.581 190.503 cv
250.095 190.503 249.714 190.329 249.436 189.981 cv
249.104 189.562 248.938 188.88 248.938 187.934 cv
cp
249.574 187.934 mo
249.574 188.761 249.671 189.311 249.864 189.585 cv
250.058 189.858 250.297 189.995 250.581 189.995 cv
250.865 189.995 251.104 189.858 251.298 189.583 cv
251.491 189.308 251.588 188.758 251.588 187.934 cv
251.588 187.105 251.491 186.554 251.298 186.282 cv
251.104 186.009 250.863 185.873 250.574 185.873 cv
250.29 185.873 250.063 185.993 249.894 186.234 cv
249.681 186.54 249.574 187.107 249.574 187.934 cv
f
287.999 190.417 mo
287.38 190.417 287.999 190.417 287.38 190.417 cv
287.38 186.477 287.38 190.417 287.38 186.477 cv
287.231 186.619 287.036 186.761 286.794 186.903 cv
286.552 187.045 286.335 187.151 286.143 187.222 cv
286.143 186.625 286.143 187.222 286.143 186.625 cv
286.489 186.462 286.791 186.265 287.05 186.034 cv
287.309 185.803 287.493 185.578 287.6 185.361 cv
287.999 185.361 287.6 185.361 287.999 185.361 cv
287.999 190.417 287.999 185.361 287.999 190.417 cv
f
289.546 187.934 mo
289.546 187.339 289.607 186.859 289.73 186.496 cv
289.853 186.133 290.035 185.853 290.276 185.657 cv
290.518 185.46 290.822 185.361 291.189 185.361 cv
291.46 185.361 291.697 185.415 291.901 185.524 cv
292.105 185.633 292.273 185.79 292.406 185.995 cv
292.539 186.2 292.643 186.449 292.719 186.744 cv
292.794 187.038 292.832 187.435 292.832 187.934 cv
292.832 188.525 292.772 189.002 292.65 189.365 cv
292.529 189.728 292.347 190.008 292.105 190.206 cv
291.863 190.404 291.558 190.503 291.189 190.503 cv
290.703 190.503 290.322 190.329 290.044 189.981 cv
289.712 189.562 289.546 188.88 289.546 187.934 cv
cp
290.182 187.934 mo
290.182 188.761 290.279 189.311 290.472 189.585 cv
290.666 189.858 290.905 189.995 291.189 189.995 cv
291.473 189.995 291.712 189.858 291.906 189.583 cv
292.099 189.308 292.196 188.758 292.196 187.934 cv
292.196 187.105 292.099 186.554 291.906 186.282 cv
291.712 186.009 291.471 185.873 291.182 185.873 cv
290.898 185.873 290.671 185.993 290.502 186.234 cv
290.289 186.54 290.182 187.107 290.182 187.934 cv
f
293.423 187.934 mo
293.423 187.339 293.484 186.859 293.607 186.496 cv
293.73 186.133 293.912 185.853 294.153 185.657 cv
294.395 185.46 294.699 185.361 295.066 185.361 cv
295.337 185.361 295.574 185.415 295.778 185.524 cv
295.982 185.633 296.15 185.79 296.283 185.995 cv
296.416 186.2 296.52 186.449 296.596 186.744 cv
296.671 187.038 296.709 187.435 296.709 187.934 cv
296.709 188.525 296.649 189.002 296.527 189.365 cv
296.406 189.728 296.224 190.008 295.982 190.206 cv
295.74 190.404 295.435 190.503 295.066 190.503 cv
294.58 190.503 294.199 190.329 293.921 189.981 cv
293.589 189.562 293.423 188.88 293.423 187.934 cv
cp
294.059 187.934 mo
294.059 188.761 294.156 189.311 294.349 189.585 cv
294.543 189.858 294.782 189.995 295.066 189.995 cv
295.35 189.995 295.589 189.858 295.783 189.583 cv
295.976 189.308 296.073 188.758 296.073 187.934 cv
296.073 187.105 295.976 186.554 295.783 186.282 cv
295.589 186.009 295.348 185.873 295.059 185.873 cv
294.775 185.873 294.548 185.993 294.379 186.234 cv
294.165 186.54 294.059 187.107 294.059 187.934 cv
f
297.3 187.934 mo
297.3 187.339 297.361 186.859 297.484 186.496 cv
297.607 186.133 297.789 185.853 298.03 185.657 cv
298.272 185.46 298.576 185.361 298.943 185.361 cv
299.214 185.361 299.451 185.415 299.655 185.524 cv
299.859 185.633 300.027 185.79 300.16 185.995 cv
300.293 186.2 300.397 186.449 300.473 186.744 cv
300.548 187.038 300.586 187.435 300.586 187.934 cv
300.586 188.525 300.526 189.002 300.404 189.365 cv
300.283 189.728 300.101 190.008 299.859 190.206 cv
299.617 190.404 299.312 190.503 298.943 190.503 cv
298.457 190.503 298.076 190.329 297.798 189.981 cv
297.466 189.562 297.3 188.88 297.3 187.934 cv
cp
297.936 187.934 mo
297.936 188.761 298.033 189.311 298.226 189.585 cv
298.42 189.858 298.659 189.995 298.943 189.995 cv
299.227 189.995 299.466 189.858 299.66 189.583 cv
299.853 189.308 299.95 188.758 299.95 187.934 cv
299.95 187.105 299.853 186.554 299.66 186.282 cv
299.466 186.009 299.225 185.873 298.936 185.873 cv
298.652 185.873 298.425 185.993 298.256 186.234 cv
298.042 186.54 297.936 187.107 297.936 187.934 cv
f
45.695 178.553 mo
45.695 177.958 45.756 177.478 45.879 177.115 cv
46.002 176.752 46.184 176.472 46.425 176.276 cv
46.667 176.079 46.971 175.98 47.338 175.98 cv
47.609 175.98 47.846 176.034 48.05 176.143 cv
48.254 176.252 48.422 176.409 48.555 176.614 cv
48.688 176.819 48.792 177.068 48.868 177.363 cv
48.943 177.657 48.981 178.054 48.981 178.553 cv
48.981 179.144 48.921 179.621 48.799 179.984 cv
48.678 180.347 48.496 180.627 48.254 180.825 cv
48.012 181.023 47.707 181.122 47.338 181.122 cv
46.852 181.122 46.471 180.948 46.193 180.6 cv
45.861 180.181 45.695 179.499 45.695 178.553 cv
cp
46.331 178.553 mo
46.331 179.38 46.428 179.93 46.621 180.204 cv
46.815 180.477 47.054 180.614 47.338 180.614 cv
47.622 180.614 47.861 180.477 48.055 180.202 cv
48.249 179.927 48.345 179.377 48.345 178.553 cv
48.345 177.724 48.249 177.173 48.055 176.901 cv
47.861 176.628 47.62 176.492 47.331 176.492 cv
47.047 176.492 46.82 176.612 46.651 176.853 cv
46.438 177.159 46.331 177.726 46.331 178.553 cv
f
49.906 181.037 mo
49.906 180.333 49.906 181.037 49.906 180.333 cv
50.611 180.333 49.906 180.333 50.611 180.333 cv
50.611 181.037 50.611 180.333 50.611 181.037 cv
50.611 181.296 50.565 181.505 50.473 181.664 cv
50.382 181.823 50.236 181.946 50.037 182.033 cv
49.865 181.769 50.037 182.033 49.865 181.769 cv
49.995 181.711 50.092 181.627 50.154 181.516 cv
50.215 181.405 50.25 181.245 50.257 181.037 cv
49.906 181.037 50.257 181.037 49.906 181.037 cv
f
54.763 180.443 mo
54.763 181.037 54.763 180.443 54.763 181.037 cv
51.432 181.037 54.763 181.037 51.432 181.037 cv
51.427 180.888 51.452 180.745 51.504 180.608 cv
51.589 180.381 51.725 180.158 51.912 179.938 cv
52.098 179.718 52.368 179.464 52.721 179.175 cv
53.269 178.727 53.639 178.371 53.831 178.109 cv
54.024 177.847 54.12 177.599 54.12 177.365 cv
54.12 177.12 54.033 176.913 53.857 176.745 cv
53.682 176.577 53.453 176.493 53.171 176.493 cv
52.874 176.493 52.635 176.582 52.456 176.761 cv
52.278 176.939 52.187 177.186 52.185 177.503 cv
51.549 177.437 52.185 177.503 51.549 177.437 cv
51.592 176.963 51.756 176.602 52.04 176.353 cv
52.325 176.105 52.706 175.981 53.185 175.981 cv
53.669 175.981 54.051 176.115 54.333 176.383 cv
54.615 176.651 54.756 176.983 54.756 177.379 cv
54.756 177.58 54.715 177.778 54.632 177.973 cv
54.55 178.168 54.413 178.373 54.222 178.588 cv
54.03 178.803 53.712 179.099 53.268 179.474 cv
52.896 179.786 52.658 179.997 52.553 180.108 cv
52.447 180.219 52.36 180.331 52.291 180.443 cv
54.763 180.443 52.291 180.443 54.763 180.443 cv
f
45.695 143.378 mo
45.695 142.783 45.756 142.303 45.879 141.94 cv
46.002 141.577 46.184 141.297 46.425 141.101 cv
46.667 140.904 46.971 140.805 47.338 140.805 cv
47.609 140.805 47.846 140.859 48.05 140.968 cv
48.254 141.077 48.422 141.234 48.555 141.439 cv
48.688 141.644 48.792 141.893 48.868 142.188 cv
48.943 142.482 48.981 142.879 48.981 143.378 cv
48.981 143.969 48.921 144.446 48.799 144.809 cv
48.678 145.172 48.496 145.452 48.254 145.65 cv
48.012 145.848 47.707 145.947 47.338 145.947 cv
46.852 145.947 46.471 145.773 46.193 145.425 cv
45.861 145.006 45.695 144.324 45.695 143.378 cv
cp
46.331 143.378 mo
46.331 144.205 46.428 144.755 46.621 145.029 cv
46.815 145.302 47.054 145.439 47.338 145.439 cv
47.622 145.439 47.861 145.302 48.055 145.027 cv
48.249 144.752 48.345 144.202 48.345 143.378 cv
48.345 142.549 48.249 141.998 48.055 141.726 cv
47.861 141.453 47.62 141.317 47.331 141.317 cv
47.047 141.317 46.82 141.437 46.651 141.678 cv
46.438 141.984 46.331 142.551 46.331 143.378 cv
f
49.906 145.861 mo
49.906 145.157 49.906 145.861 49.906 145.157 cv
50.611 145.157 49.906 145.157 50.611 145.157 cv
50.611 145.861 50.611 145.157 50.611 145.861 cv
50.611 146.12 50.565 146.329 50.473 146.488 cv
50.382 146.647 50.236 146.77 50.037 146.857 cv
49.865 146.593 50.037 146.857 49.865 146.593 cv
49.995 146.535 50.092 146.451 50.154 146.34 cv
50.215 146.229 50.25 146.069 50.257 145.861 cv
49.906 145.861 50.257 145.861 49.906 145.861 cv
f
51.514 144.532 mo
52.133 144.45 51.514 144.532 52.133 144.45 cv
52.204 144.8 52.325 145.052 52.495 145.207 cv
52.666 145.362 52.874 145.439 53.119 145.439 cv
53.41 145.439 53.656 145.338 53.857 145.137 cv
54.057 144.935 54.157 144.685 54.157 144.388 cv
54.157 144.104 54.065 143.87 53.879 143.685 cv
53.693 143.501 53.457 143.409 53.171 143.409 cv
53.054 143.409 52.909 143.432 52.734 143.477 cv
52.803 142.935 52.734 143.477 52.803 142.935 cv
52.844 142.939 52.878 142.942 52.903 142.942 cv
53.166 142.942 53.404 142.873 53.614 142.735 cv
53.825 142.598 53.931 142.386 53.931 142.1 cv
53.931 141.873 53.854 141.685 53.7 141.537 cv
53.547 141.388 53.348 141.313 53.106 141.313 cv
52.865 141.313 52.664 141.389 52.504 141.54 cv
52.344 141.691 52.24 141.918 52.195 142.22 cv
51.576 142.11 52.195 142.22 51.576 142.11 cv
51.651 141.696 51.823 141.375 52.091 141.147 cv
52.36 140.919 52.693 140.805 53.092 140.805 cv
53.367 140.805 53.62 140.864 53.852 140.982 cv
54.083 141.1 54.26 141.261 54.383 141.464 cv
54.505 141.668 54.567 141.885 54.567 142.114 cv
54.567 142.331 54.508 142.529 54.391 142.708 cv
54.274 142.887 54.101 143.029 53.872 143.134 cv
54.17 143.203 54.402 143.345 54.567 143.562 cv
54.732 143.778 54.814 144.049 54.814 144.374 cv
54.814 144.814 54.654 145.186 54.333 145.492 cv
54.012 145.798 53.606 145.951 53.116 145.951 cv
52.674 145.951 52.306 145.819 52.014 145.556 cv
51.722 145.292 51.555 144.951 51.514 144.532 cv
f
45.695 108.202 mo
45.695 107.607 45.756 107.127 45.879 106.764 cv
46.002 106.401 46.184 106.121 46.425 105.925 cv
46.667 105.728 46.971 105.629 47.338 105.629 cv
47.609 105.629 47.846 105.683 48.05 105.792 cv
48.254 105.901 48.422 106.058 48.555 106.263 cv
48.688 106.468 48.792 106.717 48.868 107.012 cv
48.943 107.306 48.981 107.703 48.981 108.202 cv
48.981 108.793 48.921 109.27 48.799 109.633 cv
48.678 109.996 48.496 110.276 48.254 110.474 cv
48.012 110.672 47.707 110.771 47.338 110.771 cv
46.852 110.771 46.471 110.597 46.193 110.249 cv
45.861 109.83 45.695 109.148 45.695 108.202 cv
cp
46.331 108.202 mo
46.331 109.029 46.428 109.579 46.621 109.853 cv
46.815 110.126 47.054 110.263 47.338 110.263 cv
47.622 110.263 47.861 110.126 48.055 109.851 cv
48.249 109.576 48.345 109.026 48.345 108.202 cv
48.345 107.373 48.249 106.822 48.055 106.55 cv
47.861 106.277 47.62 106.141 47.331 106.141 cv
47.047 106.141 46.82 106.261 46.651 106.502 cv
46.438 106.808 46.331 107.375 46.331 108.202 cv
f
49.906 110.686 mo
49.906 109.982 49.906 110.686 49.906 109.982 cv
50.611 109.982 49.906 109.982 50.611 109.982 cv
50.611 110.686 50.611 109.982 50.611 110.686 cv
50.611 110.945 50.565 111.154 50.473 111.313 cv
50.382 111.472 50.236 111.595 50.037 111.682 cv
49.865 111.418 50.037 111.682 49.865 111.418 cv
49.995 111.36 50.092 111.276 50.154 111.165 cv
50.215 111.054 50.25 110.894 50.257 110.686 cv
49.906 110.686 50.257 110.686 49.906 110.686 cv
f
53.494 110.686 mo
53.494 109.48 53.494 110.686 53.494 109.48 cv
51.308 109.48 53.494 109.48 51.308 109.48 cv
51.308 108.913 51.308 109.48 51.308 108.913 cv
53.607 105.65 51.308 108.913 53.607 105.65 cv
54.113 105.65 53.607 105.65 54.113 105.65 cv
54.113 108.913 54.113 105.65 54.113 108.913 cv
54.793 108.913 54.113 108.913 54.793 108.913 cv
54.793 109.48 54.793 108.913 54.793 109.48 cv
54.113 109.48 54.793 109.48 54.113 109.48 cv
54.113 110.686 54.113 109.48 54.113 110.686 cv
53.494 110.686 54.113 110.686 53.494 110.686 cv
cp
53.494 108.913 mo
53.494 106.643 53.494 108.913 53.494 106.643 cv
51.916 108.913 53.494 106.643 51.916 108.913 cv
53.494 108.913 51.916 108.913 53.494 108.913 cv
f
45.695 72.925 mo
45.695 72.33 45.756 71.85 45.879 71.487 cv
46.002 71.124 46.184 70.844 46.425 70.648 cv
46.667 70.451 46.971 70.352 47.338 70.352 cv
47.609 70.352 47.846 70.406 48.05 70.515 cv
48.254 70.624 48.422 70.781 48.555 70.986 cv
48.688 71.191 48.792 71.44 48.868 71.735 cv
48.943 72.029 48.981 72.426 48.981 72.925 cv
48.981 73.516 48.921 73.993 48.799 74.356 cv
48.678 74.719 48.496 74.999 48.254 75.197 cv
48.012 75.395 47.707 75.494 47.338 75.494 cv
46.852 75.494 46.471 75.32 46.193 74.972 cv
45.861 74.553 45.695 73.871 45.695 72.925 cv
cp
46.331 72.925 mo
46.331 73.752 46.428 74.302 46.621 74.576 cv
46.815 74.849 47.054 74.986 47.338 74.986 cv
47.622 74.986 47.861 74.849 48.055 74.574 cv
48.249 74.299 48.345 73.749 48.345 72.925 cv
48.345 72.096 48.249 71.545 48.055 71.273 cv
47.861 71 47.62 70.864 47.331 70.864 cv
47.047 70.864 46.82 70.984 46.651 71.225 cv
46.438 71.531 46.331 72.098 46.331 72.925 cv
f
49.906 75.408 mo
49.906 74.704 49.906 75.408 49.906 74.704 cv
50.611 74.704 49.906 74.704 50.611 74.704 cv
50.611 75.408 50.611 74.704 50.611 75.408 cv
50.611 75.667 50.565 75.876 50.473 76.035 cv
50.382 76.194 50.236 76.317 50.037 76.404 cv
49.865 76.14 50.037 76.404 49.865 76.14 cv
49.995 76.082 50.092 75.998 50.154 75.887 cv
50.215 75.776 50.25 75.616 50.257 75.408 cv
49.906 75.408 50.257 75.408 49.906 75.408 cv
f
51.511 74.089 mo
52.161 74.034 51.511 74.089 52.161 74.034 cv
52.209 74.35 52.321 74.588 52.496 74.747 cv
52.671 74.906 52.883 74.986 53.13 74.986 cv
53.428 74.986 53.68 74.873 53.886 74.649 cv
54.093 74.425 54.196 74.127 54.196 73.756 cv
54.196 73.403 54.097 73.125 53.898 72.921 cv
53.7 72.717 53.441 72.615 53.12 72.615 cv
52.92 72.615 52.741 72.661 52.58 72.751 cv
52.42 72.841 52.294 72.959 52.202 73.103 cv
51.621 73.028 52.202 73.103 51.621 73.028 cv
52.109 70.441 51.621 73.028 52.109 70.441 cv
54.615 70.441 52.109 70.441 54.615 70.441 cv
54.615 71.032 54.615 70.441 54.615 71.032 cv
52.604 71.032 54.615 71.032 52.604 71.032 cv
52.333 72.385 52.604 71.032 52.333 72.385 cv
52.635 72.175 52.952 72.069 53.285 72.069 cv
53.725 72.069 54.096 72.221 54.399 72.526 cv
54.701 72.831 54.852 73.222 54.852 73.701 cv
54.852 74.157 54.719 74.55 54.454 74.883 cv
54.13 75.29 53.689 75.494 53.13 75.494 cv
52.672 75.494 52.298 75.366 52.008 75.109 cv
51.718 74.853 51.552 74.513 51.511 74.089 cv
f
45.695 37.749 mo
45.695 37.154 45.756 36.674 45.879 36.311 cv
46.002 35.948 46.184 35.668 46.425 35.472 cv
46.667 35.275 46.971 35.176 47.338 35.176 cv
47.609 35.176 47.846 35.23 48.05 35.339 cv
48.254 35.448 48.422 35.605 48.555 35.81 cv
48.688 36.015 48.792 36.264 48.868 36.559 cv
48.943 36.853 48.981 37.25 48.981 37.749 cv
48.981 38.34 48.921 38.817 48.799 39.18 cv
48.678 39.543 48.496 39.823 48.254 40.021 cv
48.012 40.219 47.707 40.318 47.338 40.318 cv
46.852 40.318 46.471 40.144 46.193 39.796 cv
45.861 39.377 45.695 38.695 45.695 37.749 cv
cp
46.331 37.749 mo
46.331 38.576 46.428 39.126 46.621 39.4 cv
46.815 39.673 47.054 39.81 47.338 39.81 cv
47.622 39.81 47.861 39.673 48.055 39.398 cv
48.249 39.123 48.345 38.573 48.345 37.749 cv
48.345 36.92 48.249 36.369 48.055 36.097 cv
47.861 35.824 47.62 35.688 47.331 35.688 cv
47.047 35.688 46.82 35.808 46.651 36.049 cv
46.438 36.355 46.331 36.922 46.331 37.749 cv
f
49.906 40.232 mo
49.906 39.528 49.906 40.232 49.906 39.528 cv
50.611 39.528 49.906 39.528 50.611 39.528 cv
50.611 40.232 50.611 39.528 50.611 40.232 cv
50.611 40.491 50.565 40.7 50.473 40.859 cv
50.382 41.018 50.236 41.141 50.037 41.228 cv
49.865 40.964 50.037 41.228 49.865 40.964 cv
49.995 40.906 50.092 40.822 50.154 40.711 cv
50.215 40.6 50.25 40.44 50.257 40.232 cv
49.906 40.232 50.257 40.232 49.906 40.232 cv
f
54.722 36.43 mo
54.107 36.478 54.722 36.43 54.107 36.478 cv
54.052 36.235 53.974 36.059 53.873 35.949 cv
53.706 35.773 53.499 35.685 53.254 35.685 cv
53.057 35.685 52.884 35.74 52.735 35.849 cv
52.54 35.991 52.387 36.199 52.275 36.471 cv
52.162 36.744 52.104 37.132 52.099 37.636 cv
52.248 37.409 52.43 37.241 52.646 37.131 cv
52.861 37.021 53.087 36.966 53.323 36.966 cv
53.735 36.966 54.087 37.118 54.377 37.421 cv
54.666 37.724 54.811 38.117 54.811 38.598 cv
54.811 38.914 54.743 39.207 54.607 39.479 cv
54.47 39.75 54.283 39.958 54.045 40.102 cv
53.807 40.246 53.536 40.319 53.234 40.319 cv
52.718 40.319 52.297 40.129 51.972 39.75 cv
51.647 39.371 51.484 38.746 51.484 37.876 cv
51.484 36.903 51.664 36.195 52.024 35.753 cv
52.337 35.369 52.76 35.176 53.292 35.176 cv
53.688 35.176 54.013 35.287 54.267 35.509 cv
54.52 35.732 54.672 36.038 54.722 36.43 cv
cp
52.195 38.601 mo
52.195 38.814 52.241 39.018 52.331 39.212 cv
52.422 39.407 52.548 39.555 52.711 39.657 cv
52.874 39.759 53.044 39.81 53.223 39.81 cv
53.484 39.81 53.709 39.705 53.897 39.494 cv
54.085 39.283 54.179 38.997 54.179 38.635 cv
54.179 38.287 54.086 38.013 53.9 37.813 cv
53.715 37.612 53.481 37.512 53.199 37.512 cv
52.92 37.512 52.682 37.612 52.488 37.813 cv
52.293 38.013 52.195 38.276 52.195 38.601 cv
f
45.695 2.57301 mo
45.695 1.97801 45.756 1.49802 45.879 1.13501 cv
46.002 .772018 46.184 .49202 46.425 .296021 cv
46.667 .0990143 46.971 1.52588e-5 47.338 1.52588e-5 cv
47.609 1.52588e-5 47.846 .0540161 48.05 .16301 cv
48.254 .272018 48.422 .429016 48.555 .634018 cv
48.688 .83902 48.792 1.08801 48.868 1.38301 cv
48.943 1.67702 48.981 2.07402 48.981 2.57301 cv
48.981 3.16402 48.921 3.64101 48.799 4.00401 cv
48.678 4.36702 48.496 4.64702 48.254 4.84502 cv
48.012 5.04301 47.707 5.14201 47.338 5.14201 cv
46.852 5.14201 46.471 4.96802 46.193 4.62001 cv
45.861 4.20102 45.695 3.51901 45.695 2.57301 cv
cp
46.331 2.57301 mo
46.331 3.40001 46.428 3.95001 46.621 4.22401 cv
46.815 4.49701 47.054 4.63402 47.338 4.63402 cv
47.622 4.63402 47.861 4.49701 48.055 4.22202 cv
48.249 3.94701 48.345 3.39702 48.345 2.57301 cv
48.345 1.74402 48.249 1.19301 48.055 .921021 cv
47.861 .64801 47.62 .512009 47.331 .512009 cv
47.047 .512009 46.82 .632019 46.651 .873016 cv
46.438 1.17902 46.331 1.74602 46.331 2.57301 cv
f
49.906 5.05702 mo
49.906 4.35303 49.906 5.05702 49.906 4.35303 cv
50.611 4.35303 49.906 4.35303 50.611 4.35303 cv
50.611 5.05702 50.611 4.35303 50.611 5.05702 cv
50.611 5.31602 50.565 5.52502 50.473 5.68402 cv
50.382 5.84302 50.236 5.96602 50.037 6.05302 cv
49.865 5.78902 50.037 6.05302 49.865 5.78902 cv
49.995 5.73102 50.092 5.64702 50.154 5.53603 cv
50.215 5.42502 50.25 5.26501 50.257 5.05702 cv
49.906 5.05702 50.257 5.05702 49.906 5.05702 cv
f
51.552 .680023 mo
51.552 .0860291 51.552 .680023 51.552 .0860291 cv
54.814 .0860291 51.552 .0860291 54.814 .0860291 cv
54.814 .567017 54.814 .0860291 54.814 .567017 cv
54.493 .90802 54.175 1.36102 53.86 1.92702 cv
53.545 2.49303 53.302 3.07402 53.13 3.67203 cv
53.006 4.09302 52.927 4.55502 52.893 5.05603 cv
52.257 5.05603 52.893 5.05603 52.257 5.05603 cv
52.264 4.66002 52.341 4.18202 52.49 3.62003 cv
52.639 3.05902 52.853 2.51802 53.132 1.99702 cv
53.41 1.47603 53.706 1.03702 54.02 .680023 cv
51.552 .680023 54.02 .680023 51.552 .680023 cv
f
.714 lw
60.912 182.566 mo
60.912 179.099 li
@
84.175 180.833 mo
84.175 179.1 li
@
107.336 182.566 mo
107.336 179.099 li
@
130.599 180.833 mo
130.599 179.1 li
@
153.76 182.566 mo
153.76 179.099 li
@
177.023 180.833 mo
177.023 179.1 li
@
200.286 182.566 mo
200.286 179.099 li
@
223.447 180.833 mo
223.447 179.1 li
@
246.71 182.566 mo
246.71 179.099 li
@
269.871 180.833 mo
269.871 179.1 li
@
293.134 182.566 mo
293.134 179.099 li
@
60.915 179.099 mo
293.134 179.099 li
@
60.915 3.11902 mo
293.134 3.11902 li
@
57.446 179.099 mo
60.915 179.099 li
@
59.18 161.46 mo
60.915 161.46 li
@
57.446 143.923 mo
60.915 143.923 li
@
59.18 126.284 mo
60.915 126.284 li
@
57.446 108.747 mo
60.915 108.747 li
@
59.18 91.108 mo
60.915 91.108 li
@
57.446 73.469 mo
60.915 73.469 li
@
59.18 55.932 mo
60.915 55.932 li
@
57.446 38.293 mo
60.915 38.293 li
@
59.18 20.756 mo
60.915 20.756 li
@
57.446 3.117 mo
60.915 3.117 li
@
60.915 179.097 mo
60.915 3.117 li
@
293.134 179.097 mo
293.134 3.117 li
@
gsave
60.912 3.12003 mo
293.233 3.12003 li
293.233 179.202 li
60.912 179.202 li
cp
eclp
gsave
0 -25.324 mo
340.81 -25.324 li
340.81 220.236 li
0 220.236 li
cp
clp
.918 lw
74.89 154.528 mo
74.992 154.018 li
@
76.216 149.838 mo
76.318 149.328 li
@
77.44 145.148 mo
77.644 144.638 li
@
78.766 140.458 mo
78.868 139.948 li
@
80.092 135.768 mo
80.194 135.258 li
@
81.316 131.078 mo
81.52 130.568 li
@
82.642 126.388 mo
82.744 125.878 li
@
83.968 121.698 mo
84.07 121.188 li
@
85.192 117.008 mo
85.396 116.498 li
@
86.518 112.318 mo
86.62 111.808 li
@
87.844 107.628 mo
87.946 107.118 li
@
89.987 103.448 mo
90.497 103.142 li
@
94.68 100.593 mo
95.19 100.287 li
@
99.373 97.738 mo
99.883 97.432 li
@
104.066 95.393 mo
104.576 95.291 li
@
108.759 94.17 mo
109.269 93.966 li
@
113.452 92.845 mo
113.962 92.641 li
@
118.145 90.602 mo
118.655 90.296 li
@
122.838 87.339 mo
123.348 86.931 li
@
127.531 83.974 mo
128.041 83.566 li
@
132.224 81.527 mo
132.734 81.425 li
@
136.917 79.896 mo
137.427 79.794 li
@
141.61 78.367 mo
142.12 78.163 li
@
146.303 76.226 mo
146.813 76.022 li
@
150.996 73.881 mo
151.506 73.575 li
@
155.689 71.536 mo
156.199 71.23 li
@
160.382 69.803 mo
160.892 69.701 li
@
165.075 68.376 mo
165.585 68.274 li
@
169.768 66.949 mo
170.278 66.847 li
@
174.461 66.337 mo
174.971 66.337 li
@
179.154 65.929 mo
179.664 65.827 li
@
183.847 65.521 mo
184.357 65.4189 li
@
188.54 64.297 mo
189.05 64.1949 li
@
193.233 63.073 mo
193.743 62.971 li
@
197.926 61.8499 mo
198.232 61.7479 li
@
63.6549 117.213 mo
63.9609 113.95 li
@
64.4709 109.362 mo
64.8789 106.099 li
@
65.3889 101.511 mo
65.6949 98.2479 li
@
66.2049 93.66 mo
66.2049 93.66 li
66.9189 90.3969 li
@
67.9399 85.8089 mo
68.6539 82.5459 li
@
70.2869 77.9579 mo
71.5109 75.4089 li
71.9189 74.6949 li
@
75.0819 70.9229 mo
76.7139 70.9229 li
78.3469 70.9229 li
@
82.9379 70.9229 mo
84.0599 70.9229 li
84.7749 68.8839 li
@
86.2029 64.2959 mo
86.6109 63.1739 li
88.6519 62.9709 li
@
93.2429 62.1549 mo
93.5489 62.1549 li
94.9779 59.2999 li
@
98.4469 56.8529 mo
98.6509 56.8529 li
101.406 56.6489 li
101.712 56.6489 li
@
106.303 56.1389 mo
107.017 56.0369 li
109.262 55.0169 li
109.568 54.9149 li
@
114.159 52.1629 mo
114.567 51.8569 li
117.118 51.7549 li
117.424 51.6529 li
@
122.015 50.4299 mo
124.26 49.8179 li
125.28 49.4099 li
@
129.871 47.6769 mo
132.116 47.4729 li
133.136 46.8609 li
@
137.727 45.8419 mo
139.666 45.8419 li
140.992 45.8419 li
@
145.583 45.7399 mo
147.215 45.7399 li
148.848 45.6379 li
@
153.439 45.4339 mo
155.071 45.1279 li
156.704 45.1279 li
@
161.295 44.8219 mo
162.927 44.6179 li
164.56 44.6179 li
@
169.151 43.5989 mo
171.09 43.3949 li
172.416 43.3949 li
@
177.007 43.1909 mo
179.456 43.1909 li
180.272 43.1909 li
@
184.863 42.8849 mo
187.516 42.8849 li
188.128 42.8849 li
@
191.495 40.5399 mo
192.923 37.4809 li
193.025 37.3789 li
@
197.617 37.1749 mo
197.923 37.1749 li
200.678 37.0729 li
200.882 37.0729 li
@
205.473 36.9709 mo
206.187 36.9709 li
208.228 36.6649 li
208.738 36.6649 li
@
213.329 35.7479 mo
213.329 35.7479 li
216.084 35.1359 li
216.594 35.1359 li
@
221.185 35.0339 mo
221.389 35.0339 li
224.144 35.0339 li
224.45 35.0339 li
@
229.041 34.7279 mo
229.551 34.7279 li
232 34.7279 li
232.306 34.6259 li
@
236.897 32.4849 mo
237.611 32.3829 li
240.162 32.3829 li
@
244.753 32.2809 mo
245.161 32.2809 li
247.712 31.4649 li
248.018 31.4649 li
@
252.609 31.3629 mo
253.323 31.3629 li
255.772 30.2409 li
255.874 30.1399 li
@
260.465 28.3039 mo
260.873 27.9979 li
263.628 27.2839 li
263.73 27.2839 li
@
268.321 27.1819 mo
268.729 27.1819 li
271.28 27.1819 li
271.586 27.1819 li
@
276.177 27.1819 mo
276.789 27.1819 li
279.442 26.8759 li
@
284.033 26.7739 mo
285.155 26.7739 li
287.298 26.7739 li
@
291.889 26.5699 mo
293.317 26.3659 li
@
63.6489 117.211 mo
66.1999 93.5569 li
68.9549 80.9139 li
71.5049 75.3059 li
74.2599 70.9219 li
75.6879 70.9219 li
77.0149 69.6979 li
78.4429 69.6979 li
79.8719 68.2709 li
81.1979 68.2709 li
82.6259 67.2509 li
84.0549 66.9459 li
88.2379 66.9459 li
89.5639 62.2549 li
90.9929 61.9499 li
95.1759 61.9499 li
96.6049 60.8279 li
97.9309 58.3809 li
99.3589 58.1769 li
104.971 58.1769 li
106.297 57.9729 li
107.726 57.1579 li
109.052 56.6479 li
110.481 56.6479 li
111.909 56.5459 li
114.664 56.5459 li
116.092 55.4239 li
117.419 55.1179 li
118.847 54.4049 li
120.275 54.0989 li
125.785 54.0989 li
127.213 53.6909 li
131.397 53.6909 li
132.825 52.7729 li
134.151 50.0199 li
137.008 50.0199 li
138.335 49.8169 li
139.763 49.8169 li
141.191 49.5109 li
142.518 48.8989 li
143.946 48.4909 li
145.375 48.3889 li
146.701 48.3889 li
148.129 48.1849 li
149.558 48.0829 li
152.313 48.0829 li
153.639 47.7769 li
155.067 47.7769 li
156.496 47.2679 li
159.251 47.2679 li
160.679 46.9619 li
162.005 45.2279 li
163.434 44.4129 li
164.862 41.7619 li
166.189 40.4359 li
167.617 40.3339 li
170.372 40.3339 li
171.8 37.1739 li
173.229 37.1739 li
174.555 32.6879 li
175.984 32.5859 li
177.412 32.5859 li
178.738 31.9739 li
180.167 31.3619 li
185.778 31.3619 li
187.105 30.8519 li
191.288 30.8519 li
192.716 30.4439 li
194.145 30.4439 li
195.471 30.3419 li
196.9 30.1389 li
199.654 30.1389 li
201.083 28.7109 li
203.838 28.7109 li
205.266 28.0989 li
206.592 28.0989 li
208.021 27.8949 li
212.204 27.8949 li
213.632 25.6519 li
214.959 25.6519 li
216.387 25.1429 li
217.816 25.1429 li
219.142 24.9389 li
223.325 24.9389 li
224.754 24.7349 li
226.182 24.7349 li
227.508 22.6959 li
231.692 22.6959 li
235.413 22.4879 239.097 22.1799 242.813 21.9819 cv
244.241 21.9819 li
245.67 21.7779 li
254.036 21.7779 li
255.362 21.1659 li
259.546 21.1659 li
262.403 20.5539 li
266.586 20.5539 li
267.912 20.4529 li
269.341 20.0449 li
270.769 20.0449 li
272.095 19.9429 li
273.524 19.9429 li
274.952 19.8409 li
276.279 19.7389 li
277.707 19.4329 li
281.89 19.4329 li
283.217 19.0249 li
284.645 19.0249 li
286.073 18.7189 li
290.257 18.7189 li
291.583 18.6169 li
294.44 18.6169 li
@
grestore
grestore
32.547 134.776 mo
26.412 134.776 32.547 134.776 26.412 134.776 cv
26.412 133.965 26.412 134.776 26.412 133.965 cv
28.931 133.965 26.412 133.965 28.931 133.965 cv
28.931 130.778 28.931 133.965 28.931 130.778 cv
26.412 130.778 28.931 130.778 26.412 130.778 cv
26.412 129.967 26.412 130.778 26.412 129.967 cv
32.547 129.967 26.412 129.967 32.547 129.967 cv
32.547 130.778 32.547 129.967 32.547 130.778 cv
29.655 130.778 32.547 130.778 29.655 130.778 cv
29.655 133.965 29.655 130.778 29.655 133.965 cv
32.547 133.965 29.655 133.965 32.547 133.965 cv
32.547 134.776 32.547 133.965 32.547 134.776 cv
f
34.259 128.711 mo
33.552 128.795 34.259 128.711 33.552 128.795 cv
33.596 128.63 33.619 128.487 33.619 128.364 cv
33.619 128.197 33.591 128.063 33.535 127.962 cv
33.479 127.862 33.401 127.78 33.301 127.716 cv
33.225 127.668 33.038 127.592 32.74 127.486 cv
32.698 127.472 32.637 127.449 32.556 127.419 cv
28.103 129.104 32.556 127.419 28.103 129.104 cv
28.103 128.293 28.103 129.104 28.103 128.293 cv
30.677 127.369 28.103 128.293 30.677 127.369 cv
31.003 127.249 31.346 127.141 31.706 127.047 cv
31.36 126.96 31.023 126.857 30.694 126.737 cv
28.103 125.788 30.694 126.737 28.103 125.788 cv
28.103 125.035 28.103 125.788 28.103 125.035 cv
32.623 126.725 28.103 125.035 32.623 126.725 cv
33.111 126.906 33.447 127.047 33.631 127.147 cv
33.88 127.281 34.062 127.434 34.177 127.607 cv
34.293 127.78 34.351 127.986 34.351 128.226 cv
34.351 128.371 34.32 128.533 34.259 128.711 cv
f
34.251 124.395 mo
28.104 124.395 34.251 124.395 28.104 124.395 cv
28.104 123.709 28.104 124.395 28.104 123.709 cv
28.681 123.709 28.104 123.709 28.681 123.709 cv
28.455 123.547 28.286 123.365 28.173 123.161 cv
28.06 122.958 28.003 122.711 28.003 122.421 cv
28.003 122.042 28.101 121.707 28.296 121.417 cv
28.491 121.128 28.767 120.909 29.123 120.761 cv
29.478 120.613 29.868 120.539 30.292 120.539 cv
30.747 120.539 31.156 120.621 31.52 120.784 cv
31.885 120.947 32.164 121.184 32.357 121.495 cv
32.551 121.806 32.648 122.133 32.648 122.476 cv
32.648 122.726 32.595 122.952 32.489 123.151 cv
32.383 123.35 32.249 123.514 32.087 123.642 cv
34.251 123.642 32.087 123.642 34.251 123.642 cv
34.251 124.395 34.251 123.642 34.251 124.395 cv
cp
30.351 123.713 mo
30.923 123.713 31.345 123.598 31.619 123.366 cv
31.892 123.135 32.029 122.855 32.029 122.526 cv
32.029 122.191 31.887 121.905 31.604 121.666 cv
31.321 121.428 30.882 121.309 30.288 121.309 cv
29.722 121.309 29.298 121.425 29.016 121.658 cv
28.734 121.891 28.593 122.169 28.593 122.492 cv
28.593 122.813 28.743 123.097 29.043 123.343 cv
29.343 123.59 29.779 123.713 30.351 123.713 cv
f
31.116 116.563 mo
31.212 115.785 31.116 116.563 31.212 115.785 cv
31.667 115.908 32.02 116.135 32.271 116.467 cv
32.522 116.799 32.648 117.222 32.648 117.738 cv
32.648 118.388 32.447 118.903 32.047 119.283 cv
31.647 119.664 31.085 119.854 30.363 119.854 cv
29.615 119.854 29.035 119.662 28.622 119.277 cv
28.209 118.892 28.003 118.393 28.003 117.78 cv
28.003 117.186 28.205 116.701 28.609 116.325 cv
29.014 115.948 29.583 115.76 30.317 115.76 cv
30.361 115.76 30.428 115.761 30.518 115.764 cv
30.518 119.076 30.518 115.764 30.518 119.076 cv
31.006 119.048 31.38 118.91 31.639 118.662 cv
31.899 118.414 32.028 118.105 32.028 117.734 cv
32.028 117.458 31.956 117.222 31.811 117.027 cv
31.666 116.832 31.434 116.677 31.116 116.563 cv
cp
29.898 119.034 mo
29.898 116.555 29.898 119.034 29.898 116.555 cv
29.524 116.588 29.244 116.683 29.057 116.839 cv
28.767 117.079 28.622 117.39 28.622 117.772 cv
28.622 118.117 28.738 118.408 28.969 118.643 cv
29.201 118.879 29.51 119.009 29.898 119.034 cv
f
32.547 114.82 mo
28.103 114.82 32.547 114.82 28.103 114.82 cv
28.103 114.143 28.103 114.82 28.103 114.143 cv
28.776 114.143 28.103 114.143 28.776 114.143 cv
28.461 113.97 28.253 113.81 28.153 113.664 cv
28.052 113.517 28.002 113.356 28.002 113.181 cv
28.002 112.927 28.083 112.669 28.245 112.407 cv
28.944 112.666 28.245 112.407 28.944 112.666 cv
28.835 112.85 28.781 113.034 28.781 113.218 cv
28.781 113.383 28.83 113.531 28.929 113.662 cv
29.028 113.793 29.166 113.886 29.341 113.942 cv
29.609 114.025 29.902 114.067 30.22 114.067 cv
32.547 114.067 30.22 114.067 32.547 114.067 cv
32.547 114.82 32.547 114.067 32.547 114.82 cv
f
32.547 110.723 mo
28.103 112.412 32.547 110.723 28.103 112.412 cv
28.103 111.618 28.103 112.412 28.103 111.618 cv
30.764 110.664 28.103 111.618 30.764 110.664 cv
31.052 110.561 31.35 110.467 31.66 110.38 cv
31.425 110.313 31.144 110.22 30.814 110.1 cv
28.103 109.113 30.814 110.1 28.103 109.113 cv
28.103 108.339 28.103 109.113 28.103 108.339 cv
32.547 110.02 28.103 108.339 32.547 110.02 cv
32.547 110.723 32.547 110.02 32.547 110.723 cv
f
30.325 107.954 mo
29.502 107.954 28.892 107.725 28.496 107.268 cv
28.167 106.886 28.002 106.421 28.002 105.871 cv
28.002 105.261 28.203 104.762 28.603 104.374 cv
29.003 103.987 29.556 103.793 30.262 103.793 cv
30.834 103.793 31.284 103.879 31.612 104.05 cv
31.94 104.222 32.194 104.471 32.376 104.799 cv
32.557 105.126 32.648 105.484 32.648 105.871 cv
32.648 106.493 32.448 106.996 32.049 107.379 cv
31.65 107.762 31.075 107.954 30.325 107.954 cv
cp
30.325 107.18 mo
30.894 107.18 31.32 107.056 31.603 106.808 cv
31.887 106.56 32.028 106.248 32.028 105.871 cv
32.028 105.498 31.886 105.187 31.601 104.939 cv
31.317 104.691 30.883 104.567 30.3 104.567 cv
29.75 104.567 29.334 104.691 29.051 104.941 cv
28.768 105.19 28.626 105.501 28.626 105.871 cv
28.626 106.248 28.767 106.56 29.049 106.808 cv
29.33 107.056 29.756 107.18 30.325 107.18 cv
f
32.547 102.899 mo
26.412 102.899 32.547 102.899 26.412 102.899 cv
26.412 102.146 26.412 102.899 26.412 102.146 cv
32.547 102.146 26.412 102.146 32.547 102.146 cv
32.547 102.899 32.547 102.146 32.547 102.899 cv
f
32.547 98.034 mo
31.894 98.034 32.547 98.034 31.894 98.034 cv
32.396 98.38 32.647 98.849 32.647 99.443 cv
32.647 99.705 32.597 99.95 32.497 100.177 cv
32.396 100.404 32.27 100.573 32.118 100.683 cv
31.966 100.793 31.78 100.871 31.559 100.915 cv
31.412 100.946 31.177 100.961 30.856 100.961 cv
28.103 100.961 30.856 100.961 28.103 100.961 cv
28.103 100.209 28.103 100.961 28.103 100.209 cv
30.568 100.209 28.103 100.209 30.568 100.209 cv
30.961 100.209 31.226 100.193 31.363 100.163 cv
31.561 100.115 31.716 100.015 31.829 99.861 cv
31.942 99.708 31.999 99.519 31.999 99.293 cv
31.999 99.067 31.941 98.855 31.825 98.657 cv
31.709 98.459 31.552 98.319 31.352 98.237 cv
31.153 98.155 30.863 98.113 30.484 98.113 cv
28.103 98.113 30.484 98.113 28.103 98.113 cv
28.103 97.361 28.103 98.113 28.103 97.361 cv
32.547 97.361 28.103 97.361 32.547 97.361 cv
32.547 98.034 32.547 97.361 32.547 98.034 cv
f
32.547 96.153 mo
28.103 96.153 32.547 96.153 28.103 96.153 cv
28.103 95.48 28.103 96.153 28.103 95.48 cv
28.726 95.48 28.103 95.48 28.726 95.48 cv
28.509 95.34 28.334 95.155 28.201 94.924 cv
28.069 94.692 28.002 94.429 28.002 94.133 cv
28.002 93.804 28.071 93.534 28.207 93.324 cv
28.344 93.113 28.535 92.965 28.781 92.879 cv
28.262 92.527 28.002 92.07 28.002 91.507 cv
28.002 91.066 28.124 90.728 28.368 90.491 cv
28.613 90.254 28.989 90.135 29.496 90.135 cv
32.547 90.135 29.496 90.135 32.547 90.135 cv
32.547 90.884 32.547 90.135 32.547 90.884 cv
29.747 90.884 32.547 90.884 29.747 90.884 cv
29.446 90.884 29.229 90.908 29.097 90.957 cv
28.964 91.006 28.857 91.094 28.776 91.223 cv
28.696 91.351 28.655 91.501 28.655 91.674 cv
28.655 91.986 28.759 92.246 28.967 92.452 cv
29.175 92.658 29.507 92.761 29.965 92.761 cv
32.547 92.761 29.965 92.761 32.547 92.761 cv
32.547 93.514 32.547 92.761 32.547 93.514 cv
29.659 93.514 32.547 93.514 29.659 93.514 cv
29.325 93.514 29.074 93.576 28.906 93.698 cv
28.739 93.821 28.655 94.022 28.655 94.3 cv
28.655 94.512 28.711 94.708 28.823 94.888 cv
28.934 95.068 29.097 95.198 29.312 95.279 cv
29.527 95.36 29.837 95.4 30.241 95.4 cv
32.547 95.4 30.241 95.4 32.547 95.4 cv
32.547 96.153 32.547 95.4 32.547 96.153 cv
f
31.116 85.975 mo
31.212 85.197 31.116 85.975 31.212 85.197 cv
31.667 85.32 32.02 85.547 32.271 85.879 cv
32.522 86.211 32.648 86.634 32.648 87.15 cv
32.648 87.8 32.447 88.315 32.047 88.695 cv
31.647 89.076 31.085 89.266 30.363 89.266 cv
29.615 89.266 29.035 89.074 28.622 88.689 cv
28.209 88.304 28.003 87.805 28.003 87.192 cv
28.003 86.598 28.205 86.113 28.609 85.737 cv
29.014 85.36 29.583 85.172 30.317 85.172 cv
30.361 85.172 30.428 85.173 30.518 85.176 cv
30.518 88.488 30.518 85.176 30.518 88.488 cv
31.006 88.46 31.38 88.322 31.639 88.074 cv
31.899 87.826 32.028 87.517 32.028 87.146 cv
32.028 86.87 31.956 86.634 31.811 86.439 cv
31.666 86.244 31.434 86.089 31.116 85.975 cv
cp
29.898 88.446 mo
29.898 85.967 29.898 88.446 29.898 85.967 cv
29.524 86 29.244 86.095 29.057 86.251 cv
28.767 86.491 28.622 86.802 28.622 87.184 cv
28.622 87.529 28.738 87.82 28.969 88.055 cv
29.201 88.291 29.51 88.421 29.898 88.446 cv
f
32.547 81.644 mo
26.412 81.644 32.547 81.644 26.412 81.644 cv
26.412 80.833 26.412 81.644 26.412 80.833 cv
32.547 80.833 26.412 80.833 32.547 80.833 cv
32.547 81.644 32.547 80.833 32.547 81.644 cv
f
32.547 79.533 mo
28.103 79.533 32.547 79.533 28.103 79.533 cv
28.103 78.856 28.103 79.533 28.103 78.856 cv
28.735 78.856 28.103 78.856 28.735 78.856 cv
28.246 78.529 28.002 78.058 28.002 77.442 cv
28.002 77.174 28.05 76.928 28.147 76.704 cv
28.243 76.48 28.369 76.312 28.525 76.2 cv
28.682 76.089 28.867 76.01 29.082 75.966 cv
29.221 75.938 29.466 75.924 29.814 75.924 cv
32.547 75.924 29.814 75.924 32.547 75.924 cv
32.547 76.677 32.547 75.924 32.547 76.677 cv
29.844 76.677 32.547 76.677 29.844 76.677 cv
29.537 76.677 29.307 76.706 29.155 76.765 cv
29.003 76.823 28.882 76.927 28.791 77.076 cv
28.7 77.225 28.655 77.4 28.655 77.601 cv
28.655 77.922 28.757 78.198 28.961 78.431 cv
29.164 78.664 29.551 78.78 30.12 78.78 cv
32.547 78.78 30.12 78.78 32.547 78.78 cv
32.547 79.533 32.547 78.78 32.547 79.533 cv
f
32.547 71.86 mo
31.986 71.86 32.547 71.86 31.986 71.86 cv
32.427 72.142 32.647 72.556 32.647 73.102 cv
32.647 73.456 32.55 73.782 32.354 74.078 cv
32.159 74.375 31.886 74.605 31.536 74.769 cv
31.186 74.932 30.784 75.013 30.329 75.013 cv
29.885 75.013 29.483 74.939 29.122 74.792 cv
28.76 74.644 28.484 74.422 28.291 74.127 cv
28.099 73.831 28.002 73.501 28.002 73.135 cv
28.002 72.868 28.059 72.629 28.172 72.42 cv
28.285 72.211 28.432 72.041 28.613 71.91 cv
26.412 71.91 28.613 71.91 26.412 71.91 cv
26.412 71.162 26.412 71.91 26.412 71.162 cv
32.547 71.162 26.412 71.162 32.547 71.162 cv
32.547 71.86 32.547 71.162 32.547 71.86 cv
cp
30.329 74.239 mo
30.898 74.239 31.324 74.12 31.605 73.88 cv
31.887 73.64 32.028 73.357 32.028 73.031 cv
32.028 72.702 31.893 72.422 31.624 72.192 cv
31.355 71.962 30.944 71.847 30.392 71.847 cv
29.784 71.847 29.337 71.965 29.053 72.199 cv
28.768 72.433 28.626 72.721 28.626 73.064 cv
28.626 73.399 28.763 73.678 29.036 73.903 cv
29.309 74.127 29.74 74.239 30.329 74.239 cv
f
27.279 69.945 mo
26.413 69.945 27.279 69.945 26.413 69.945 cv
26.413 69.192 26.413 69.945 26.413 69.192 cv
27.279 69.192 26.413 69.192 27.279 69.192 cv
27.279 69.945 27.279 69.192 27.279 69.945 cv
cp
32.548 69.945 mo
28.103 69.945 32.548 69.945 28.103 69.945 cv
28.103 69.192 28.103 69.945 28.103 69.192 cv
32.548 69.192 28.103 69.192 32.548 69.192 cv
32.548 69.945 32.548 69.192 32.548 69.945 cv
f
30.919 65.114 mo
31.015 64.374 30.919 65.114 31.015 64.374 cv
31.526 64.455 31.925 64.662 32.214 64.995 cv
32.503 65.328 32.647 65.737 32.647 66.222 cv
32.647 66.83 32.449 67.319 32.051 67.688 cv
31.653 68.057 31.084 68.242 30.342 68.242 cv
29.862 68.242 29.442 68.163 29.082 68.004 cv
28.722 67.845 28.452 67.603 28.272 67.278 cv
28.092 66.953 28.002 66.6 28.002 66.218 cv
28.002 65.736 28.124 65.341 28.368 65.035 cv
28.612 64.728 28.959 64.531 29.408 64.445 cv
29.521 65.177 29.408 64.445 29.521 65.177 cv
29.223 65.246 28.998 65.37 28.847 65.547 cv
28.697 65.724 28.622 65.938 28.622 66.189 cv
28.622 66.568 28.758 66.876 29.03 67.113 cv
29.302 67.35 29.732 67.468 30.321 67.468 cv
30.918 67.468 31.351 67.354 31.622 67.125 cv
31.893 66.897 32.028 66.599 32.028 66.231 cv
32.028 65.935 31.937 65.688 31.756 65.49 cv
31.575 65.292 31.296 65.167 30.919 65.114 cv
f
31.999 60.832 mo
32.236 61.111 32.404 61.379 32.501 61.637 cv
32.599 61.895 32.648 62.172 32.648 62.467 cv
32.648 62.955 32.528 63.33 32.29 63.592 cv
32.051 63.854 31.747 63.985 31.375 63.985 cv
31.158 63.985 30.959 63.936 30.779 63.837 cv
30.599 63.738 30.455 63.608 30.346 63.448 cv
30.237 63.287 30.155 63.107 30.099 62.906 cv
30.06 62.758 30.022 62.535 29.986 62.237 cv
29.914 61.629 29.827 61.182 29.727 60.895 cv
29.623 60.892 29.558 60.891 29.53 60.891 cv
29.223 60.891 29.007 60.962 28.881 61.104 cv
28.711 61.296 28.626 61.582 28.626 61.961 cv
28.626 62.315 28.688 62.577 28.812 62.745 cv
28.936 62.914 29.156 63.039 29.471 63.119 cv
29.371 63.855 29.471 63.119 29.371 63.855 cv
29.056 63.789 28.801 63.678 28.607 63.525 cv
28.413 63.372 28.264 63.15 28.159 62.86 cv
28.055 62.57 28.003 62.234 28.003 61.852 cv
28.003 61.473 28.047 61.165 28.136 60.928 cv
28.226 60.691 28.338 60.517 28.473 60.405 cv
28.609 60.294 28.78 60.216 28.986 60.171 cv
29.114 60.146 29.346 60.134 29.681 60.134 cv
30.685 60.134 29.681 60.134 30.685 60.134 cv
31.385 60.134 31.828 60.118 32.014 60.086 cv
32.199 60.053 32.377 59.99 32.547 59.895 cv
32.547 60.681 32.547 59.895 32.547 60.681 cv
32.391 60.76 32.208 60.81 31.999 60.832 cv
cp
30.317 60.895 mo
30.428 61.168 30.523 61.578 30.601 62.124 cv
30.646 62.434 30.696 62.652 30.752 62.781 cv
30.808 62.909 30.889 63.008 30.997 63.078 cv
31.104 63.147 31.223 63.182 31.355 63.182 cv
31.555 63.182 31.723 63.106 31.857 62.954 cv
31.991 62.802 32.058 62.58 32.058 62.287 cv
32.058 61.997 31.994 61.739 31.867 61.514 cv
31.74 61.288 31.567 61.122 31.346 61.016 cv
31.176 60.935 30.925 60.895 30.593 60.895 cv
30.317 60.895 30.593 60.895 30.317 60.895 cv
f
31.874 57.294 mo
32.539 57.185 31.874 57.294 32.539 57.185 cv
32.584 57.397 32.606 57.587 32.606 57.754 cv
32.606 58.027 32.563 58.239 32.477 58.39 cv
32.39 58.54 32.276 58.646 32.136 58.707 cv
31.995 58.769 31.698 58.799 31.246 58.799 cv
28.689 58.799 31.246 58.799 28.689 58.799 cv
28.689 59.351 28.689 58.799 28.689 59.351 cv
28.103 59.351 28.689 59.351 28.103 59.351 cv
28.103 58.799 28.103 59.351 28.103 58.799 cv
27.003 58.799 28.103 58.799 27.003 58.799 cv
26.551 58.051 27.003 58.799 26.551 58.051 cv
28.103 58.051 26.551 58.051 28.103 58.051 cv
28.103 57.294 28.103 58.051 28.103 57.294 cv
28.689 57.294 28.103 57.294 28.689 57.294 cv
28.689 58.051 28.689 57.294 28.689 58.051 cv
31.288 58.051 28.689 58.051 31.288 58.051 cv
31.503 58.051 31.641 58.038 31.702 58.011 cv
31.764 57.985 31.813 57.941 31.849 57.882 cv
31.885 57.822 31.903 57.736 31.903 57.624 cv
31.903 57.541 31.894 57.431 31.874 57.294 cv
f
30.325 56.873 mo
29.502 56.873 28.892 56.644 28.496 56.187 cv
28.167 55.805 28.002 55.34 28.002 54.79 cv
28.002 54.18 28.203 53.681 28.603 53.293 cv
29.003 52.906 29.556 52.712 30.262 52.712 cv
30.834 52.712 31.284 52.798 31.612 52.969 cv
31.94 53.141 32.194 53.39 32.376 53.718 cv
32.557 54.045 32.648 54.403 32.648 54.79 cv
32.648 55.412 32.448 55.915 32.049 56.298 cv
31.65 56.681 31.075 56.873 30.325 56.873 cv
cp
30.325 56.099 mo
30.894 56.099 31.32 55.975 31.603 55.727 cv
31.887 55.479 32.028 55.167 32.028 54.79 cv
32.028 54.417 31.886 54.106 31.601 53.858 cv
31.317 53.61 30.883 53.486 30.3 53.486 cv
29.75 53.486 29.334 53.61 29.051 53.86 cv
28.768 54.109 28.626 54.42 28.626 54.79 cv
28.626 55.167 28.767 55.479 29.049 55.727 cv
29.33 55.975 29.756 56.099 30.325 56.099 cv
f
32.547 51.809 mo
28.103 51.809 32.547 51.809 28.103 51.809 cv
28.103 51.132 28.103 51.809 28.103 51.132 cv
28.776 51.132 28.103 51.132 28.776 51.132 cv
28.461 50.959 28.253 50.799 28.153 50.653 cv
28.052 50.506 28.002 50.345 28.002 50.17 cv
28.002 49.916 28.083 49.658 28.245 49.396 cv
28.944 49.655 28.245 49.396 28.944 49.655 cv
28.835 49.839 28.781 50.023 28.781 50.207 cv
28.781 50.372 28.83 50.52 28.929 50.651 cv
29.028 50.782 29.166 50.875 29.341 50.931 cv
29.609 51.014 29.902 51.056 30.22 51.056 cv
32.547 51.056 30.22 51.056 32.547 51.056 cv
32.547 51.809 32.547 51.056 32.547 51.809 cv
f
153.695 201.828 mo
154.507 202.033 153.695 201.828 154.507 202.033 cv
154.337 202.699 154.03 203.207 153.588 203.557 cv
153.146 203.907 152.606 204.082 151.967 204.082 cv
151.305 204.082 150.768 203.948 150.353 203.678 cv
149.939 203.409 149.624 203.02 149.408 202.51 cv
149.191 201.999 149.083 201.452 149.083 200.866 cv
149.083 200.228 149.205 199.671 149.45 199.196 cv
149.694 198.72 150.041 198.359 150.492 198.112 cv
150.942 197.866 151.438 197.742 151.979 197.742 cv
152.593 197.742 153.109 197.898 153.528 198.211 cv
153.946 198.523 154.238 198.962 154.402 199.528 cv
153.603 199.716 154.402 199.528 153.603 199.716 cv
153.461 199.27 153.254 198.945 152.984 198.742 cv
152.713 198.538 152.373 198.436 151.962 198.436 cv
151.491 198.436 151.097 198.549 150.78 198.775 cv
150.464 199.001 150.241 199.304 150.113 199.685 cv
149.984 200.065 149.92 200.458 149.92 200.862 cv
149.92 201.383 149.996 201.838 150.148 202.227 cv
150.3 202.616 150.537 202.907 150.858 203.099 cv
151.179 203.292 151.526 203.388 151.9 203.388 cv
152.354 203.388 152.739 203.257 153.055 202.995 cv
153.37 202.733 153.583 202.344 153.695 201.828 cv
f
155.542 203.978 mo
155.542 197.847 155.542 203.978 155.542 197.847 cv
157.856 197.847 155.542 197.847 157.856 197.847 cv
158.264 197.847 158.575 197.867 158.789 197.906 cv
159.091 197.956 159.343 198.052 159.547 198.192 cv
159.751 198.333 159.914 198.53 160.039 198.784 cv
160.163 199.038 160.225 199.317 160.225 199.62 cv
160.225 200.142 160.059 200.583 159.727 200.944 cv
159.395 201.305 158.795 201.486 157.927 201.486 cv
156.354 201.486 157.927 201.486 156.354 201.486 cv
156.354 203.978 156.354 201.486 156.354 203.978 cv
155.542 203.978 156.354 203.978 155.542 203.978 cv
cp
156.354 200.762 mo
157.94 200.762 156.354 200.762 157.94 200.762 cv
158.464 200.762 158.837 200.665 159.057 200.469 cv
159.278 200.274 159.388 200 159.388 199.646 cv
159.388 199.389 159.323 199.17 159.193 198.987 cv
159.064 198.804 158.893 198.684 158.681 198.625 cv
158.544 198.589 158.291 198.571 157.923 198.571 cv
156.354 198.571 157.923 198.571 156.354 198.571 cv
156.354 200.762 156.354 198.571 156.354 200.762 cv
f
165.281 197.847 mo
166.093 197.847 165.281 197.847 166.093 197.847 cv
166.093 201.389 166.093 197.847 166.093 201.389 cv
166.093 202.005 166.023 202.494 165.884 202.857 cv
165.744 203.219 165.492 203.514 165.128 203.741 cv
164.764 203.969 164.286 204.082 163.695 204.082 cv
163.12 204.082 162.65 203.983 162.285 203.785 cv
161.919 203.587 161.658 203.301 161.502 202.926 cv
161.346 202.551 161.268 202.039 161.268 201.389 cv
161.268 197.847 161.268 201.389 161.268 197.847 cv
162.08 197.847 161.268 197.847 162.08 197.847 cv
162.08 201.385 162.08 197.847 162.08 201.385 cv
162.08 201.917 162.129 202.31 162.228 202.562 cv
162.327 202.814 162.497 203.009 162.739 203.145 cv
162.98 203.282 163.275 203.35 163.624 203.35 cv
164.221 203.35 164.646 203.215 164.9 202.945 cv
165.154 202.674 165.281 202.154 165.281 201.385 cv
165.281 197.847 165.281 201.385 165.281 197.847 cv
f
172.63 202.351 mo
173.371 202.447 172.63 202.351 173.371 202.447 cv
173.29 202.957 173.083 203.357 172.749 203.645 cv
172.416 203.934 172.006 204.078 171.521 204.078 cv
170.913 204.078 170.424 203.88 170.054 203.482 cv
169.685 203.085 169.5 202.515 169.5 201.774 cv
169.5 201.294 169.579 200.875 169.738 200.515 cv
169.897 200.156 170.139 199.886 170.464 199.706 cv
170.789 199.526 171.143 199.436 171.525 199.436 cv
172.008 199.436 172.403 199.558 172.709 199.802 cv
173.016 200.046 173.213 200.393 173.3 200.841 cv
172.567 200.954 173.3 200.841 172.567 200.954 cv
172.497 200.656 172.374 200.432 172.197 200.281 cv
172.02 200.13 171.806 200.055 171.554 200.055 cv
171.175 200.055 170.867 200.191 170.63 200.463 cv
170.392 200.735 170.274 201.165 170.274 201.753 cv
170.274 202.35 170.388 202.783 170.617 203.054 cv
170.846 203.324 171.144 203.459 171.513 203.459 cv
171.808 203.459 172.055 203.369 172.253 203.187 cv
172.451 203.006 172.577 202.727 172.63 202.351 cv
f
173.735 201.757 mo
173.735 200.935 173.964 200.325 174.421 199.93 cv
174.804 199.601 175.269 199.436 175.819 199.436 cv
176.43 199.436 176.929 199.636 177.317 200.036 cv
177.705 200.436 177.899 200.989 177.899 201.694 cv
177.899 202.266 177.813 202.715 177.642 203.043 cv
177.47 203.37 177.22 203.625 176.892 203.806 cv
176.565 203.987 176.207 204.078 175.819 204.078 cv
175.197 204.078 174.694 203.879 174.31 203.48 cv
173.927 203.081 173.735 202.507 173.735 201.757 cv
cp
174.509 201.757 mo
174.509 202.326 174.633 202.752 174.882 203.035 cv
175.13 203.318 175.442 203.459 175.819 203.459 cv
176.193 203.459 176.504 203.317 176.752 203.032 cv
177.001 202.748 177.125 202.315 177.125 201.732 cv
177.125 201.183 177 200.767 176.75 200.484 cv
176.5 200.201 176.19 200.059 175.819 200.059 cv
175.442 200.059 175.13 200.2 174.882 200.482 cv
174.633 200.763 174.509 201.188 174.509 201.757 cv
f
178.509 202.652 mo
179.254 202.535 178.509 202.652 179.254 202.535 cv
179.296 202.833 179.412 203.062 179.603 203.221 cv
179.794 203.38 180.062 203.459 180.405 203.459 cv
180.751 203.459 181.007 203.389 181.175 203.248 cv
181.342 203.107 181.426 202.942 181.426 202.752 cv
181.426 202.582 181.352 202.448 181.204 202.351 cv
181.101 202.284 180.844 202.199 180.434 202.096 cv
179.882 201.956 179.499 201.836 179.285 201.734 cv
179.072 201.632 178.91 201.492 178.8 201.312 cv
178.69 201.132 178.635 200.933 178.635 200.716 cv
178.635 200.518 178.68 200.335 178.771 200.166 cv
178.861 199.997 178.985 199.857 179.141 199.746 cv
179.258 199.659 179.418 199.586 179.62 199.526 cv
179.822 199.466 180.039 199.436 180.271 199.436 cv
180.62 199.436 180.926 199.486 181.189 199.587 cv
181.453 199.687 181.648 199.823 181.773 199.994 cv
181.899 200.166 181.985 200.395 182.033 200.682 cv
181.296 200.783 182.033 200.682 181.296 200.783 cv
181.263 200.554 181.166 200.376 181.005 200.247 cv
180.845 200.119 180.618 200.055 180.325 200.055 cv
179.979 200.055 179.732 200.112 179.584 200.226 cv
179.437 200.341 179.363 200.475 179.363 200.628 cv
179.363 200.726 179.393 200.813 179.455 200.891 cv
179.516 200.972 179.612 201.039 179.744 201.092 cv
179.819 201.12 180.041 201.184 180.409 201.285 cv
180.942 201.427 181.314 201.543 181.524 201.634 cv
181.735 201.724 181.9 201.856 182.02 202.029 cv
182.14 202.202 182.2 202.416 182.2 202.673 cv
182.2 202.924 182.127 203.16 181.98 203.382 cv
181.834 203.603 181.622 203.775 181.346 203.896 cv
181.07 204.017 180.758 204.078 180.409 204.078 cv
179.831 204.078 179.391 203.958 179.089 203.718 cv
178.786 203.479 178.593 203.123 178.509 202.652 cv
f
184.741 203.304 mo
184.85 203.969 184.741 203.304 184.85 203.969 cv
184.638 204.014 184.448 204.036 184.281 204.036 cv
184.007 204.036 183.795 203.993 183.645 203.906 cv
183.494 203.82 183.388 203.706 183.327 203.565 cv
183.265 203.425 183.234 203.128 183.234 202.677 cv
183.234 200.122 183.234 202.677 183.234 200.122 cv
182.682 200.122 183.234 200.122 182.682 200.122 cv
182.682 199.536 182.682 200.122 182.682 199.536 cv
183.234 199.536 182.682 199.536 183.234 199.536 cv
183.234 198.436 183.234 199.536 183.234 198.436 cv
183.984 197.985 183.234 198.436 183.984 197.985 cv
183.984 199.536 183.984 197.985 183.984 199.536 cv
184.741 199.536 183.984 199.536 184.741 199.536 cv
184.741 200.122 184.741 199.536 184.741 200.122 cv
183.984 200.122 184.741 200.122 183.984 200.122 cv
183.984 202.719 183.984 200.122 183.984 202.719 cv
183.984 202.933 183.997 203.071 184.023 203.133 cv
184.05 203.194 184.093 203.243 184.153 203.279 cv
184.213 203.315 184.299 203.333 184.41 203.333 cv
184.494 203.333 184.604 203.324 184.741 203.304 cv
f
190.702 203.978 mo
190.702 203.326 190.702 203.978 190.702 203.326 cv
190.356 203.827 189.886 204.078 189.292 204.078 cv
189.029 204.078 188.785 204.028 188.557 203.928 cv
188.33 203.827 188.161 203.701 188.051 203.549 cv
187.941 203.397 187.863 203.211 187.819 202.991 cv
187.788 202.843 187.773 202.609 187.773 202.288 cv
187.773 199.537 187.773 202.288 187.773 199.537 cv
188.526 199.537 187.773 199.537 188.526 199.537 cv
188.526 202 188.526 199.537 188.526 202 cv
188.526 202.393 188.541 202.658 188.572 202.794 cv
188.619 202.992 188.72 203.148 188.873 203.261 cv
189.027 203.374 189.216 203.43 189.442 203.43 cv
189.668 203.43 189.88 203.372 190.078 203.257 cv
190.277 203.141 190.417 202.983 190.499 202.784 cv
190.581 202.585 190.622 202.296 190.622 201.916 cv
190.622 199.537 190.622 201.916 190.622 199.537 cv
191.376 199.537 190.622 199.537 191.376 199.537 cv
191.376 203.978 191.376 199.537 191.376 203.978 cv
190.702 203.978 191.376 203.978 190.702 203.978 cv
f
192.585 203.978 mo
192.585 199.537 192.585 203.978 192.585 199.537 cv
193.263 199.537 192.585 199.537 193.263 199.537 cv
193.263 200.168 193.263 199.537 193.263 200.168 cv
193.589 199.68 194.061 199.436 194.677 199.436 cv
194.945 199.436 195.191 199.485 195.416 199.581 cv
195.641 199.677 195.809 199.803 195.92 199.959 cv
196.032 200.115 196.11 200.301 196.155 200.515 cv
196.183 200.655 196.196 200.899 196.196 201.247 cv
196.196 203.978 196.196 201.247 196.196 203.978 cv
195.443 203.978 196.196 203.978 195.443 203.978 cv
195.443 201.276 195.443 203.978 195.443 201.276 cv
195.443 200.97 195.414 200.741 195.355 200.589 cv
195.297 200.437 195.193 200.315 195.044 200.225 cv
194.894 200.134 194.719 200.089 194.518 200.089 cv
194.198 200.089 193.921 200.191 193.688 200.394 cv
193.455 200.598 193.338 200.984 193.338 201.552 cv
193.338 203.978 193.338 201.552 193.338 203.978 cv
192.585 203.978 193.338 203.978 192.585 203.978 cv
f
197.384 198.713 mo
197.384 197.847 197.384 198.713 197.384 197.847 cv
198.137 197.847 197.384 197.847 198.137 197.847 cv
198.137 198.713 198.137 197.847 198.137 198.713 cv
197.384 198.713 198.137 198.713 197.384 198.713 cv
cp
197.384 203.978 mo
197.384 199.537 197.384 203.978 197.384 199.537 cv
198.137 199.537 197.384 199.537 198.137 199.537 cv
198.137 203.978 198.137 199.537 198.137 203.978 cv
197.384 203.978 198.137 203.978 197.384 203.978 cv
f
200.963 203.304 mo
201.072 203.969 200.963 203.304 201.072 203.969 cv
200.86 204.014 200.67 204.036 200.503 204.036 cv
200.229 204.036 200.017 203.993 199.867 203.906 cv
199.716 203.82 199.61 203.706 199.549 203.565 cv
199.487 203.425 199.456 203.128 199.456 202.677 cv
199.456 200.122 199.456 202.677 199.456 200.122 cv
198.904 200.122 199.456 200.122 198.904 200.122 cv
198.904 199.536 198.904 200.122 198.904 199.536 cv
199.456 199.536 198.904 199.536 199.456 199.536 cv
199.456 198.436 199.456 199.536 199.456 198.436 cv
200.206 197.985 199.456 198.436 200.206 197.985 cv
200.206 199.536 200.206 197.985 200.206 199.536 cv
200.963 199.536 200.206 199.536 200.963 199.536 cv
200.963 200.122 200.963 199.536 200.963 200.122 cv
200.206 200.122 200.963 200.122 200.206 200.122 cv
200.206 202.719 200.206 200.122 200.206 202.719 cv
200.206 202.933 200.219 203.071 200.245 203.133 cv
200.272 203.194 200.315 203.243 200.375 203.279 cv
200.435 203.315 200.521 203.333 200.632 203.333 cv
200.716 203.333 200.826 203.324 200.963 203.304 cv
f
201.364 202.652 mo
202.109 202.535 201.364 202.652 202.109 202.535 cv
202.151 202.833 202.267 203.062 202.458 203.221 cv
202.649 203.38 202.917 203.459 203.26 203.459 cv
203.606 203.459 203.862 203.389 204.03 203.248 cv
204.197 203.107 204.281 202.942 204.281 202.752 cv
204.281 202.582 204.207 202.448 204.059 202.351 cv
203.956 202.284 203.699 202.199 203.289 202.096 cv
202.737 201.956 202.354 201.836 202.14 201.734 cv
201.927 201.632 201.765 201.492 201.655 201.312 cv
201.545 201.132 201.49 200.933 201.49 200.716 cv
201.49 200.518 201.535 200.335 201.626 200.166 cv
201.716 199.997 201.84 199.857 201.996 199.746 cv
202.113 199.659 202.273 199.586 202.475 199.526 cv
202.677 199.466 202.894 199.436 203.126 199.436 cv
203.475 199.436 203.781 199.486 204.044 199.587 cv
204.308 199.687 204.503 199.823 204.628 199.994 cv
204.754 200.166 204.84 200.395 204.888 200.682 cv
204.151 200.783 204.888 200.682 204.151 200.783 cv
204.118 200.554 204.021 200.376 203.86 200.247 cv
203.7 200.119 203.473 200.055 203.18 200.055 cv
202.834 200.055 202.587 200.112 202.44 200.226 cv
202.292 200.341 202.218 200.475 202.218 200.628 cv
202.218 200.726 202.248 200.813 202.31 200.891 cv
202.371 200.972 202.467 201.039 202.599 201.092 cv
202.674 201.12 202.896 201.184 203.264 201.285 cv
203.797 201.427 204.169 201.543 204.379 201.634 cv
204.59 201.724 204.755 201.856 204.875 202.029 cv
204.995 202.202 205.055 202.416 205.055 202.673 cv
205.055 202.924 204.982 203.16 204.835 203.382 cv
204.689 203.603 204.477 203.775 204.201 203.896 cv
203.925 204.017 203.613 204.078 203.264 204.078 cv
202.686 204.078 202.246 203.958 201.944 203.718 cv
201.641 203.479 201.448 203.123 201.364 202.652 cv
f
158.758 140.559 mo
219.466 140.559 li
219.466 108.952 li
158.758 108.952 li
cp
f
156.105 137.909 mo
216.813 137.909 li
216.813 106.302 li
156.105 106.302 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
156.105 106.301 mo
216.813 106.301 li
216.813 137.908 li
156.105 137.908 li
cp
ef
.306 lw
156.105 106.301 mo
216.813 106.301 li
216.813 137.908 li
156.105 137.908 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
.918 lw
157.738 112.011 mo
158.248 112.011 li
@
162.431 112.011 mo
162.941 112.011 li
@
167.124 112.011 mo
167.634 112.011 li
@
171.817 112.011 mo
172.327 112.011 li
@
176.51 112.011 mo
176.816 112.011 li
@
179.944 114.866 mo
179.944 108.735 179.944 114.866 179.944 108.735 cv
184.38 108.735 179.944 108.735 184.38 108.735 cv
184.38 109.459 184.38 108.735 184.38 109.459 cv
180.756 109.459 184.38 109.459 180.756 109.459 cv
180.756 111.336 180.756 109.459 180.756 111.336 cv
184.15 111.336 180.756 111.336 184.15 111.336 cv
184.15 112.056 184.15 111.336 184.15 112.056 cv
180.756 112.056 184.15 112.056 180.756 112.056 cv
180.756 114.143 180.756 112.056 180.756 114.143 cv
184.522 114.143 180.756 114.143 184.522 114.143 cv
184.522 114.866 184.522 114.143 184.522 114.866 cv
179.944 114.866 184.522 114.866 179.944 114.866 cv
f
184.967 114.866 mo
187.323 108.735 184.967 114.866 187.323 108.735 cv
188.198 108.735 187.323 108.735 188.198 108.735 cv
190.709 114.866 188.198 108.735 190.709 114.866 cv
189.784 114.866 190.709 114.866 189.784 114.866 cv
189.068 113.009 189.784 114.866 189.068 113.009 cv
186.503 113.009 189.068 113.009 186.503 113.009 cv
185.829 114.866 186.503 113.009 185.829 114.866 cv
184.967 114.866 185.829 114.866 184.967 114.866 cv
cp
186.737 112.349 mo
188.817 112.349 186.737 112.349 188.817 112.349 cv
188.177 110.651 188.817 112.349 188.177 110.651 cv
187.981 110.135 187.836 109.711 187.742 109.379 cv
187.663 109.772 187.553 110.163 187.411 110.55 cv
186.737 112.349 187.411 110.55 186.737 112.349 cv
f
157.738 122.513 mo
161.003 122.513 li
@
165.594 122.513 mo
168.859 122.513 li
@
173.45 122.513 mo
176.715 122.513 li
@
179.927 125.368 mo
179.927 119.237 179.927 125.368 179.927 119.237 cv
182.04 119.237 179.927 119.237 182.04 119.237 cv
182.517 119.237 182.881 119.267 183.133 119.325 cv
183.484 119.406 183.784 119.552 184.032 119.764 cv
184.356 120.037 184.598 120.387 184.758 120.812 cv
184.919 121.237 184.999 121.723 184.999 122.269 cv
184.999 122.735 184.945 123.147 184.836 123.507 cv
184.727 123.867 184.587 124.164 184.417 124.4 cv
184.247 124.635 184.061 124.821 183.859 124.956 cv
183.656 125.091 183.412 125.194 183.126 125.263 cv
182.84 125.333 182.512 125.368 182.141 125.368 cv
179.927 125.368 182.141 125.368 179.927 125.368 cv
cp
180.739 124.645 mo
182.049 124.645 180.739 124.645 182.049 124.645 cv
182.453 124.645 182.771 124.607 183.001 124.532 cv
183.231 124.456 183.414 124.35 183.551 124.214 cv
183.744 124.021 183.893 123.763 184.001 123.438 cv
184.108 123.113 184.162 122.719 184.162 122.257 cv
184.162 121.615 184.057 121.123 183.846 120.778 cv
183.635 120.434 183.379 120.203 183.078 120.086 cv
182.861 120.003 182.51 119.961 182.028 119.961 cv
180.739 119.961 182.028 119.961 180.739 119.961 cv
180.739 124.645 180.739 119.961 180.739 124.645 cv
f
186.176 125.368 mo
186.176 119.237 186.176 125.368 186.176 119.237 cv
186.988 119.237 186.176 119.237 186.988 119.237 cv
186.988 121.755 186.988 119.237 186.988 121.755 cv
190.177 121.755 186.988 121.755 190.177 121.755 cv
190.177 119.237 190.177 121.755 190.177 119.237 cv
190.989 119.237 190.177 119.237 190.989 119.237 cv
190.989 125.368 190.989 119.237 190.989 125.368 cv
190.177 125.368 190.989 125.368 190.177 125.368 cv
190.177 122.478 190.177 125.368 190.177 122.478 cv
186.988 122.478 190.177 122.478 186.988 122.478 cv
186.988 125.368 186.988 122.478 186.988 125.368 cv
186.176 125.368 186.988 125.368 186.176 125.368 cv
f
192.391 125.368 mo
192.391 119.237 192.391 125.368 192.391 119.237 cv
196.827 119.237 192.391 119.237 196.827 119.237 cv
196.827 119.961 196.827 119.237 196.827 119.961 cv
193.203 119.961 196.827 119.961 193.203 119.961 cv
193.203 121.838 193.203 119.961 193.203 121.838 cv
196.597 121.838 193.203 121.838 196.597 121.838 cv
196.597 122.558 196.597 121.838 196.597 122.558 cv
193.203 122.558 196.597 122.558 193.203 122.558 cv
193.203 124.645 193.203 122.558 193.203 124.645 cv
196.969 124.645 193.203 124.645 196.969 124.645 cv
196.969 125.368 196.969 124.645 196.969 125.368 cv
192.391 125.368 196.969 125.368 192.391 125.368 cv
f
197.415 125.368 mo
199.771 119.237 197.415 125.368 199.771 119.237 cv
200.646 119.237 199.771 119.237 200.646 119.237 cv
203.157 125.368 200.646 119.237 203.157 125.368 cv
202.232 125.368 203.157 125.368 202.232 125.368 cv
201.516 123.511 202.232 125.368 201.516 123.511 cv
198.951 123.511 201.516 123.511 198.951 123.511 cv
198.277 125.368 198.951 123.511 198.277 125.368 cv
197.415 125.368 198.277 125.368 197.415 125.368 cv
cp
199.185 122.851 mo
201.265 122.851 199.185 122.851 201.265 122.851 cv
200.625 121.153 201.265 122.851 200.625 121.153 cv
200.429 120.637 200.284 120.213 200.19 119.881 cv
200.111 120.274 200.001 120.665 199.859 121.052 cv
199.185 122.851 199.859 121.052 199.185 122.851 cv
f
157.738 133.015 mo
176.92 133.015 li
@
179.927 135.869 mo
179.927 129.738 179.927 135.869 179.927 129.738 cv
182.04 129.738 179.927 129.738 182.04 129.738 cv
182.517 129.738 182.881 129.768 183.133 129.826 cv
183.484 129.907 183.784 130.053 184.032 130.265 cv
184.356 130.538 184.598 130.888 184.758 131.313 cv
184.919 131.738 184.999 132.224 184.999 132.77 cv
184.999 133.236 184.945 133.648 184.836 134.008 cv
184.727 134.368 184.587 134.665 184.417 134.901 cv
184.247 135.136 184.061 135.322 183.859 135.457 cv
183.656 135.592 183.412 135.695 183.126 135.764 cv
182.84 135.834 182.512 135.869 182.141 135.869 cv
179.927 135.869 182.141 135.869 179.927 135.869 cv
cp
180.739 135.146 mo
182.049 135.146 180.739 135.146 182.049 135.146 cv
182.453 135.146 182.771 135.108 183.001 135.033 cv
183.231 134.957 183.414 134.851 183.551 134.715 cv
183.744 134.522 183.893 134.264 184.001 133.939 cv
184.108 133.614 184.162 133.22 184.162 132.758 cv
184.162 132.116 184.057 131.624 183.846 131.279 cv
183.635 130.935 183.379 130.704 183.078 130.587 cv
182.861 130.504 182.51 130.462 182.028 130.462 cv
180.739 130.462 182.028 130.462 180.739 130.462 cv
180.739 135.146 180.739 130.462 180.739 135.146 cv
f
186.176 135.869 mo
186.176 129.738 186.176 135.869 186.176 129.738 cv
186.988 129.738 186.176 129.738 186.988 129.738 cv
186.988 132.256 186.988 129.738 186.988 132.256 cv
190.177 132.256 186.988 132.256 190.177 132.256 cv
190.177 129.738 190.177 132.256 190.177 129.738 cv
190.989 129.738 190.177 129.738 190.989 129.738 cv
190.989 135.869 190.989 129.738 190.989 135.869 cv
190.177 135.869 190.989 135.869 190.177 135.869 cv
190.177 132.979 190.177 135.869 190.177 132.979 cv
186.988 132.979 190.177 132.979 186.988 132.979 cv
186.988 135.869 186.988 132.979 186.988 135.869 cv
186.176 135.869 186.988 135.869 186.176 135.869 cv
f
192.35 135.869 mo
192.35 129.738 192.35 135.869 192.35 129.738 cv
193.572 129.738 192.35 129.738 193.572 129.738 cv
195.024 134.079 193.572 129.738 195.024 134.079 cv
195.158 134.483 195.256 134.786 195.317 134.987 cv
195.387 134.764 195.496 134.436 195.643 134.004 cv
197.112 129.738 195.643 134.004 197.112 129.738 cv
198.205 129.738 197.112 129.738 198.205 129.738 cv
198.205 135.869 198.205 129.738 198.205 135.869 cv
197.422 135.869 198.205 135.869 197.422 135.869 cv
197.422 130.738 197.422 135.869 197.422 130.738 cv
195.639 135.869 197.422 130.738 195.639 135.869 cv
194.907 135.869 195.639 135.869 194.907 135.869 cv
193.133 130.65 194.907 135.869 193.133 130.65 cv
193.133 135.869 193.133 130.65 193.133 135.869 cv
192.35 135.869 193.133 135.869 192.35 135.869 cv
f
198.741 135.869 mo
201.097 129.738 198.741 135.869 201.097 129.738 cv
201.972 129.738 201.097 129.738 201.972 129.738 cv
204.483 135.869 201.972 129.738 204.483 135.869 cv
203.558 135.869 204.483 135.869 203.558 135.869 cv
202.842 134.012 203.558 135.869 202.842 134.012 cv
200.277 134.012 202.842 134.012 200.277 134.012 cv
199.603 135.869 200.277 134.012 199.603 135.869 cv
198.741 135.869 199.603 135.869 198.741 135.869 cv
cp
200.511 133.352 mo
202.591 133.352 200.511 133.352 202.591 133.352 cv
201.951 131.654 202.591 133.352 201.951 131.654 cv
201.755 131.138 201.61 130.714 201.516 130.382 cv
201.437 130.775 201.327 131.166 201.185 131.553 cv
200.511 133.352 201.185 131.553 200.511 133.352 cv
f
205.145 135.869 mo
205.145 129.738 205.145 135.869 205.145 129.738 cv
209.581 129.738 205.145 129.738 209.581 129.738 cv
209.581 130.462 209.581 129.738 209.581 130.462 cv
205.957 130.462 209.581 130.462 205.957 130.462 cv
205.957 132.339 205.957 130.462 205.957 132.339 cv
209.351 132.339 205.957 132.339 209.351 132.339 cv
209.351 133.059 209.351 132.339 209.351 133.059 cv
205.957 133.059 209.351 133.059 205.957 133.059 cv
205.957 135.146 205.957 133.059 205.957 135.146 cv
209.723 135.146 205.957 135.146 209.723 135.146 cv
209.723 135.869 209.723 135.146 209.723 135.869 cv
205.145 135.869 209.723 135.869 205.145 135.869 cv
f
210.168 135.869 mo
212.524 129.738 210.168 135.869 212.524 129.738 cv
213.399 129.738 212.524 129.738 213.399 129.738 cv
215.91 135.869 213.399 129.738 215.91 135.869 cv
214.985 135.869 215.91 135.869 214.985 135.869 cv
214.269 134.012 214.985 135.869 214.269 134.012 cv
211.704 134.012 214.269 134.012 211.704 134.012 cv
211.03 135.869 211.704 134.012 211.03 135.869 cv
210.168 135.869 211.03 135.869 210.168 135.869 cv
cp
211.938 133.352 mo
214.018 133.352 211.938 133.352 214.018 133.352 cv
213.378 131.654 214.018 133.352 213.378 131.654 cv
213.182 131.138 213.037 130.714 212.943 130.382 cv
212.864 130.775 212.754 131.166 212.612 131.553 cv
211.938 133.352 212.612 131.553 211.938 133.352 cv
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.29 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
