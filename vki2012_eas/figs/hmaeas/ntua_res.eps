%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADP524.tmp.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Kampolis Ioannis
%%CreationDate: 14/2/2009, 11:50:07 μμ
%%BoundingBox: 0 0 275 205
%%HiResBoundingBox: 0 0 274.8911 204.0821
%%CropBox: 0 0 274.8911 204.0821
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: 
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	1 index dup/ID get exch/Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.30 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.30 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.30 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get ne dup
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
				if
				end
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} (% &end XMP packet& %) ReadBypdfmark_5
<?xpacket begin='ο»Ώ' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="Acrobat Distiller 8.0.0 (Windows)"
   xap:CreatorTool="OriginLab Corporation"
   xap:ModifyDate="2009-02-14T23:49:46+02:00"
   xap:CreateDate="2009-02-14T23:49:46+02:00"
   dc:format="application/pdf"
   xapMM:DocumentID="uuid:b4647f60-4b8b-4370-b88c-a44ae43115d5"
   xapMM:InstanceID="uuid:b1adcefb-67e4-42ad-8398-98dc886428d5">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">C:Documents and SettingsKampolis IoannisDesktopntua_res.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
<< /0 
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]

/CSA add_res
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -204.082 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 204.082 li
274.891 204.082 li
274.891 0 li
cp
clp
[1 0 0 1 -21.818 0 ]ct
.204 lw
1 lc
1 lj
10 ml
[] 0 dsh
false sadj
89.99 179.1 mo
89.99 178.896 li
false sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.75294 .75294 .75294 colr
@
89.99 177.978 mo
89.99 177.774 li
@
89.99 176.856 mo
89.99 176.652 li
@
89.99 175.734 mo
89.99 175.53 li
@
89.99 174.612 mo
89.99 174.408 li
@
89.99 173.49 mo
89.99 173.286 li
@
89.99 172.368 mo
89.99 172.164 li
@
89.99 171.246 mo
89.99 171.042 li
@
89.99 170.124 mo
89.99 169.92 li
@
89.99 169.002 mo
89.99 168.798 li
@
89.99 167.88 mo
89.99 167.676 li
@
89.99 166.758 mo
89.99 166.554 li
@
89.99 165.636 mo
89.99 165.432 li
@
89.99 164.514 mo
89.99 164.31 li
@
89.99 163.392 mo
89.99 163.188 li
@
89.99 162.27 mo
89.99 162.066 li
@
89.99 161.148 mo
89.99 160.944 li
@
89.99 160.026 mo
89.99 159.822 li
@
89.99 158.904 mo
89.99 158.7 li
@
89.99 157.782 mo
89.99 157.578 li
@
89.99 156.66 mo
89.99 156.456 li
@
89.99 155.538 mo
89.99 155.334 li
@
89.99 154.416 mo
89.99 154.212 li
@
89.99 153.294 mo
89.99 153.09 li
@
89.99 152.172 mo
89.99 151.968 li
@
89.99 151.05 mo
89.99 150.846 li
@
89.99 149.928 mo
89.99 149.724 li
@
89.99 148.806 mo
89.99 148.602 li
@
89.99 147.684 mo
89.99 147.48 li
@
89.99 146.562 mo
89.99 146.358 li
@
89.99 145.44 mo
89.99 145.236 li
@
89.99 144.318 mo
89.99 144.114 li
@
89.99 143.196 mo
89.99 142.992 li
@
89.99 142.074 mo
89.99 141.87 li
@
89.99 140.952 mo
89.99 140.748 li
@
89.99 139.83 mo
89.99 139.626 li
@
89.99 138.708 mo
89.99 138.504 li
@
89.99 137.586 mo
89.99 137.382 li
@
89.99 136.464 mo
89.99 136.26 li
@
89.99 135.342 mo
89.99 135.138 li
@
89.99 134.22 mo
89.99 134.016 li
@
89.99 133.098 mo
89.99 132.894 li
@
89.99 131.976 mo
89.99 131.772 li
@
89.99 130.854 mo
89.99 130.65 li
@
89.99 129.732 mo
89.99 129.528 li
@
89.99 128.61 mo
89.99 128.406 li
@
89.99 127.488 mo
89.99 127.284 li
@
89.99 126.366 mo
89.99 126.162 li
@
89.99 125.244 mo
89.99 125.04 li
@
89.99 124.122 mo
89.99 123.918 li
@
89.99 123 mo
89.99 122.796 li
@
89.99 121.878 mo
89.99 121.674 li
@
89.99 120.756 mo
89.99 120.552 li
@
89.99 119.634 mo
89.99 119.43 li
@
89.99 118.512 mo
89.99 118.308 li
@
89.99 117.39 mo
89.99 117.186 li
@
89.99 116.268 mo
89.99 116.064 li
@
89.99 115.146 mo
89.99 114.942 li
@
89.99 114.024 mo
89.99 113.82 li
@
89.99 112.902 mo
89.99 112.698 li
@
89.99 111.78 mo
89.99 111.576 li
@
89.99 110.658 mo
89.99 110.454 li
@
89.99 109.536 mo
89.99 109.332 li
@
89.99 108.414 mo
89.99 108.21 li
@
89.99 107.292 mo
89.99 107.088 li
@
89.99 106.17 mo
89.99 105.966 li
@
89.99 105.048 mo
89.99 104.844 li
@
89.99 103.926 mo
89.99 103.722 li
@
89.99 102.804 mo
89.99 102.6 li
@
89.99 101.682 mo
89.99 101.478 li
@
89.99 100.56 mo
89.99 100.356 li
@
89.99 99.4379 mo
89.99 99.2339 li
@
89.99 98.3159 mo
89.99 98.1119 li
@
89.99 97.1939 mo
89.99 96.9899 li
@
89.99 96.0719 mo
89.99 95.8679 li
@
89.99 94.9499 mo
89.99 94.7459 li
@
89.99 93.8279 mo
89.99 93.6239 li
@
89.99 92.7059 mo
89.99 92.5019 li
@
89.99 91.5839 mo
89.99 91.3799 li
@
89.99 90.4619 mo
89.99 90.2579 li
@
89.99 89.3399 mo
89.99 89.1359 li
@
89.99 88.2179 mo
89.99 88.0139 li
@
89.99 87.0959 mo
89.99 86.8919 li
@
89.99 85.9739 mo
89.99 85.7699 li
@
89.99 84.8519 mo
89.99 84.6479 li
@
89.99 83.7299 mo
89.99 83.5259 li
@
89.99 82.6079 mo
89.99 82.4039 li
@
89.99 81.4859 mo
89.99 81.2819 li
@
89.99 80.364 mo
89.99 80.16 li
@
89.99 79.242 mo
89.99 79.038 li
@
89.99 78.12 mo
89.99 77.916 li
@
89.99 76.998 mo
89.99 76.794 li
@
89.99 75.876 mo
89.99 75.672 li
@
89.99 74.754 mo
89.99 74.55 li
@
89.99 73.632 mo
89.99 73.428 li
@
89.99 72.51 mo
89.99 72.306 li
@
89.99 71.388 mo
89.99 71.184 li
@
89.99 70.266 mo
89.99 70.062 li
@
89.99 69.144 mo
89.99 68.94 li
@
89.99 68.022 mo
89.99 67.818 li
@
89.99 66.9 mo
89.99 66.696 li
@
89.99 65.778 mo
89.99 65.574 li
@
89.99 64.656 mo
89.99 64.452 li
@
89.99 63.534 mo
89.99 63.33 li
@
89.99 62.412 mo
89.99 62.208 li
@
89.99 61.2901 mo
89.99 61.0861 li
@
89.99 60.1681 mo
89.99 59.9641 li
@
89.99 59.0461 mo
89.99 58.8421 li
@
89.99 57.9241 mo
89.99 57.7201 li
@
89.99 56.8021 mo
89.99 56.5981 li
@
89.99 55.6801 mo
89.99 55.4761 li
@
89.99 54.5581 mo
89.99 54.3541 li
@
89.99 53.4361 mo
89.99 53.2321 li
@
89.99 52.3141 mo
89.99 52.1101 li
@
89.99 51.1921 mo
89.99 50.9881 li
@
89.99 50.0701 mo
89.99 49.8661 li
@
89.99 48.9481 mo
89.99 48.7441 li
@
89.99 47.8261 mo
89.99 47.6221 li
@
89.99 46.7041 mo
89.99 46.5001 li
@
89.99 45.5821 mo
89.99 45.3781 li
@
89.99 44.4601 mo
89.99 44.2561 li
@
89.99 43.3382 mo
89.99 43.1341 li
@
89.99 42.2162 mo
89.99 42.0122 li
@
89.99 41.0942 mo
89.99 40.8902 li
@
89.99 39.9722 mo
89.99 39.7682 li
@
89.99 38.8502 mo
89.99 38.6462 li
@
89.99 37.7282 mo
89.99 37.5242 li
@
89.99 36.6062 mo
89.99 36.4022 li
@
89.99 35.4842 mo
89.99 35.2802 li
@
89.99 34.3622 mo
89.99 34.1582 li
@
89.99 33.2402 mo
89.99 33.0362 li
@
89.99 32.1182 mo
89.99 31.9142 li
@
89.99 30.9962 mo
89.99 30.7922 li
@
89.99 29.8742 mo
89.99 29.6702 li
@
89.99 28.7522 mo
89.99 28.5482 li
@
89.99 27.6302 mo
89.99 27.4262 li
@
89.99 26.5082 mo
89.99 26.3042 li
@
89.99 25.3862 mo
89.99 25.1822 li
@
89.99 24.2643 mo
89.99 24.0603 li
@
89.99 23.1423 mo
89.99 22.9383 li
@
89.99 22.0203 mo
89.99 21.8163 li
@
89.99 20.8983 mo
89.99 20.6943 li
@
89.99 19.7763 mo
89.99 19.5723 li
@
89.99 18.6543 mo
89.99 18.4503 li
@
89.99 17.5323 mo
89.99 17.3283 li
@
89.99 16.4103 mo
89.99 16.2063 li
@
89.99 15.2883 mo
89.99 15.0843 li
@
89.99 14.1663 mo
89.99 13.9623 li
@
89.99 13.0443 mo
89.99 12.8403 li
@
89.99 11.9223 mo
89.99 11.7183 li
@
89.99 10.8003 mo
89.99 10.5963 li
@
89.99 9.67833 mo
89.99 9.47433 li
@
89.99 8.55634 mo
89.99 8.35233 li
@
89.99 7.43434 mo
89.99 7.23034 li
@
89.99 6.31235 mo
89.99 6.10835 li
@
89.99 5.19035 mo
89.99 4.98635 li
@
89.99 4.06836 mo
89.99 3.86436 li
@
148.045 179.029 mo
148.045 178.825 li
@
148.045 177.907 mo
148.045 177.703 li
@
148.045 176.785 mo
148.045 176.581 li
@
148.045 175.663 mo
148.045 175.459 li
@
148.045 174.541 mo
148.045 174.337 li
@
148.045 173.419 mo
148.045 173.215 li
@
148.045 172.297 mo
148.045 172.093 li
@
148.045 171.175 mo
148.045 170.971 li
@
148.045 170.053 mo
148.045 169.849 li
@
148.045 168.931 mo
148.045 168.727 li
@
148.045 167.809 mo
148.045 167.605 li
@
148.045 166.687 mo
148.045 166.483 li
@
148.045 165.565 mo
148.045 165.361 li
@
148.045 164.443 mo
148.045 164.239 li
@
148.045 163.321 mo
148.045 163.117 li
@
148.045 162.199 mo
148.045 161.995 li
@
148.045 161.077 mo
148.045 160.873 li
@
148.045 159.955 mo
148.045 159.751 li
@
148.045 158.833 mo
148.045 158.629 li
@
148.045 157.711 mo
148.045 157.507 li
@
148.045 156.589 mo
148.045 156.385 li
@
148.045 155.467 mo
148.045 155.263 li
@
148.045 154.345 mo
148.045 154.141 li
@
148.045 153.223 mo
148.045 153.019 li
@
148.045 152.101 mo
148.045 151.897 li
@
148.045 150.979 mo
148.045 150.775 li
@
148.045 149.857 mo
148.045 149.653 li
@
148.045 148.735 mo
148.045 148.531 li
@
148.045 147.613 mo
148.045 147.409 li
@
148.045 146.491 mo
148.045 146.287 li
@
148.045 145.369 mo
148.045 145.165 li
@
148.045 144.247 mo
148.045 144.043 li
@
148.045 143.125 mo
148.045 142.921 li
@
148.045 142.003 mo
148.045 141.799 li
@
148.045 140.881 mo
148.045 140.677 li
@
148.045 139.759 mo
148.045 139.555 li
@
148.045 138.637 mo
148.045 138.433 li
@
148.045 137.515 mo
148.045 137.311 li
@
148.045 136.393 mo
148.045 136.189 li
@
148.045 135.271 mo
148.045 135.067 li
@
148.045 134.149 mo
148.045 133.945 li
@
148.045 133.027 mo
148.045 132.823 li
@
148.045 131.905 mo
148.045 131.701 li
@
148.045 130.873 mo
148.045 130.669 li
@
148.045 129.751 mo
148.045 129.547 li
@
148.045 128.629 mo
148.045 128.425 li
@
148.045 127.507 mo
148.045 127.303 li
@
148.045 126.385 mo
148.045 126.181 li
@
148.045 125.263 mo
148.045 125.059 li
@
148.045 124.141 mo
148.045 123.937 li
@
148.045 123.019 mo
148.045 122.815 li
@
148.045 121.897 mo
148.045 121.693 li
@
148.045 120.775 mo
148.045 120.571 li
@
148.045 119.653 mo
148.045 119.449 li
@
148.045 118.531 mo
148.045 118.327 li
@
148.045 117.409 mo
148.045 117.205 li
@
148.045 116.287 mo
148.045 116.083 li
@
148.045 115.165 mo
148.045 114.961 li
@
148.045 114.043 mo
148.045 113.839 li
@
148.045 112.921 mo
148.045 112.717 li
@
148.045 111.799 mo
148.045 111.595 li
@
148.045 110.677 mo
148.045 110.473 li
@
148.045 109.555 mo
148.045 109.351 li
@
148.045 108.433 mo
148.045 108.229 li
@
148.045 107.311 mo
148.045 107.107 li
@
148.045 106.189 mo
148.045 105.985 li
@
148.045 105.067 mo
148.045 104.863 li
@
148.045 103.945 mo
148.045 103.741 li
@
148.045 102.823 mo
148.045 102.619 li
@
148.045 101.701 mo
148.045 101.497 li
@
148.045 100.579 mo
148.045 100.375 li
@
148.045 99.457 mo
148.045 99.253 li
@
148.045 98.335 mo
148.045 98.131 li
@
148.045 97.213 mo
148.045 97.009 li
@
148.045 96.091 mo
148.045 95.887 li
@
148.045 94.969 mo
148.045 94.765 li
@
148.045 93.847 mo
148.045 93.643 li
@
148.045 92.725 mo
148.045 92.521 li
@
148.045 91.603 mo
148.045 91.399 li
@
148.045 90.481 mo
148.045 90.277 li
@
148.045 89.359 mo
148.045 89.155 li
@
148.045 88.237 mo
148.045 88.033 li
@
148.045 87.115 mo
148.045 86.911 li
@
148.045 85.993 mo
148.045 85.789 li
@
148.045 84.871 mo
148.045 84.667 li
@
148.045 83.749 mo
148.045 83.545 li
@
148.045 82.627 mo
148.045 82.423 li
@
148.045 81.505 mo
148.045 81.301 li
@
148.045 80.383 mo
148.045 80.179 li
@
148.045 79.261 mo
148.045 79.057 li
@
148.045 78.139 mo
148.045 77.935 li
@
148.045 77.017 mo
148.045 76.813 li
@
148.045 75.8951 mo
148.045 75.691 li
@
148.045 74.7731 mo
148.045 74.5691 li
@
148.045 73.6511 mo
148.045 73.4471 li
@
148.045 72.5291 mo
148.045 72.3251 li
@
148.045 71.4071 mo
148.045 71.2031 li
@
148.045 70.2851 mo
148.045 70.0811 li
@
148.045 69.1631 mo
148.045 68.9591 li
@
148.045 68.0411 mo
148.045 67.8371 li
@
148.045 66.9191 mo
148.045 66.7151 li
@
148.045 65.7971 mo
148.045 65.5931 li
@
148.045 64.6751 mo
148.045 64.4711 li
@
148.045 63.5531 mo
148.045 63.3491 li
@
148.045 62.4311 mo
148.045 62.2271 li
@
148.045 61.3091 mo
148.045 61.1051 li
@
148.045 60.1871 mo
148.045 59.9831 li
@
148.045 59.0651 mo
148.045 58.8611 li
@
148.045 57.9431 mo
148.045 57.7391 li
@
148.045 56.8212 mo
148.045 56.6171 li
@
148.045 55.6992 mo
148.045 55.4952 li
@
148.045 54.5772 mo
148.045 54.3732 li
@
148.045 53.4552 mo
148.045 53.2512 li
@
148.045 52.3332 mo
148.045 52.1292 li
@
148.045 51.2112 mo
148.045 51.0072 li
@
148.045 50.0892 mo
148.045 49.8852 li
@
148.045 48.9672 mo
148.045 48.7632 li
@
148.045 47.8452 mo
148.045 47.6412 li
@
148.045 46.7232 mo
148.045 46.5192 li
@
148.045 45.6012 mo
148.045 45.3972 li
@
148.045 44.4792 mo
148.045 44.2752 li
@
148.045 43.3572 mo
148.045 43.1532 li
@
148.045 42.2352 mo
148.045 42.0312 li
@
148.045 41.1132 mo
148.045 40.9092 li
@
148.045 39.9912 mo
148.045 39.7872 li
@
148.045 38.8692 mo
148.045 38.6652 li
@
148.045 37.7473 mo
148.045 37.5433 li
@
148.045 36.6253 mo
148.045 36.4213 li
@
148.045 35.5033 mo
148.045 35.2993 li
@
148.045 34.3813 mo
148.045 34.1773 li
@
148.045 33.2593 mo
148.045 33.0553 li
@
148.045 32.1373 mo
148.045 31.9333 li
@
148.045 31.0153 mo
148.045 30.8113 li
@
148.045 29.8933 mo
148.045 29.6893 li
@
148.045 28.7713 mo
148.045 28.5673 li
@
148.045 27.6493 mo
148.045 27.4453 li
@
148.045 26.5273 mo
148.045 26.3233 li
@
148.045 25.4053 mo
148.045 25.2013 li
@
148.045 24.2833 mo
148.045 24.0793 li
@
148.045 23.1613 mo
148.045 22.9573 li
@
148.045 22.0393 mo
148.045 21.8353 li
@
148.045 20.9173 mo
148.045 20.7133 li
@
148.045 19.7953 mo
148.045 19.5913 li
@
148.045 18.6734 mo
148.045 18.4694 li
@
148.045 17.5514 mo
148.045 17.3474 li
@
148.045 16.4294 mo
148.045 16.2254 li
@
148.045 15.3074 mo
148.045 15.1034 li
@
148.045 14.1854 mo
148.045 13.9814 li
@
148.045 13.0634 mo
148.045 12.8594 li
@
148.045 11.9414 mo
148.045 11.7374 li
@
148.045 10.8194 mo
148.045 10.6154 li
@
148.045 9.6974 mo
148.045 9.4934 li
@
148.045 8.57541 mo
148.045 8.37141 li
@
148.045 7.45341 mo
148.045 7.24941 li
@
148.045 6.33142 mo
148.045 6.12742 li
@
148.045 5.20943 mo
148.045 5.00543 li
@
148.045 4.08743 mo
148.045 3.88343 li
@
206.1 179.048 mo
206.1 178.844 li
@
206.1 177.926 mo
206.1 177.722 li
@
206.1 176.804 mo
206.1 176.6 li
@
206.1 175.682 mo
206.1 175.478 li
@
206.1 174.56 mo
206.1 174.356 li
@
206.1 173.438 mo
206.1 173.234 li
@
206.1 172.316 mo
206.1 172.112 li
@
206.1 171.194 mo
206.1 170.99 li
@
206.1 170.072 mo
206.1 169.868 li
@
206.1 168.95 mo
206.1 168.746 li
@
206.1 167.828 mo
206.1 167.624 li
@
206.1 166.706 mo
206.1 166.502 li
@
206.1 165.584 mo
206.1 165.38 li
@
206.1 164.462 mo
206.1 164.258 li
@
206.1 163.34 mo
206.1 163.136 li
@
206.1 162.218 mo
206.1 162.014 li
@
206.1 161.096 mo
206.1 160.892 li
@
206.1 159.974 mo
206.1 159.77 li
@
206.1 158.852 mo
206.1 158.648 li
@
206.1 157.73 mo
206.1 157.526 li
@
206.1 156.608 mo
206.1 156.404 li
@
206.1 155.486 mo
206.1 155.282 li
@
206.1 154.364 mo
206.1 154.16 li
@
206.1 153.242 mo
206.1 153.038 li
@
206.1 152.12 mo
206.1 151.916 li
@
206.1 150.998 mo
206.1 150.794 li
@
206.1 149.876 mo
206.1 149.672 li
@
206.1 148.754 mo
206.1 148.55 li
@
206.1 147.632 mo
206.1 147.428 li
@
206.1 146.51 mo
206.1 146.306 li
@
206.1 145.388 mo
206.1 145.184 li
@
206.1 144.266 mo
206.1 144.062 li
@
206.1 143.144 mo
206.1 142.94 li
@
206.1 142.022 mo
206.1 141.818 li
@
206.1 140.9 mo
206.1 140.696 li
@
206.1 139.778 mo
206.1 139.574 li
@
206.1 138.656 mo
206.1 138.452 li
@
206.1 137.534 mo
206.1 137.33 li
@
206.1 136.412 mo
206.1 136.208 li
@
206.1 135.29 mo
206.1 135.086 li
@
206.1 134.168 mo
206.1 133.964 li
@
206.1 133.046 mo
206.1 132.842 li
@
206.1 131.924 mo
206.1 131.72 li
@
206.1 130.802 mo
206.1 130.598 li
@
206.1 129.68 mo
206.1 129.476 li
@
206.1 128.558 mo
206.1 128.354 li
@
206.1 127.436 mo
206.1 127.232 li
@
206.1 126.314 mo
206.1 126.11 li
@
206.1 125.192 mo
206.1 124.988 li
@
206.1 124.07 mo
206.1 123.866 li
@
206.1 122.948 mo
206.1 122.744 li
@
206.1 121.826 mo
206.1 121.622 li
@
206.1 120.704 mo
206.1 120.5 li
@
206.1 119.582 mo
206.1 119.378 li
@
206.1 118.46 mo
206.1 118.256 li
@
206.1 117.338 mo
206.1 117.134 li
@
206.1 116.216 mo
206.1 116.012 li
@
206.1 115.094 mo
206.1 114.89 li
@
206.1 113.972 mo
206.1 113.768 li
@
206.1 112.85 mo
206.1 112.646 li
@
206.1 111.728 mo
206.1 111.524 li
@
206.1 110.606 mo
206.1 110.402 li
@
206.1 109.484 mo
206.1 109.28 li
@
206.1 108.362 mo
206.1 108.158 li
@
206.1 107.24 mo
206.1 107.036 li
@
206.1 106.118 mo
206.1 105.914 li
@
206.1 104.996 mo
206.1 104.792 li
@
206.1 103.874 mo
206.1 103.67 li
@
206.1 102.752 mo
206.1 102.548 li
@
206.1 101.63 mo
206.1 101.426 li
@
206.1 100.508 mo
206.1 100.304 li
@
206.1 99.3863 mo
206.1 99.1823 li
@
206.1 98.2643 mo
206.1 98.0603 li
@
206.1 97.1423 mo
206.1 96.9383 li
@
206.1 96.0203 mo
206.1 95.8163 li
@
206.1 94.8983 mo
206.1 94.6943 li
@
206.1 93.7763 mo
206.1 93.5723 li
@
206.1 92.6543 mo
206.1 92.4503 li
@
206.1 91.5323 mo
206.1 91.3283 li
@
206.1 90.4103 mo
206.1 90.2063 li
@
206.1 89.2883 mo
206.1 89.0843 li
@
206.1 88.1663 mo
206.1 87.9623 li
@
206.1 87.0443 mo
206.1 86.8403 li
@
206.1 85.9223 mo
206.1 85.7183 li
@
206.1 84.8003 mo
206.1 84.5963 li
@
206.1 83.6783 mo
206.1 83.4743 li
@
206.1 82.647 mo
206.1 82.443 li
@
206.1 81.525 mo
206.1 81.321 li
@
206.1 80.403 mo
206.1 80.199 li
@
206.1 79.281 mo
206.1 79.077 li
@
206.1 78.159 mo
206.1 77.955 li
@
206.1 77.037 mo
206.1 76.833 li
@
206.1 75.9151 mo
206.1 75.7111 li
@
206.1 74.7931 mo
206.1 74.5891 li
@
206.1 73.6711 mo
206.1 73.4671 li
@
206.1 72.5491 mo
206.1 72.3451 li
@
206.1 71.4271 mo
206.1 71.2231 li
@
206.1 70.3051 mo
206.1 70.1011 li
@
206.1 69.1831 mo
206.1 68.9791 li
@
206.1 68.0611 mo
206.1 67.8571 li
@
206.1 66.9391 mo
206.1 66.7351 li
@
206.1 65.8171 mo
206.1 65.6131 li
@
206.1 64.6951 mo
206.1 64.4911 li
@
206.1 63.5731 mo
206.1 63.3691 li
@
206.1 62.4511 mo
206.1 62.2471 li
@
206.1 61.3291 mo
206.1 61.1251 li
@
206.1 60.2071 mo
206.1 60.0031 li
@
206.1 59.0851 mo
206.1 58.8811 li
@
206.1 57.9632 mo
206.1 57.7591 li
@
206.1 56.8412 mo
206.1 56.6372 li
@
206.1 55.7192 mo
206.1 55.5152 li
@
206.1 54.5972 mo
206.1 54.3932 li
@
206.1 53.4752 mo
206.1 53.2712 li
@
206.1 52.3532 mo
206.1 52.1492 li
@
206.1 51.2312 mo
206.1 51.0272 li
@
206.1 50.1092 mo
206.1 49.9052 li
@
206.1 48.9872 mo
206.1 48.7832 li
@
206.1 47.8652 mo
206.1 47.6612 li
@
206.1 46.7432 mo
206.1 46.5392 li
@
206.1 45.6212 mo
206.1 45.4172 li
@
206.1 44.4992 mo
206.1 44.2952 li
@
206.1 43.3772 mo
206.1 43.1732 li
@
206.1 42.2552 mo
206.1 42.0512 li
@
206.1 41.1332 mo
206.1 40.9292 li
@
206.1 40.0112 mo
206.1 39.8072 li
@
206.1 38.8893 mo
206.1 38.6852 li
@
206.1 37.7673 mo
206.1 37.5633 li
@
206.1 36.6453 mo
206.1 36.4413 li
@
206.1 35.5233 mo
206.1 35.3193 li
@
206.1 34.4013 mo
206.1 34.1973 li
@
206.1 33.2793 mo
206.1 33.0753 li
@
206.1 32.1573 mo
206.1 31.9533 li
@
206.1 31.0353 mo
206.1 30.8313 li
@
206.1 29.9133 mo
206.1 29.7093 li
@
206.1 28.7913 mo
206.1 28.5873 li
@
206.1 27.6693 mo
206.1 27.4653 li
@
206.1 26.5473 mo
206.1 26.3433 li
@
206.1 25.4253 mo
206.1 25.2213 li
@
206.1 24.3033 mo
206.1 24.0993 li
@
206.1 23.1813 mo
206.1 22.9773 li
@
206.1 22.0593 mo
206.1 21.8553 li
@
206.1 20.9373 mo
206.1 20.7333 li
@
206.1 19.8154 mo
206.1 19.6114 li
@
206.1 18.6934 mo
206.1 18.4894 li
@
206.1 17.5714 mo
206.1 17.3674 li
@
206.1 16.4494 mo
206.1 16.2454 li
@
206.1 15.3274 mo
206.1 15.1234 li
@
206.1 14.2054 mo
206.1 14.0014 li
@
206.1 13.0834 mo
206.1 12.8794 li
@
206.1 11.9614 mo
206.1 11.7574 li
@
206.1 10.8394 mo
206.1 10.6354 li
@
206.1 9.71741 mo
206.1 9.51341 li
@
206.1 8.59541 mo
206.1 8.39141 li
@
206.1 7.47342 mo
206.1 7.26942 li
@
206.1 6.35143 mo
206.1 6.14743 li
@
206.1 5.22943 mo
206.1 5.02543 li
@
206.1 4.10744 mo
206.1 3.90344 li
@
264.155 179.068 mo
264.155 178.864 li
@
264.155 177.946 mo
264.155 177.742 li
@
264.155 176.824 mo
264.155 176.62 li
@
264.155 175.702 mo
264.155 175.498 li
@
264.155 174.58 mo
264.155 174.376 li
@
264.155 173.458 mo
264.155 173.254 li
@
264.155 172.336 mo
264.155 172.132 li
@
264.155 171.214 mo
264.155 171.01 li
@
264.155 170.092 mo
264.155 169.888 li
@
264.155 168.97 mo
264.155 168.766 li
@
264.155 167.848 mo
264.155 167.644 li
@
264.155 166.726 mo
264.155 166.522 li
@
264.155 165.604 mo
264.155 165.4 li
@
264.155 164.482 mo
264.155 164.278 li
@
264.155 163.36 mo
264.155 163.156 li
@
264.155 162.238 mo
264.155 162.034 li
@
264.155 161.116 mo
264.155 160.912 li
@
264.155 159.994 mo
264.155 159.79 li
@
264.155 158.872 mo
264.155 158.668 li
@
264.155 157.75 mo
264.155 157.546 li
@
264.155 156.628 mo
264.155 156.424 li
@
264.155 155.506 mo
264.155 155.302 li
@
264.155 154.384 mo
264.155 154.18 li
@
264.155 153.262 mo
264.155 153.058 li
@
264.155 152.14 mo
264.155 151.936 li
@
264.155 151.018 mo
264.155 150.814 li
@
264.155 149.896 mo
264.155 149.692 li
@
264.155 148.774 mo
264.155 148.57 li
@
264.155 147.652 mo
264.155 147.448 li
@
264.155 146.53 mo
264.155 146.326 li
@
264.155 145.408 mo
264.155 145.204 li
@
264.155 144.286 mo
264.155 144.082 li
@
264.155 143.164 mo
264.155 142.96 li
@
264.155 142.042 mo
264.155 141.838 li
@
264.155 140.92 mo
264.155 140.716 li
@
264.155 139.798 mo
264.155 139.594 li
@
264.155 138.676 mo
264.155 138.472 li
@
264.155 137.554 mo
264.155 137.35 li
@
264.155 136.432 mo
264.155 136.228 li
@
264.155 135.31 mo
264.155 135.106 li
@
264.155 134.188 mo
264.155 133.984 li
@
264.155 133.066 mo
264.155 132.862 li
@
264.155 131.944 mo
264.155 131.74 li
@
264.155 130.822 mo
264.155 130.618 li
@
264.155 129.7 mo
264.155 129.496 li
@
264.155 128.578 mo
264.155 128.374 li
@
264.155 127.456 mo
264.155 127.252 li
@
264.155 126.334 mo
264.155 126.13 li
@
264.155 125.212 mo
264.155 125.008 li
@
264.155 124.09 mo
264.155 123.886 li
@
264.155 122.968 mo
264.155 122.764 li
@
264.155 121.846 mo
264.155 121.642 li
@
264.155 120.724 mo
264.155 120.52 li
@
264.155 119.602 mo
264.155 119.398 li
@
264.155 118.48 mo
264.155 118.276 li
@
264.155 117.358 mo
264.155 117.154 li
@
264.155 116.236 mo
264.155 116.032 li
@
264.155 115.114 mo
264.155 114.91 li
@
264.155 113.992 mo
264.155 113.788 li
@
264.155 112.87 mo
264.155 112.666 li
@
264.155 111.748 mo
264.155 111.544 li
@
264.155 110.626 mo
264.155 110.422 li
@
264.155 109.504 mo
264.155 109.3 li
@
264.155 108.382 mo
264.155 108.178 li
@
264.155 107.26 mo
264.155 107.056 li
@
264.155 106.138 mo
264.155 105.934 li
@
264.155 105.016 mo
264.155 104.812 li
@
264.155 103.894 mo
264.155 103.69 li
@
264.155 102.772 mo
264.155 102.568 li
@
264.155 101.65 mo
264.155 101.446 li
@
264.155 100.528 mo
264.155 100.324 li
@
264.155 99.4063 mo
264.155 99.2023 li
@
264.155 98.2843 mo
264.155 98.0803 li
@
264.155 97.1623 mo
264.155 96.9583 li
@
264.155 96.0403 mo
264.155 95.8363 li
@
264.155 94.9183 mo
264.155 94.7143 li
@
264.155 93.7963 mo
264.155 93.5923 li
@
264.155 92.6743 mo
264.155 92.4703 li
@
264.155 91.5523 mo
264.155 91.3483 li
@
264.155 90.4303 mo
264.155 90.2263 li
@
264.155 89.3083 mo
264.155 89.1043 li
@
264.155 88.1863 mo
264.155 87.9823 li
@
264.155 87.0643 mo
264.155 86.8603 li
@
264.155 85.9423 mo
264.155 85.7383 li
@
264.155 84.8203 mo
264.155 84.6163 li
@
264.155 83.6983 mo
264.155 83.4943 li
@
264.155 82.5764 mo
264.155 82.3724 li
@
264.155 81.4544 mo
264.155 81.2504 li
@
264.155 80.3324 mo
264.155 80.1284 li
@
264.155 79.2104 mo
264.155 79.0064 li
@
264.155 78.0884 mo
264.155 77.8844 li
@
264.155 76.9664 mo
264.155 76.7624 li
@
264.155 75.8444 mo
264.155 75.6404 li
@
264.155 74.7224 mo
264.155 74.5184 li
@
264.155 73.6004 mo
264.155 73.3964 li
@
264.155 72.4784 mo
264.155 72.2744 li
@
264.155 71.3564 mo
264.155 71.1524 li
@
264.155 70.2344 mo
264.155 70.0304 li
@
264.155 69.1124 mo
264.155 68.9084 li
@
264.155 67.9904 mo
264.155 67.7864 li
@
264.155 66.8684 mo
264.155 66.6644 li
@
264.155 65.7464 mo
264.155 65.5424 li
@
264.155 64.6245 mo
264.155 64.4204 li
@
264.155 63.5025 mo
264.155 63.2985 li
@
264.155 62.3805 mo
264.155 62.1765 li
@
264.155 61.2585 mo
264.155 61.0545 li
@
264.155 60.1365 mo
264.155 59.9325 li
@
264.155 59.0145 mo
264.155 58.8105 li
@
264.155 57.8925 mo
264.155 57.6885 li
@
264.155 56.7705 mo
264.155 56.5665 li
@
264.155 55.6485 mo
264.155 55.4445 li
@
264.155 54.5265 mo
264.155 54.3225 li
@
264.155 53.4045 mo
264.155 53.2005 li
@
264.155 52.2825 mo
264.155 52.0785 li
@
264.155 51.1605 mo
264.155 50.9565 li
@
264.155 50.0385 mo
264.155 49.8345 li
@
264.155 48.9165 mo
264.155 48.7125 li
@
264.155 47.7945 mo
264.155 47.5905 li
@
264.155 46.6725 mo
264.155 46.4685 li
@
264.155 45.5506 mo
264.155 45.3465 li
@
264.155 44.4286 mo
264.155 44.2246 li
@
264.155 43.3066 mo
264.155 43.1026 li
@
264.155 42.1846 mo
264.155 41.9806 li
@
264.155 41.0626 mo
264.155 40.8586 li
@
264.155 39.9406 mo
264.155 39.7366 li
@
264.155 38.8186 mo
264.155 38.6146 li
@
264.155 37.6966 mo
264.155 37.4926 li
@
264.155 36.5746 mo
264.155 36.3706 li
@
264.155 35.4526 mo
264.155 35.2486 li
@
264.154 34.421 mo
264.154 34.217 li
@
264.154 33.299 mo
264.154 33.095 li
@
264.154 32.177 mo
264.154 31.973 li
@
264.154 31.055 mo
264.154 30.851 li
@
264.154 29.933 mo
264.154 29.729 li
@
264.154 28.8111 mo
264.154 28.607 li
@
264.154 27.6891 mo
264.154 27.4851 li
@
264.154 26.5671 mo
264.154 26.3631 li
@
264.154 25.4451 mo
264.154 25.2411 li
@
264.154 24.3231 mo
264.154 24.1191 li
@
264.154 23.2011 mo
264.154 22.9971 li
@
264.154 22.0791 mo
264.154 21.8751 li
@
264.154 20.9571 mo
264.154 20.7531 li
@
264.154 19.8351 mo
264.154 19.6311 li
@
264.154 18.7131 mo
264.154 18.5091 li
@
264.154 17.5911 mo
264.154 17.3871 li
@
264.154 16.4691 mo
264.154 16.2651 li
@
264.154 15.3471 mo
264.154 15.1431 li
@
264.154 14.2251 mo
264.154 14.0211 li
@
264.154 13.1031 mo
264.154 12.8991 li
@
264.154 11.9811 mo
264.154 11.7771 li
@
264.154 10.8591 mo
264.154 10.6551 li
@
264.154 9.73715 mo
264.154 9.53315 li
@
264.154 8.61516 mo
264.154 8.41116 li
@
264.154 7.49316 mo
264.154 7.28916 li
@
264.154 6.37117 mo
264.154 6.16717 li
@
264.154 5.24918 mo
264.154 5.04518 li
@
264.154 4.12718 mo
264.154 3.92318 li
@
60.911 166.547 mo
61.115 166.547 li
@
62.033 166.547 mo
62.237 166.547 li
@
63.155 166.547 mo
63.359 166.547 li
@
64.277 166.547 mo
64.481 166.547 li
@
65.399 166.547 mo
65.603 166.547 li
@
66.521 166.547 mo
66.725 166.547 li
@
67.643 166.547 mo
67.847 166.547 li
@
68.765 166.547 mo
68.969 166.547 li
@
69.887 166.547 mo
70.091 166.547 li
@
71.009 166.547 mo
71.213 166.547 li
@
72.131 166.547 mo
72.335 166.547 li
@
73.253 166.547 mo
73.457 166.547 li
@
74.375 166.547 mo
74.579 166.547 li
@
75.497 166.547 mo
75.701 166.547 li
@
76.619 166.547 mo
76.823 166.547 li
@
77.741 166.547 mo
77.945 166.547 li
@
78.863 166.547 mo
79.067 166.547 li
@
79.985 166.547 mo
80.189 166.547 li
@
81.107 166.547 mo
81.311 166.547 li
@
82.229 166.547 mo
82.433 166.547 li
@
83.351 166.547 mo
83.555 166.547 li
@
84.473 166.547 mo
84.677 166.547 li
@
85.595 166.547 mo
85.799 166.547 li
@
86.717 166.547 mo
86.921 166.547 li
@
87.839 166.547 mo
88.043 166.547 li
@
88.961 166.547 mo
89.165 166.547 li
@
90.083 166.547 mo
90.287 166.547 li
@
91.205 166.547 mo
91.409 166.547 li
@
92.327 166.547 mo
92.531 166.547 li
@
93.449 166.547 mo
93.653 166.547 li
@
94.571 166.547 mo
94.775 166.547 li
@
95.693 166.547 mo
95.897 166.547 li
@
96.815 166.547 mo
97.019 166.547 li
@
97.937 166.547 mo
98.141 166.547 li
@
99.0591 166.547 mo
99.263 166.547 li
@
100.181 166.547 mo
100.385 166.547 li
@
101.303 166.547 mo
101.507 166.547 li
@
102.425 166.547 mo
102.629 166.547 li
@
103.547 166.547 mo
103.751 166.547 li
@
104.669 166.547 mo
104.873 166.547 li
@
105.791 166.547 mo
105.995 166.547 li
@
106.913 166.547 mo
107.117 166.547 li
@
108.035 166.547 mo
108.239 166.547 li
@
109.157 166.547 mo
109.361 166.547 li
@
110.279 166.547 mo
110.483 166.547 li
@
111.401 166.547 mo
111.605 166.547 li
@
112.523 166.547 mo
112.727 166.547 li
@
113.645 166.547 mo
113.849 166.547 li
@
114.767 166.547 mo
114.971 166.547 li
@
115.889 166.547 mo
116.093 166.547 li
@
117.011 166.547 mo
117.215 166.547 li
@
118.133 166.547 mo
118.337 166.547 li
@
119.255 166.547 mo
119.459 166.547 li
@
120.377 166.547 mo
120.581 166.547 li
@
121.499 166.547 mo
121.703 166.547 li
@
122.621 166.547 mo
122.825 166.547 li
@
123.743 166.547 mo
123.947 166.547 li
@
124.865 166.547 mo
125.069 166.547 li
@
125.987 166.547 mo
126.191 166.547 li
@
127.109 166.547 mo
127.313 166.547 li
@
128.231 166.547 mo
128.435 166.547 li
@
129.353 166.547 mo
129.557 166.547 li
@
130.475 166.547 mo
130.679 166.547 li
@
131.597 166.547 mo
131.801 166.547 li
@
132.719 166.547 mo
132.923 166.547 li
@
133.841 166.547 mo
134.045 166.547 li
@
134.963 166.547 mo
135.167 166.547 li
@
136.085 166.547 mo
136.289 166.547 li
@
137.207 166.547 mo
137.411 166.547 li
@
138.329 166.547 mo
138.533 166.547 li
@
139.451 166.547 mo
139.655 166.547 li
@
140.573 166.547 mo
140.777 166.547 li
@
141.695 166.547 mo
141.899 166.547 li
@
142.817 166.547 mo
143.021 166.547 li
@
143.939 166.547 mo
144.143 166.547 li
@
145.061 166.547 mo
145.265 166.547 li
@
146.183 166.547 mo
146.387 166.547 li
@
147.305 166.547 mo
147.509 166.547 li
@
148.427 166.547 mo
148.631 166.547 li
@
149.549 166.547 mo
149.753 166.547 li
@
150.671 166.547 mo
150.875 166.547 li
@
151.793 166.547 mo
151.997 166.547 li
@
152.915 166.547 mo
153.119 166.547 li
@
154.037 166.547 mo
154.241 166.547 li
@
155.159 166.547 mo
155.363 166.547 li
@
156.281 166.547 mo
156.485 166.547 li
@
157.403 166.547 mo
157.607 166.547 li
@
158.525 166.547 mo
158.729 166.547 li
@
159.647 166.547 mo
159.851 166.547 li
@
160.769 166.547 mo
160.973 166.547 li
@
161.891 166.547 mo
162.095 166.547 li
@
163.013 166.547 mo
163.217 166.547 li
@
164.135 166.547 mo
164.339 166.547 li
@
165.257 166.547 mo
165.461 166.547 li
@
166.379 166.547 mo
166.583 166.547 li
@
167.501 166.547 mo
167.705 166.547 li
@
168.623 166.547 mo
168.827 166.547 li
@
169.745 166.547 mo
169.949 166.547 li
@
170.867 166.547 mo
171.071 166.547 li
@
171.989 166.547 mo
172.193 166.547 li
@
173.111 166.547 mo
173.315 166.547 li
@
174.233 166.547 mo
174.437 166.547 li
@
175.355 166.547 mo
175.559 166.547 li
@
176.477 166.547 mo
176.681 166.547 li
@
177.599 166.547 mo
177.803 166.547 li
@
178.721 166.547 mo
178.925 166.547 li
@
179.843 166.547 mo
180.047 166.547 li
@
180.965 166.547 mo
181.169 166.547 li
@
182.087 166.547 mo
182.291 166.547 li
@
183.209 166.547 mo
183.413 166.547 li
@
184.331 166.547 mo
184.535 166.547 li
@
185.453 166.547 mo
185.657 166.547 li
@
186.575 166.547 mo
186.779 166.547 li
@
187.697 166.547 mo
187.901 166.547 li
@
188.819 166.547 mo
189.023 166.547 li
@
189.941 166.547 mo
190.145 166.547 li
@
191.063 166.547 mo
191.267 166.547 li
@
192.185 166.547 mo
192.389 166.547 li
@
193.307 166.547 mo
193.511 166.547 li
@
194.429 166.547 mo
194.633 166.547 li
@
195.551 166.547 mo
195.755 166.547 li
@
196.673 166.547 mo
196.877 166.547 li
@
197.795 166.547 mo
197.999 166.547 li
@
198.917 166.547 mo
199.121 166.547 li
@
200.039 166.547 mo
200.243 166.547 li
@
201.161 166.547 mo
201.365 166.547 li
@
202.283 166.547 mo
202.487 166.547 li
@
203.405 166.547 mo
203.609 166.547 li
@
204.527 166.547 mo
204.731 166.547 li
@
205.649 166.547 mo
205.853 166.547 li
@
206.771 166.547 mo
206.975 166.547 li
@
207.893 166.547 mo
208.097 166.547 li
@
209.015 166.547 mo
209.219 166.547 li
@
210.137 166.547 mo
210.341 166.547 li
@
211.259 166.547 mo
211.463 166.547 li
@
212.381 166.547 mo
212.585 166.547 li
@
213.503 166.547 mo
213.707 166.547 li
@
214.625 166.547 mo
214.829 166.547 li
@
215.747 166.547 mo
215.951 166.547 li
@
216.869 166.547 mo
217.073 166.547 li
@
217.991 166.547 mo
218.195 166.547 li
@
219.113 166.547 mo
219.317 166.547 li
@
220.235 166.547 mo
220.439 166.547 li
@
221.357 166.547 mo
221.561 166.547 li
@
222.479 166.547 mo
222.683 166.547 li
@
223.601 166.547 mo
223.805 166.547 li
@
224.723 166.547 mo
224.927 166.547 li
@
225.845 166.547 mo
226.049 166.547 li
@
226.967 166.547 mo
227.171 166.547 li
@
228.089 166.547 mo
228.293 166.547 li
@
229.211 166.547 mo
229.415 166.547 li
@
230.333 166.547 mo
230.537 166.547 li
@
231.455 166.547 mo
231.659 166.547 li
@
232.577 166.547 mo
232.781 166.547 li
@
233.699 166.547 mo
233.903 166.547 li
@
234.821 166.547 mo
235.025 166.547 li
@
235.943 166.547 mo
236.147 166.547 li
@
237.065 166.547 mo
237.269 166.547 li
@
238.187 166.547 mo
238.391 166.547 li
@
239.309 166.547 mo
239.512 166.547 li
@
240.43 166.547 mo
240.634 166.547 li
@
241.552 166.547 mo
241.756 166.547 li
@
242.674 166.547 mo
242.878 166.547 li
@
243.796 166.547 mo
244 166.547 li
@
244.918 166.547 mo
245.122 166.547 li
@
246.04 166.547 mo
246.244 166.547 li
@
247.162 166.547 mo
247.366 166.547 li
@
248.284 166.547 mo
248.488 166.547 li
@
249.406 166.547 mo
249.61 166.547 li
@
250.528 166.547 mo
250.732 166.547 li
@
251.65 166.547 mo
251.854 166.547 li
@
252.772 166.547 mo
252.976 166.547 li
@
253.951 166.559 mo
254.155 166.559 li
@
255.073 166.559 mo
255.277 166.559 li
@
256.195 166.559 mo
256.399 166.559 li
@
257.317 166.559 mo
257.521 166.559 li
@
258.439 166.559 mo
258.643 166.559 li
@
259.561 166.559 mo
259.765 166.559 li
@
260.683 166.559 mo
260.887 166.559 li
@
261.805 166.559 mo
262.009 166.559 li
@
262.927 166.559 mo
263.131 166.559 li
@
264.049 166.559 mo
264.253 166.559 li
@
265.171 166.559 mo
265.375 166.559 li
@
266.293 166.559 mo
266.497 166.559 li
@
267.415 166.559 mo
267.619 166.559 li
@
268.537 166.559 mo
268.741 166.559 li
@
269.659 166.559 mo
269.863 166.559 li
@
270.781 166.559 mo
270.985 166.559 li
@
271.903 166.559 mo
272.107 166.559 li
@
273.025 166.559 mo
273.229 166.559 li
@
274.147 166.559 mo
274.351 166.559 li
@
275.269 166.559 mo
275.473 166.559 li
@
276.391 166.559 mo
276.595 166.559 li
@
277.513 166.559 mo
277.717 166.559 li
@
278.635 166.559 mo
278.839 166.559 li
@
279.757 166.559 mo
279.961 166.559 li
@
280.879 166.559 mo
281.083 166.559 li
@
282.001 166.559 mo
282.205 166.559 li
@
283.123 166.559 mo
283.327 166.559 li
@
284.245 166.559 mo
284.449 166.559 li
@
285.367 166.559 mo
285.571 166.559 li
@
286.489 166.559 mo
286.693 166.559 li
@
287.611 166.559 mo
287.815 166.559 li
@
288.733 166.559 mo
288.937 166.559 li
@
289.855 166.559 mo
290.059 166.559 li
@
290.977 166.559 mo
291.181 166.559 li
@
292.099 166.559 mo
292.303 166.559 li
@
60.9003 141.375 mo
61.1043 141.375 li
@
62.0223 141.375 mo
62.2263 141.375 li
@
63.1443 141.375 mo
63.3483 141.375 li
@
64.2663 141.375 mo
64.4703 141.375 li
@
65.3883 141.375 mo
65.5923 141.375 li
@
66.5103 141.375 mo
66.7143 141.375 li
@
67.6323 141.375 mo
67.8363 141.375 li
@
68.7543 141.375 mo
68.9583 141.375 li
@
69.8763 141.375 mo
70.0803 141.375 li
@
70.9983 141.375 mo
71.2023 141.375 li
@
72.1203 141.375 mo
72.3243 141.375 li
@
73.2423 141.375 mo
73.4463 141.375 li
@
74.3643 141.375 mo
74.5683 141.375 li
@
75.4863 141.375 mo
75.6903 141.375 li
@
76.6083 141.375 mo
76.8123 141.375 li
@
77.7303 141.375 mo
77.9343 141.375 li
@
78.8523 141.375 mo
79.0563 141.375 li
@
79.9743 141.375 mo
80.1783 141.375 li
@
81.0963 141.375 mo
81.3003 141.375 li
@
82.2183 141.375 mo
82.4223 141.375 li
@
83.3403 141.375 mo
83.5443 141.375 li
@
84.4623 141.375 mo
84.6663 141.375 li
@
85.5843 141.375 mo
85.7883 141.375 li
@
86.7063 141.375 mo
86.9103 141.375 li
@
87.8283 141.375 mo
88.0323 141.375 li
@
88.9503 141.375 mo
89.1543 141.375 li
@
90.0723 141.375 mo
90.2763 141.375 li
@
91.1943 141.375 mo
91.3983 141.375 li
@
92.3163 141.375 mo
92.5203 141.375 li
@
93.4383 141.375 mo
93.6423 141.375 li
@
94.5603 141.375 mo
94.7643 141.375 li
@
95.6824 141.375 mo
95.8863 141.375 li
@
96.8044 141.375 mo
97.0083 141.375 li
@
97.9264 141.375 mo
98.1303 141.375 li
@
99.0484 141.375 mo
99.2523 141.375 li
@
100.17 141.375 mo
100.374 141.375 li
@
101.292 141.375 mo
101.496 141.375 li
@
102.414 141.375 mo
102.618 141.375 li
@
103.536 141.375 mo
103.74 141.375 li
@
104.658 141.375 mo
104.862 141.375 li
@
105.78 141.375 mo
105.984 141.375 li
@
106.902 141.375 mo
107.106 141.375 li
@
108.024 141.375 mo
108.228 141.375 li
@
109.146 141.375 mo
109.35 141.375 li
@
110.268 141.375 mo
110.472 141.375 li
@
111.39 141.375 mo
111.594 141.375 li
@
112.512 141.375 mo
112.716 141.375 li
@
113.634 141.375 mo
113.838 141.375 li
@
114.756 141.375 mo
114.96 141.375 li
@
115.878 141.375 mo
116.082 141.375 li
@
117 141.375 mo
117.204 141.375 li
@
118.122 141.375 mo
118.326 141.375 li
@
119.244 141.375 mo
119.448 141.375 li
@
120.366 141.375 mo
120.57 141.375 li
@
121.488 141.375 mo
121.692 141.375 li
@
122.61 141.375 mo
122.814 141.375 li
@
123.732 141.375 mo
123.936 141.375 li
@
124.854 141.375 mo
125.058 141.375 li
@
125.976 141.375 mo
126.18 141.375 li
@
127.098 141.375 mo
127.302 141.375 li
@
128.22 141.375 mo
128.424 141.375 li
@
129.342 141.375 mo
129.546 141.375 li
@
130.464 141.375 mo
130.668 141.375 li
@
131.586 141.375 mo
131.79 141.375 li
@
132.708 141.375 mo
132.912 141.375 li
@
133.83 141.375 mo
134.034 141.375 li
@
134.952 141.375 mo
135.156 141.375 li
@
136.074 141.375 mo
136.278 141.375 li
@
137.196 141.375 mo
137.4 141.375 li
@
138.318 141.375 mo
138.522 141.375 li
@
139.44 141.375 mo
139.644 141.375 li
@
140.562 141.375 mo
140.766 141.375 li
@
141.684 141.375 mo
141.888 141.375 li
@
142.806 141.375 mo
143.01 141.375 li
@
143.928 141.375 mo
144.132 141.375 li
@
145.05 141.375 mo
145.254 141.375 li
@
146.172 141.375 mo
146.376 141.375 li
@
147.294 141.375 mo
147.498 141.375 li
@
148.416 141.375 mo
148.62 141.375 li
@
149.538 141.375 mo
149.742 141.375 li
@
150.66 141.375 mo
150.864 141.375 li
@
151.782 141.375 mo
151.986 141.375 li
@
152.904 141.375 mo
153.108 141.375 li
@
154.026 141.375 mo
154.23 141.375 li
@
155.148 141.375 mo
155.352 141.375 li
@
156.27 141.375 mo
156.474 141.375 li
@
157.392 141.375 mo
157.596 141.375 li
@
158.514 141.375 mo
158.718 141.375 li
@
159.636 141.375 mo
159.84 141.375 li
@
160.758 141.375 mo
160.962 141.375 li
@
161.88 141.375 mo
162.084 141.375 li
@
163.002 141.375 mo
163.206 141.375 li
@
164.124 141.375 mo
164.328 141.375 li
@
165.246 141.375 mo
165.45 141.375 li
@
166.368 141.375 mo
166.572 141.375 li
@
167.49 141.375 mo
167.694 141.375 li
@
168.612 141.375 mo
168.816 141.375 li
@
169.734 141.375 mo
169.938 141.375 li
@
170.856 141.375 mo
171.06 141.375 li
@
171.978 141.375 mo
172.182 141.375 li
@
173.1 141.375 mo
173.304 141.375 li
@
174.222 141.375 mo
174.426 141.375 li
@
175.344 141.375 mo
175.548 141.375 li
@
176.466 141.375 mo
176.67 141.375 li
@
177.588 141.375 mo
177.792 141.375 li
@
178.71 141.375 mo
178.914 141.375 li
@
179.832 141.375 mo
180.036 141.375 li
@
180.954 141.375 mo
181.158 141.375 li
@
182.076 141.375 mo
182.28 141.375 li
@
183.198 141.375 mo
183.402 141.375 li
@
184.32 141.375 mo
184.524 141.375 li
@
185.442 141.375 mo
185.646 141.375 li
@
186.564 141.375 mo
186.768 141.375 li
@
187.686 141.375 mo
187.89 141.375 li
@
188.808 141.375 mo
189.012 141.375 li
@
189.93 141.375 mo
190.134 141.375 li
@
191.052 141.375 mo
191.256 141.375 li
@
192.174 141.375 mo
192.378 141.375 li
@
193.296 141.375 mo
193.5 141.375 li
@
194.418 141.375 mo
194.622 141.375 li
@
195.54 141.375 mo
195.744 141.375 li
@
196.662 141.375 mo
196.866 141.375 li
@
197.784 141.375 mo
197.988 141.375 li
@
198.906 141.375 mo
199.11 141.375 li
@
200.028 141.375 mo
200.232 141.375 li
@
201.15 141.375 mo
201.354 141.375 li
@
202.272 141.375 mo
202.476 141.375 li
@
203.394 141.375 mo
203.598 141.375 li
@
204.516 141.375 mo
204.72 141.375 li
@
205.638 141.375 mo
205.842 141.375 li
@
206.76 141.375 mo
206.964 141.375 li
@
207.882 141.375 mo
208.086 141.375 li
@
209.004 141.375 mo
209.208 141.375 li
@
210.126 141.375 mo
210.33 141.375 li
@
211.248 141.375 mo
211.452 141.375 li
@
212.37 141.375 mo
212.574 141.375 li
@
213.492 141.375 mo
213.696 141.375 li
@
214.614 141.375 mo
214.818 141.375 li
@
215.736 141.375 mo
215.94 141.375 li
@
216.858 141.375 mo
217.062 141.375 li
@
217.98 141.375 mo
218.184 141.375 li
@
219.102 141.375 mo
219.306 141.375 li
@
220.224 141.375 mo
220.428 141.375 li
@
221.346 141.375 mo
221.55 141.375 li
@
222.468 141.375 mo
222.672 141.375 li
@
223.59 141.375 mo
223.794 141.375 li
@
224.712 141.375 mo
224.916 141.375 li
@
225.834 141.375 mo
226.038 141.375 li
@
226.956 141.375 mo
227.16 141.375 li
@
228.078 141.375 mo
228.282 141.375 li
@
229.2 141.375 mo
229.404 141.375 li
@
230.322 141.375 mo
230.526 141.375 li
@
231.444 141.375 mo
231.648 141.375 li
@
232.566 141.375 mo
232.77 141.375 li
@
233.688 141.375 mo
233.892 141.375 li
@
234.81 141.375 mo
235.014 141.375 li
@
235.932 141.375 mo
236.136 141.375 li
@
237.054 141.375 mo
237.258 141.375 li
@
238.176 141.375 mo
238.38 141.375 li
@
239.298 141.375 mo
239.502 141.375 li
@
240.42 141.375 mo
240.624 141.375 li
@
241.542 141.375 mo
241.746 141.375 li
@
242.664 141.375 mo
242.868 141.375 li
@
243.786 141.375 mo
243.99 141.375 li
@
244.908 141.375 mo
245.112 141.375 li
@
246.095 141.375 mo
246.299 141.375 li
@
247.217 141.375 mo
247.421 141.375 li
@
248.339 141.375 mo
248.543 141.375 li
@
249.461 141.375 mo
249.665 141.375 li
@
250.583 141.375 mo
250.787 141.375 li
@
251.705 141.375 mo
251.909 141.375 li
@
252.827 141.375 mo
253.031 141.375 li
@
253.949 141.375 mo
254.153 141.375 li
@
255.071 141.375 mo
255.275 141.375 li
@
256.193 141.375 mo
256.397 141.375 li
@
257.315 141.375 mo
257.519 141.375 li
@
258.437 141.375 mo
258.641 141.375 li
@
259.559 141.375 mo
259.763 141.375 li
@
260.681 141.375 mo
260.885 141.375 li
@
261.803 141.375 mo
262.007 141.375 li
@
262.925 141.375 mo
263.129 141.375 li
@
264.047 141.375 mo
264.251 141.375 li
@
265.169 141.375 mo
265.373 141.375 li
@
266.291 141.375 mo
266.495 141.375 li
@
267.413 141.375 mo
267.617 141.375 li
@
268.535 141.375 mo
268.739 141.375 li
@
269.657 141.375 mo
269.861 141.375 li
@
270.779 141.375 mo
270.983 141.375 li
@
271.901 141.375 mo
272.105 141.375 li
@
273.023 141.375 mo
273.227 141.375 li
@
274.145 141.375 mo
274.349 141.375 li
@
275.267 141.375 mo
275.471 141.375 li
@
276.389 141.375 mo
276.593 141.375 li
@
277.511 141.375 mo
277.715 141.375 li
@
278.633 141.375 mo
278.837 141.375 li
@
279.755 141.375 mo
279.959 141.375 li
@
280.877 141.375 mo
281.081 141.375 li
@
281.999 141.375 mo
282.203 141.375 li
@
283.121 141.375 mo
283.325 141.375 li
@
284.243 141.375 mo
284.447 141.375 li
@
285.365 141.375 mo
285.569 141.375 li
@
286.487 141.375 mo
286.691 141.375 li
@
287.609 141.375 mo
287.813 141.375 li
@
288.731 141.375 mo
288.935 141.375 li
@
289.853 141.375 mo
290.057 141.375 li
@
290.975 141.375 mo
291.179 141.375 li
@
292.097 141.375 mo
292.301 141.375 li
@
60.8983 116.293 mo
61.1023 116.293 li
@
62.0203 116.293 mo
62.2243 116.293 li
@
63.1423 116.293 mo
63.3463 116.293 li
@
64.2643 116.293 mo
64.4683 116.293 li
@
65.3863 116.293 mo
65.5903 116.293 li
@
66.5083 116.293 mo
66.7123 116.293 li
@
67.6303 116.293 mo
67.8343 116.293 li
@
68.7523 116.293 mo
68.9563 116.293 li
@
69.8743 116.293 mo
70.0783 116.293 li
@
70.9963 116.293 mo
71.2003 116.293 li
@
72.1183 116.293 mo
72.3223 116.293 li
@
73.2403 116.293 mo
73.4443 116.293 li
@
74.3623 116.293 mo
74.5663 116.293 li
@
75.4843 116.293 mo
75.6883 116.293 li
@
76.6063 116.293 mo
76.8103 116.293 li
@
77.7283 116.293 mo
77.9323 116.293 li
@
78.8503 116.293 mo
79.0543 116.293 li
@
79.9723 116.293 mo
80.1763 116.293 li
@
81.0943 116.293 mo
81.2983 116.293 li
@
82.2163 116.293 mo
82.4203 116.293 li
@
83.3383 116.293 mo
83.5423 116.293 li
@
84.4603 116.293 mo
84.6643 116.293 li
@
85.5823 116.293 mo
85.7863 116.293 li
@
86.7043 116.293 mo
86.9083 116.293 li
@
87.8263 116.293 mo
88.0303 116.293 li
@
88.9483 116.293 mo
89.1523 116.293 li
@
90.0703 116.293 mo
90.2743 116.293 li
@
91.1923 116.293 mo
91.3963 116.293 li
@
92.3143 116.293 mo
92.5183 116.293 li
@
93.4363 116.293 mo
93.6403 116.293 li
@
94.5583 116.293 mo
94.7623 116.293 li
@
95.6803 116.293 mo
95.8843 116.293 li
@
96.8023 116.293 mo
97.0063 116.293 li
@
97.9243 116.293 mo
98.1283 116.293 li
@
99.0463 116.293 mo
99.2503 116.293 li
@
100.168 116.293 mo
100.372 116.293 li
@
101.29 116.293 mo
101.494 116.293 li
@
102.412 116.293 mo
102.616 116.293 li
@
103.534 116.293 mo
103.738 116.293 li
@
104.656 116.293 mo
104.86 116.293 li
@
105.778 116.293 mo
105.982 116.293 li
@
106.9 116.293 mo
107.104 116.293 li
@
108.022 116.293 mo
108.226 116.293 li
@
109.144 116.293 mo
109.348 116.293 li
@
110.266 116.293 mo
110.47 116.293 li
@
111.388 116.293 mo
111.592 116.293 li
@
112.51 116.293 mo
112.714 116.293 li
@
113.632 116.293 mo
113.836 116.293 li
@
114.754 116.293 mo
114.958 116.293 li
@
115.876 116.293 mo
116.08 116.293 li
@
116.998 116.293 mo
117.202 116.293 li
@
118.12 116.293 mo
118.324 116.293 li
@
119.242 116.293 mo
119.446 116.293 li
@
120.364 116.293 mo
120.568 116.293 li
@
121.486 116.293 mo
121.69 116.293 li
@
122.608 116.293 mo
122.812 116.293 li
@
123.73 116.293 mo
123.934 116.293 li
@
124.852 116.293 mo
125.056 116.293 li
@
125.974 116.293 mo
126.178 116.293 li
@
127.096 116.293 mo
127.3 116.293 li
@
128.218 116.293 mo
128.422 116.293 li
@
129.34 116.293 mo
129.544 116.293 li
@
130.462 116.293 mo
130.666 116.293 li
@
131.584 116.293 mo
131.788 116.293 li
@
132.706 116.293 mo
132.91 116.293 li
@
133.828 116.293 mo
134.032 116.293 li
@
134.95 116.293 mo
135.154 116.293 li
@
136.072 116.293 mo
136.276 116.293 li
@
137.194 116.293 mo
137.398 116.293 li
@
138.316 116.293 mo
138.52 116.293 li
@
139.438 116.293 mo
139.642 116.293 li
@
140.56 116.293 mo
140.764 116.293 li
@
141.682 116.293 mo
141.886 116.293 li
@
142.804 116.293 mo
143.008 116.293 li
@
143.926 116.293 mo
144.13 116.293 li
@
145.048 116.293 mo
145.252 116.293 li
@
146.17 116.293 mo
146.374 116.293 li
@
147.292 116.293 mo
147.496 116.293 li
@
148.414 116.293 mo
148.618 116.293 li
@
149.536 116.293 mo
149.74 116.293 li
@
150.658 116.293 mo
150.862 116.293 li
@
151.78 116.293 mo
151.984 116.293 li
@
152.902 116.293 mo
153.106 116.293 li
@
154.024 116.293 mo
154.228 116.293 li
@
155.146 116.293 mo
155.35 116.293 li
@
156.268 116.293 mo
156.472 116.293 li
@
157.39 116.293 mo
157.594 116.293 li
@
158.512 116.293 mo
158.716 116.293 li
@
159.634 116.293 mo
159.838 116.293 li
@
160.756 116.293 mo
160.96 116.293 li
@
161.878 116.293 mo
162.082 116.293 li
@
163 116.293 mo
163.204 116.293 li
@
164.122 116.293 mo
164.326 116.293 li
@
165.244 116.293 mo
165.448 116.293 li
@
166.366 116.293 mo
166.57 116.293 li
@
167.488 116.293 mo
167.692 116.293 li
@
168.61 116.293 mo
168.814 116.293 li
@
169.732 116.293 mo
169.936 116.293 li
@
170.854 116.293 mo
171.058 116.293 li
@
171.976 116.293 mo
172.18 116.293 li
@
173.098 116.293 mo
173.302 116.293 li
@
174.22 116.293 mo
174.424 116.293 li
@
175.342 116.293 mo
175.546 116.293 li
@
176.464 116.293 mo
176.668 116.293 li
@
177.586 116.293 mo
177.79 116.293 li
@
178.708 116.293 mo
178.912 116.293 li
@
179.83 116.293 mo
180.034 116.293 li
@
180.952 116.293 mo
181.156 116.293 li
@
182.074 116.293 mo
182.278 116.293 li
@
183.196 116.293 mo
183.4 116.293 li
@
184.318 116.293 mo
184.522 116.293 li
@
185.44 116.293 mo
185.644 116.293 li
@
186.562 116.293 mo
186.766 116.293 li
@
187.684 116.293 mo
187.888 116.293 li
@
188.806 116.293 mo
189.01 116.293 li
@
189.928 116.293 mo
190.132 116.293 li
@
191.05 116.293 mo
191.254 116.293 li
@
192.172 116.293 mo
192.376 116.293 li
@
193.294 116.293 mo
193.498 116.293 li
@
194.416 116.293 mo
194.62 116.293 li
@
195.538 116.293 mo
195.742 116.293 li
@
196.66 116.293 mo
196.864 116.293 li
@
197.782 116.293 mo
197.986 116.293 li
@
198.904 116.293 mo
199.108 116.293 li
@
200.026 116.293 mo
200.23 116.293 li
@
201.148 116.293 mo
201.352 116.293 li
@
202.27 116.293 mo
202.474 116.293 li
@
203.392 116.293 mo
203.596 116.293 li
@
204.514 116.293 mo
204.718 116.293 li
@
205.636 116.293 mo
205.84 116.293 li
@
206.758 116.293 mo
206.962 116.293 li
@
207.88 116.293 mo
208.084 116.293 li
@
209.002 116.293 mo
209.206 116.293 li
@
210.124 116.293 mo
210.328 116.293 li
@
211.246 116.293 mo
211.45 116.293 li
@
212.368 116.293 mo
212.572 116.293 li
@
213.49 116.293 mo
213.694 116.293 li
@
214.612 116.293 mo
214.816 116.293 li
@
215.734 116.293 mo
215.938 116.293 li
@
216.856 116.293 mo
217.06 116.293 li
@
217.978 116.293 mo
218.182 116.293 li
@
219.1 116.293 mo
219.304 116.293 li
@
220.222 116.293 mo
220.426 116.293 li
@
221.344 116.293 mo
221.548 116.293 li
@
222.466 116.293 mo
222.67 116.293 li
@
223.588 116.293 mo
223.792 116.293 li
@
224.71 116.293 mo
224.914 116.293 li
@
225.832 116.293 mo
226.036 116.293 li
@
226.954 116.293 mo
227.158 116.293 li
@
228.076 116.293 mo
228.28 116.293 li
@
229.198 116.293 mo
229.402 116.293 li
@
230.32 116.293 mo
230.524 116.293 li
@
231.442 116.293 mo
231.646 116.293 li
@
232.564 116.293 mo
232.768 116.293 li
@
233.686 116.293 mo
233.89 116.293 li
@
234.808 116.293 mo
235.012 116.293 li
@
235.93 116.293 mo
236.134 116.293 li
@
237.052 116.293 mo
237.256 116.293 li
@
238.239 116.293 mo
238.443 116.293 li
@
239.361 116.293 mo
239.565 116.293 li
@
240.483 116.293 mo
240.687 116.293 li
@
241.605 116.293 mo
241.809 116.293 li
@
242.727 116.293 mo
242.931 116.293 li
@
243.849 116.293 mo
244.053 116.293 li
@
244.971 116.293 mo
245.175 116.293 li
@
246.093 116.293 mo
246.297 116.293 li
@
247.215 116.293 mo
247.419 116.293 li
@
248.337 116.293 mo
248.541 116.293 li
@
249.459 116.293 mo
249.663 116.293 li
@
250.581 116.293 mo
250.785 116.293 li
@
251.703 116.293 mo
251.907 116.293 li
@
252.825 116.293 mo
253.029 116.293 li
@
253.947 116.293 mo
254.151 116.293 li
@
255.069 116.293 mo
255.273 116.293 li
@
256.191 116.293 mo
256.395 116.293 li
@
257.313 116.293 mo
257.517 116.293 li
@
258.435 116.293 mo
258.639 116.293 li
@
259.557 116.293 mo
259.761 116.293 li
@
260.679 116.293 mo
260.883 116.293 li
@
261.801 116.293 mo
262.005 116.293 li
@
262.923 116.293 mo
263.127 116.293 li
@
264.045 116.293 mo
264.249 116.293 li
@
265.167 116.293 mo
265.371 116.293 li
@
266.289 116.293 mo
266.493 116.293 li
@
267.411 116.293 mo
267.615 116.293 li
@
268.533 116.293 mo
268.737 116.293 li
@
269.655 116.293 mo
269.859 116.293 li
@
270.777 116.293 mo
270.981 116.293 li
@
271.899 116.293 mo
272.103 116.293 li
@
273.021 116.293 mo
273.225 116.293 li
@
274.143 116.293 mo
274.347 116.293 li
@
275.265 116.293 mo
275.469 116.293 li
@
276.387 116.293 mo
276.591 116.293 li
@
277.509 116.293 mo
277.713 116.293 li
@
278.631 116.293 mo
278.835 116.293 li
@
279.753 116.293 mo
279.957 116.293 li
@
280.875 116.293 mo
281.079 116.293 li
@
281.997 116.293 mo
282.201 116.293 li
@
283.119 116.293 mo
283.323 116.293 li
@
284.241 116.293 mo
284.445 116.293 li
@
285.363 116.293 mo
285.567 116.293 li
@
286.485 116.293 mo
286.689 116.293 li
@
287.607 116.293 mo
287.811 116.293 li
@
288.729 116.293 mo
288.933 116.293 li
@
289.851 116.293 mo
290.055 116.293 li
@
290.973 116.293 mo
291.177 116.293 li
@
292.095 116.293 mo
292.299 116.293 li
@
60.8962 91.109 mo
61.1002 91.109 li
@
62.0182 91.109 mo
62.2222 91.109 li
@
63.1402 91.109 mo
63.3442 91.109 li
@
64.2622 91.109 mo
64.4662 91.109 li
@
65.3842 91.109 mo
65.5882 91.109 li
@
66.5062 91.109 mo
66.7102 91.109 li
@
67.6282 91.109 mo
67.8322 91.109 li
@
68.7502 91.109 mo
68.9542 91.109 li
@
69.8722 91.109 mo
70.0762 91.109 li
@
70.9942 91.109 mo
71.1982 91.109 li
@
72.1162 91.109 mo
72.3202 91.109 li
@
73.2382 91.109 mo
73.4422 91.109 li
@
74.3602 91.109 mo
74.5642 91.109 li
@
75.4822 91.109 mo
75.6862 91.109 li
@
76.6042 91.109 mo
76.8082 91.109 li
@
77.7262 91.109 mo
77.9302 91.109 li
@
78.8482 91.109 mo
79.0522 91.109 li
@
79.9702 91.109 mo
80.1742 91.109 li
@
81.0922 91.109 mo
81.2962 91.109 li
@
82.2142 91.109 mo
82.4182 91.109 li
@
83.3362 91.109 mo
83.5402 91.109 li
@
84.4582 91.109 mo
84.6622 91.109 li
@
85.5802 91.109 mo
85.7842 91.109 li
@
86.7022 91.109 mo
86.9062 91.109 li
@
87.8242 91.109 mo
88.0282 91.109 li
@
88.9463 91.109 mo
89.1502 91.109 li
@
90.0683 91.109 mo
90.2722 91.109 li
@
91.1903 91.109 mo
91.3942 91.109 li
@
92.3123 91.109 mo
92.5163 91.109 li
@
93.4343 91.109 mo
93.6383 91.109 li
@
94.5563 91.109 mo
94.7603 91.109 li
@
95.6783 91.109 mo
95.8823 91.109 li
@
96.8003 91.109 mo
97.0043 91.109 li
@
97.9223 91.109 mo
98.1263 91.109 li
@
99.0443 91.109 mo
99.2483 91.109 li
@
100.166 91.109 mo
100.37 91.109 li
@
101.288 91.109 mo
101.492 91.109 li
@
102.41 91.109 mo
102.614 91.109 li
@
103.532 91.109 mo
103.736 91.109 li
@
104.654 91.109 mo
104.858 91.109 li
@
105.776 91.109 mo
105.98 91.109 li
@
106.898 91.109 mo
107.102 91.109 li
@
108.02 91.109 mo
108.224 91.109 li
@
109.142 91.109 mo
109.346 91.109 li
@
110.264 91.109 mo
110.468 91.109 li
@
111.386 91.109 mo
111.59 91.109 li
@
112.508 91.109 mo
112.712 91.109 li
@
113.63 91.109 mo
113.834 91.109 li
@
114.752 91.109 mo
114.956 91.109 li
@
115.874 91.109 mo
116.078 91.109 li
@
116.996 91.109 mo
117.2 91.109 li
@
118.118 91.109 mo
118.322 91.109 li
@
119.24 91.109 mo
119.444 91.109 li
@
120.362 91.109 mo
120.566 91.109 li
@
121.484 91.109 mo
121.688 91.109 li
@
122.606 91.109 mo
122.81 91.109 li
@
123.728 91.109 mo
123.932 91.109 li
@
124.85 91.109 mo
125.054 91.109 li
@
125.972 91.109 mo
126.176 91.109 li
@
127.094 91.109 mo
127.298 91.109 li
@
128.216 91.109 mo
128.42 91.109 li
@
129.338 91.109 mo
129.542 91.109 li
@
130.46 91.109 mo
130.664 91.109 li
@
131.582 91.109 mo
131.786 91.109 li
@
132.704 91.109 mo
132.908 91.109 li
@
133.826 91.109 mo
134.03 91.109 li
@
134.948 91.109 mo
135.152 91.109 li
@
136.07 91.109 mo
136.274 91.109 li
@
137.192 91.109 mo
137.396 91.109 li
@
138.314 91.109 mo
138.518 91.109 li
@
139.436 91.109 mo
139.64 91.109 li
@
140.558 91.109 mo
140.762 91.109 li
@
141.68 91.109 mo
141.884 91.109 li
@
142.802 91.109 mo
143.006 91.109 li
@
143.924 91.109 mo
144.128 91.109 li
@
145.046 91.109 mo
145.25 91.109 li
@
146.168 91.109 mo
146.372 91.109 li
@
147.29 91.109 mo
147.494 91.109 li
@
148.412 91.109 mo
148.616 91.109 li
@
149.534 91.109 mo
149.738 91.109 li
@
150.656 91.109 mo
150.86 91.109 li
@
151.778 91.109 mo
151.982 91.109 li
@
152.9 91.109 mo
153.104 91.109 li
@
154.022 91.109 mo
154.226 91.109 li
@
155.144 91.109 mo
155.348 91.109 li
@
156.266 91.109 mo
156.47 91.109 li
@
157.388 91.109 mo
157.592 91.109 li
@
158.51 91.109 mo
158.714 91.109 li
@
159.632 91.109 mo
159.836 91.109 li
@
160.754 91.109 mo
160.958 91.109 li
@
161.876 91.109 mo
162.08 91.109 li
@
162.998 91.109 mo
163.202 91.109 li
@
164.12 91.109 mo
164.324 91.109 li
@
165.242 91.109 mo
165.446 91.109 li
@
166.364 91.109 mo
166.568 91.109 li
@
167.486 91.109 mo
167.69 91.109 li
@
168.608 91.109 mo
168.812 91.109 li
@
169.73 91.109 mo
169.934 91.109 li
@
170.852 91.109 mo
171.056 91.109 li
@
171.974 91.109 mo
172.178 91.109 li
@
173.096 91.109 mo
173.3 91.109 li
@
174.218 91.109 mo
174.422 91.109 li
@
175.34 91.109 mo
175.544 91.109 li
@
176.462 91.109 mo
176.666 91.109 li
@
177.584 91.109 mo
177.788 91.109 li
@
178.706 91.109 mo
178.91 91.109 li
@
179.828 91.109 mo
180.032 91.109 li
@
180.95 91.109 mo
181.154 91.109 li
@
182.072 91.109 mo
182.276 91.109 li
@
183.194 91.109 mo
183.398 91.109 li
@
184.316 91.109 mo
184.52 91.109 li
@
185.438 91.109 mo
185.642 91.109 li
@
186.56 91.109 mo
186.764 91.109 li
@
187.682 91.109 mo
187.886 91.109 li
@
188.804 91.109 mo
189.008 91.109 li
@
189.926 91.109 mo
190.13 91.109 li
@
191.048 91.109 mo
191.252 91.109 li
@
192.17 91.109 mo
192.374 91.109 li
@
193.292 91.109 mo
193.496 91.109 li
@
194.414 91.109 mo
194.618 91.109 li
@
195.536 91.109 mo
195.74 91.109 li
@
196.658 91.109 mo
196.862 91.109 li
@
197.78 91.109 mo
197.984 91.109 li
@
198.902 91.109 mo
199.106 91.109 li
@
200.024 91.109 mo
200.228 91.109 li
@
201.146 91.109 mo
201.35 91.109 li
@
202.268 91.109 mo
202.472 91.109 li
@
203.39 91.109 mo
203.594 91.109 li
@
204.512 91.109 mo
204.716 91.109 li
@
205.634 91.109 mo
205.838 91.109 li
@
206.756 91.109 mo
206.96 91.109 li
@
207.878 91.109 mo
208.082 91.109 li
@
209 91.109 mo
209.204 91.109 li
@
210.122 91.109 mo
210.326 91.109 li
@
211.244 91.109 mo
211.448 91.109 li
@
212.366 91.109 mo
212.57 91.109 li
@
213.488 91.109 mo
213.692 91.109 li
@
214.61 91.109 mo
214.814 91.109 li
@
215.732 91.109 mo
215.936 91.109 li
@
216.854 91.109 mo
217.058 91.109 li
@
217.976 91.109 mo
218.18 91.109 li
@
219.098 91.109 mo
219.302 91.109 li
@
220.22 91.109 mo
220.424 91.109 li
@
221.342 91.109 mo
221.546 91.109 li
@
222.464 91.109 mo
222.668 91.109 li
@
223.586 91.109 mo
223.79 91.109 li
@
224.708 91.109 mo
224.912 91.109 li
@
225.83 91.109 mo
226.034 91.109 li
@
226.952 91.109 mo
227.156 91.109 li
@
228.074 91.109 mo
228.278 91.109 li
@
229.196 91.109 mo
229.4 91.109 li
@
230.383 91.11 mo
230.587 91.11 li
@
231.505 91.11 mo
231.709 91.11 li
@
232.627 91.11 mo
232.831 91.11 li
@
233.749 91.11 mo
233.953 91.11 li
@
234.871 91.11 mo
235.075 91.11 li
@
235.993 91.11 mo
236.197 91.11 li
@
237.115 91.11 mo
237.319 91.11 li
@
238.237 91.11 mo
238.441 91.11 li
@
239.359 91.11 mo
239.563 91.11 li
@
240.481 91.11 mo
240.685 91.11 li
@
241.603 91.11 mo
241.807 91.11 li
@
242.725 91.11 mo
242.929 91.11 li
@
243.847 91.11 mo
244.051 91.11 li
@
244.969 91.11 mo
245.173 91.11 li
@
246.091 91.11 mo
246.295 91.11 li
@
247.213 91.11 mo
247.417 91.11 li
@
248.335 91.11 mo
248.539 91.11 li
@
249.457 91.11 mo
249.661 91.11 li
@
250.579 91.11 mo
250.783 91.11 li
@
251.701 91.11 mo
251.905 91.11 li
@
252.823 91.11 mo
253.027 91.11 li
@
253.945 91.11 mo
254.149 91.11 li
@
255.067 91.11 mo
255.271 91.11 li
@
256.189 91.11 mo
256.393 91.11 li
@
257.311 91.11 mo
257.515 91.11 li
@
258.433 91.11 mo
258.637 91.11 li
@
259.555 91.11 mo
259.759 91.11 li
@
260.677 91.11 mo
260.881 91.11 li
@
261.799 91.11 mo
262.003 91.11 li
@
262.921 91.11 mo
263.125 91.11 li
@
264.043 91.11 mo
264.247 91.11 li
@
265.165 91.11 mo
265.369 91.11 li
@
266.287 91.11 mo
266.491 91.11 li
@
267.409 91.11 mo
267.613 91.11 li
@
268.531 91.11 mo
268.735 91.11 li
@
269.653 91.11 mo
269.857 91.11 li
@
270.775 91.11 mo
270.979 91.11 li
@
271.897 91.11 mo
272.101 91.11 li
@
273.019 91.11 mo
273.223 91.11 li
@
274.141 91.11 mo
274.345 91.11 li
@
275.263 91.11 mo
275.467 91.11 li
@
276.385 91.11 mo
276.589 91.11 li
@
277.507 91.11 mo
277.711 91.11 li
@
278.629 91.11 mo
278.833 91.11 li
@
279.751 91.11 mo
279.955 91.11 li
@
280.873 91.11 mo
281.077 91.11 li
@
281.995 91.11 mo
282.199 91.11 li
@
283.117 91.11 mo
283.321 91.11 li
@
284.239 91.11 mo
284.443 91.11 li
@
285.361 91.11 mo
285.565 91.11 li
@
286.483 91.11 mo
286.687 91.11 li
@
287.605 91.11 mo
287.809 91.11 li
@
288.727 91.11 mo
288.931 91.11 li
@
289.849 91.11 mo
290.053 91.11 li
@
290.971 91.11 mo
291.175 91.11 li
@
292.093 91.11 mo
292.297 91.11 li
@
60.8942 65.926 mo
61.0982 65.926 li
@
62.0162 65.926 mo
62.2202 65.926 li
@
63.1382 65.926 mo
63.3422 65.926 li
@
64.2602 65.926 mo
64.4642 65.926 li
@
65.3822 65.926 mo
65.5862 65.926 li
@
66.5042 65.926 mo
66.7082 65.926 li
@
67.6262 65.926 mo
67.8302 65.926 li
@
68.7482 65.926 mo
68.9522 65.926 li
@
69.8702 65.926 mo
70.0742 65.926 li
@
70.9922 65.926 mo
71.1962 65.926 li
@
72.1142 65.926 mo
72.3182 65.926 li
@
73.2362 65.926 mo
73.4402 65.926 li
@
74.3582 65.926 mo
74.5622 65.926 li
@
75.4802 65.926 mo
75.6842 65.926 li
@
76.6022 65.926 mo
76.8062 65.926 li
@
77.7242 65.926 mo
77.9282 65.926 li
@
78.8462 65.926 mo
79.0502 65.926 li
@
79.9682 65.926 mo
80.1722 65.926 li
@
81.0902 65.926 mo
81.2942 65.926 li
@
82.2122 65.926 mo
82.4162 65.926 li
@
83.3342 65.926 mo
83.5382 65.926 li
@
84.4562 65.926 mo
84.6602 65.926 li
@
85.5782 65.926 mo
85.7822 65.926 li
@
86.7002 65.926 mo
86.9042 65.926 li
@
87.8222 65.926 mo
88.0262 65.926 li
@
88.9442 65.926 mo
89.1482 65.926 li
@
90.0662 65.926 mo
90.2702 65.926 li
@
91.1882 65.926 mo
91.3922 65.926 li
@
92.3102 65.926 mo
92.5142 65.926 li
@
93.4322 65.926 mo
93.6362 65.926 li
@
94.5542 65.926 mo
94.7582 65.926 li
@
95.6762 65.926 mo
95.8802 65.926 li
@
96.7982 65.926 mo
97.0022 65.926 li
@
97.9202 65.926 mo
98.1242 65.926 li
@
99.0422 65.926 mo
99.2462 65.926 li
@
100.164 65.926 mo
100.368 65.926 li
@
101.286 65.926 mo
101.49 65.926 li
@
102.408 65.926 mo
102.612 65.926 li
@
103.53 65.926 mo
103.734 65.926 li
@
104.652 65.926 mo
104.856 65.926 li
@
105.774 65.926 mo
105.978 65.926 li
@
106.896 65.926 mo
107.1 65.926 li
@
108.018 65.926 mo
108.222 65.926 li
@
109.14 65.926 mo
109.344 65.926 li
@
110.262 65.926 mo
110.466 65.926 li
@
111.384 65.926 mo
111.588 65.926 li
@
112.506 65.926 mo
112.71 65.926 li
@
113.628 65.926 mo
113.832 65.926 li
@
114.75 65.926 mo
114.954 65.926 li
@
115.872 65.926 mo
116.076 65.926 li
@
116.994 65.926 mo
117.198 65.926 li
@
118.116 65.926 mo
118.32 65.926 li
@
119.238 65.926 mo
119.442 65.926 li
@
120.36 65.926 mo
120.564 65.926 li
@
121.482 65.926 mo
121.686 65.926 li
@
122.604 65.926 mo
122.808 65.926 li
@
123.726 65.926 mo
123.93 65.926 li
@
124.848 65.926 mo
125.052 65.926 li
@
125.97 65.926 mo
126.174 65.926 li
@
127.092 65.926 mo
127.296 65.926 li
@
128.214 65.926 mo
128.418 65.926 li
@
129.336 65.926 mo
129.54 65.926 li
@
130.458 65.926 mo
130.662 65.926 li
@
131.58 65.926 mo
131.784 65.926 li
@
132.702 65.926 mo
132.906 65.926 li
@
133.824 65.926 mo
134.028 65.926 li
@
134.946 65.926 mo
135.15 65.926 li
@
136.068 65.926 mo
136.272 65.926 li
@
137.19 65.926 mo
137.394 65.926 li
@
138.312 65.926 mo
138.516 65.926 li
@
139.434 65.926 mo
139.638 65.926 li
@
140.556 65.926 mo
140.76 65.926 li
@
141.678 65.926 mo
141.882 65.926 li
@
142.8 65.926 mo
143.004 65.926 li
@
143.922 65.926 mo
144.126 65.926 li
@
145.044 65.926 mo
145.248 65.926 li
@
146.166 65.926 mo
146.37 65.926 li
@
147.288 65.926 mo
147.492 65.926 li
@
148.41 65.926 mo
148.614 65.926 li
@
149.532 65.926 mo
149.736 65.926 li
@
150.654 65.926 mo
150.858 65.926 li
@
151.776 65.926 mo
151.98 65.926 li
@
152.898 65.926 mo
153.102 65.926 li
@
154.02 65.926 mo
154.224 65.926 li
@
155.142 65.926 mo
155.346 65.926 li
@
156.264 65.926 mo
156.468 65.926 li
@
157.386 65.926 mo
157.59 65.926 li
@
158.508 65.926 mo
158.712 65.926 li
@
159.63 65.926 mo
159.834 65.926 li
@
160.752 65.926 mo
160.956 65.926 li
@
161.874 65.926 mo
162.078 65.926 li
@
162.996 65.926 mo
163.2 65.926 li
@
164.118 65.926 mo
164.322 65.926 li
@
165.24 65.926 mo
165.444 65.926 li
@
166.362 65.926 mo
166.566 65.926 li
@
167.484 65.926 mo
167.688 65.926 li
@
168.606 65.926 mo
168.81 65.926 li
@
169.728 65.926 mo
169.932 65.926 li
@
170.85 65.926 mo
171.054 65.926 li
@
171.972 65.926 mo
172.176 65.926 li
@
173.094 65.926 mo
173.298 65.926 li
@
174.216 65.926 mo
174.42 65.926 li
@
175.338 65.926 mo
175.542 65.926 li
@
176.46 65.926 mo
176.664 65.926 li
@
177.582 65.926 mo
177.786 65.926 li
@
178.704 65.926 mo
178.908 65.926 li
@
179.826 65.926 mo
180.03 65.926 li
@
180.948 65.926 mo
181.152 65.926 li
@
182.07 65.926 mo
182.274 65.926 li
@
183.192 65.926 mo
183.396 65.926 li
@
184.314 65.926 mo
184.518 65.926 li
@
185.436 65.926 mo
185.64 65.926 li
@
186.558 65.926 mo
186.762 65.926 li
@
187.68 65.926 mo
187.884 65.926 li
@
188.802 65.926 mo
189.006 65.926 li
@
189.924 65.926 mo
190.128 65.926 li
@
191.046 65.926 mo
191.25 65.926 li
@
192.168 65.926 mo
192.372 65.926 li
@
193.29 65.926 mo
193.494 65.926 li
@
194.412 65.926 mo
194.616 65.926 li
@
195.534 65.926 mo
195.738 65.926 li
@
196.656 65.926 mo
196.86 65.926 li
@
197.778 65.926 mo
197.982 65.926 li
@
198.9 65.926 mo
199.104 65.926 li
@
200.022 65.926 mo
200.226 65.926 li
@
201.144 65.926 mo
201.348 65.926 li
@
202.266 65.926 mo
202.47 65.926 li
@
203.388 65.926 mo
203.592 65.926 li
@
204.51 65.926 mo
204.714 65.926 li
@
205.632 65.926 mo
205.836 65.926 li
@
206.754 65.926 mo
206.958 65.926 li
@
207.876 65.926 mo
208.08 65.926 li
@
208.998 65.926 mo
209.202 65.926 li
@
210.12 65.926 mo
210.324 65.926 li
@
211.242 65.926 mo
211.446 65.926 li
@
212.364 65.926 mo
212.568 65.926 li
@
213.486 65.926 mo
213.69 65.926 li
@
214.608 65.926 mo
214.812 65.926 li
@
215.73 65.926 mo
215.934 65.926 li
@
216.852 65.926 mo
217.056 65.926 li
@
217.974 65.926 mo
218.178 65.926 li
@
219.096 65.926 mo
219.3 65.926 li
@
220.218 65.926 mo
220.422 65.926 li
@
221.34 65.926 mo
221.544 65.926 li
@
222.526 65.926 mo
222.73 65.926 li
@
223.648 65.926 mo
223.852 65.926 li
@
224.77 65.926 mo
224.974 65.926 li
@
225.892 65.926 mo
226.096 65.926 li
@
227.014 65.926 mo
227.218 65.926 li
@
228.136 65.926 mo
228.34 65.926 li
@
229.258 65.926 mo
229.462 65.926 li
@
230.38 65.926 mo
230.584 65.926 li
@
231.502 65.926 mo
231.706 65.926 li
@
232.624 65.926 mo
232.828 65.926 li
@
233.746 65.926 mo
233.95 65.926 li
@
234.868 65.926 mo
235.072 65.926 li
@
235.99 65.926 mo
236.194 65.926 li
@
237.112 65.926 mo
237.316 65.926 li
@
238.234 65.926 mo
238.438 65.926 li
@
239.356 65.926 mo
239.56 65.926 li
@
240.478 65.926 mo
240.682 65.926 li
@
241.6 65.926 mo
241.804 65.926 li
@
242.722 65.926 mo
242.926 65.926 li
@
243.844 65.926 mo
244.048 65.926 li
@
244.966 65.926 mo
245.17 65.926 li
@
246.088 65.926 mo
246.292 65.926 li
@
247.21 65.926 mo
247.414 65.926 li
@
248.332 65.926 mo
248.536 65.926 li
@
249.454 65.926 mo
249.658 65.926 li
@
250.576 65.926 mo
250.78 65.926 li
@
251.698 65.926 mo
251.902 65.926 li
@
252.82 65.926 mo
253.024 65.926 li
@
253.942 65.926 mo
254.146 65.926 li
@
255.064 65.926 mo
255.268 65.926 li
@
256.186 65.926 mo
256.39 65.926 li
@
257.308 65.926 mo
257.512 65.926 li
@
258.43 65.926 mo
258.634 65.926 li
@
259.552 65.926 mo
259.756 65.926 li
@
260.674 65.926 mo
260.878 65.926 li
@
261.796 65.926 mo
262 65.926 li
@
262.918 65.926 mo
263.122 65.926 li
@
264.04 65.926 mo
264.244 65.926 li
@
265.162 65.926 mo
265.366 65.926 li
@
266.284 65.926 mo
266.488 65.926 li
@
267.406 65.926 mo
267.61 65.926 li
@
268.528 65.926 mo
268.732 65.926 li
@
269.65 65.926 mo
269.854 65.926 li
@
270.772 65.926 mo
270.976 65.926 li
@
271.894 65.926 mo
272.098 65.926 li
@
273.016 65.926 mo
273.22 65.926 li
@
274.138 65.926 mo
274.342 65.926 li
@
275.26 65.926 mo
275.464 65.926 li
@
276.382 65.926 mo
276.586 65.926 li
@
277.504 65.926 mo
277.708 65.926 li
@
278.626 65.926 mo
278.83 65.926 li
@
279.748 65.926 mo
279.952 65.926 li
@
280.87 65.926 mo
281.074 65.926 li
@
281.992 65.926 mo
282.196 65.926 li
@
283.114 65.926 mo
283.318 65.926 li
@
284.236 65.926 mo
284.44 65.926 li
@
285.358 65.926 mo
285.562 65.926 li
@
286.48 65.926 mo
286.684 65.926 li
@
287.602 65.926 mo
287.806 65.926 li
@
288.724 65.926 mo
288.928 65.926 li
@
289.846 65.926 mo
290.05 65.926 li
@
290.968 65.926 mo
291.172 65.926 li
@
292.09 65.926 mo
292.294 65.926 li
@
60.8911 40.844 mo
61.0951 40.844 li
@
62.0131 40.844 mo
62.2171 40.844 li
@
63.1351 40.844 mo
63.3391 40.844 li
@
64.2571 40.844 mo
64.4611 40.844 li
@
65.3791 40.844 mo
65.5831 40.844 li
@
66.5011 40.844 mo
66.7051 40.844 li
@
67.6231 40.844 mo
67.8271 40.844 li
@
68.7451 40.844 mo
68.9491 40.844 li
@
69.8671 40.844 mo
70.0711 40.844 li
@
70.9891 40.844 mo
71.1931 40.844 li
@
72.1111 40.844 mo
72.3151 40.844 li
@
73.2331 40.844 mo
73.4371 40.844 li
@
74.3551 40.844 mo
74.5591 40.844 li
@
75.4771 40.844 mo
75.6811 40.844 li
@
76.5991 40.844 mo
76.8031 40.844 li
@
77.7211 40.844 mo
77.9251 40.844 li
@
78.8431 40.844 mo
79.0471 40.844 li
@
79.9651 40.844 mo
80.1691 40.844 li
@
81.0871 40.844 mo
81.2911 40.844 li
@
82.2091 40.844 mo
82.4131 40.844 li
@
83.3311 40.844 mo
83.5351 40.844 li
@
84.4531 40.844 mo
84.6571 40.844 li
@
85.5751 40.844 mo
85.7791 40.844 li
@
86.6972 40.844 mo
86.9011 40.844 li
@
87.8192 40.844 mo
88.0231 40.844 li
@
88.9412 40.844 mo
89.1451 40.844 li
@
90.0632 40.844 mo
90.2672 40.844 li
@
91.1852 40.844 mo
91.3892 40.844 li
@
92.3072 40.844 mo
92.5112 40.844 li
@
93.4292 40.844 mo
93.6332 40.844 li
@
94.5512 40.844 mo
94.7552 40.844 li
@
95.6732 40.844 mo
95.8772 40.844 li
@
96.7952 40.844 mo
96.9992 40.844 li
@
97.9172 40.844 mo
98.1212 40.844 li
@
99.0392 40.844 mo
99.2432 40.844 li
@
100.161 40.844 mo
100.365 40.844 li
@
101.283 40.844 mo
101.487 40.844 li
@
102.405 40.844 mo
102.609 40.844 li
@
103.527 40.844 mo
103.731 40.844 li
@
104.649 40.844 mo
104.853 40.844 li
@
105.771 40.844 mo
105.975 40.844 li
@
106.893 40.844 mo
107.097 40.844 li
@
108.015 40.844 mo
108.219 40.844 li
@
109.137 40.844 mo
109.341 40.844 li
@
110.259 40.844 mo
110.463 40.844 li
@
111.381 40.844 mo
111.585 40.844 li
@
112.503 40.844 mo
112.707 40.844 li
@
113.625 40.844 mo
113.829 40.844 li
@
114.747 40.844 mo
114.951 40.844 li
@
115.869 40.844 mo
116.073 40.844 li
@
116.991 40.844 mo
117.195 40.844 li
@
118.113 40.844 mo
118.317 40.844 li
@
119.235 40.844 mo
119.439 40.844 li
@
120.357 40.844 mo
120.561 40.844 li
@
121.479 40.844 mo
121.683 40.844 li
@
122.601 40.844 mo
122.805 40.844 li
@
123.723 40.844 mo
123.927 40.844 li
@
124.845 40.844 mo
125.049 40.844 li
@
125.967 40.844 mo
126.171 40.844 li
@
127.089 40.844 mo
127.293 40.844 li
@
128.211 40.844 mo
128.415 40.844 li
@
129.333 40.844 mo
129.537 40.844 li
@
130.455 40.844 mo
130.659 40.844 li
@
131.577 40.844 mo
131.781 40.844 li
@
132.699 40.844 mo
132.903 40.844 li
@
133.821 40.844 mo
134.025 40.844 li
@
134.943 40.844 mo
135.147 40.844 li
@
136.065 40.844 mo
136.269 40.844 li
@
137.187 40.844 mo
137.391 40.844 li
@
138.309 40.844 mo
138.513 40.844 li
@
139.431 40.844 mo
139.635 40.844 li
@
140.553 40.844 mo
140.757 40.844 li
@
141.675 40.844 mo
141.879 40.844 li
@
142.797 40.844 mo
143.001 40.844 li
@
143.919 40.844 mo
144.123 40.844 li
@
145.041 40.844 mo
145.245 40.844 li
@
146.163 40.844 mo
146.367 40.844 li
@
147.285 40.844 mo
147.489 40.844 li
@
148.407 40.844 mo
148.611 40.844 li
@
149.529 40.844 mo
149.733 40.844 li
@
150.651 40.844 mo
150.855 40.844 li
@
151.773 40.844 mo
151.977 40.844 li
@
152.895 40.844 mo
153.099 40.844 li
@
154.017 40.844 mo
154.221 40.844 li
@
155.139 40.844 mo
155.343 40.844 li
@
156.261 40.844 mo
156.465 40.844 li
@
157.383 40.844 mo
157.587 40.844 li
@
158.505 40.844 mo
158.709 40.844 li
@
159.627 40.844 mo
159.831 40.844 li
@
160.749 40.844 mo
160.953 40.844 li
@
161.871 40.844 mo
162.075 40.844 li
@
162.993 40.844 mo
163.197 40.844 li
@
164.115 40.844 mo
164.319 40.844 li
@
165.237 40.844 mo
165.441 40.844 li
@
166.359 40.844 mo
166.563 40.844 li
@
167.481 40.844 mo
167.685 40.844 li
@
168.603 40.844 mo
168.807 40.844 li
@
169.725 40.844 mo
169.929 40.844 li
@
170.847 40.844 mo
171.051 40.844 li
@
171.969 40.844 mo
172.173 40.844 li
@
173.091 40.844 mo
173.295 40.844 li
@
174.213 40.844 mo
174.417 40.844 li
@
175.335 40.844 mo
175.539 40.844 li
@
176.457 40.844 mo
176.661 40.844 li
@
177.579 40.844 mo
177.783 40.844 li
@
178.701 40.844 mo
178.905 40.844 li
@
179.823 40.844 mo
180.027 40.844 li
@
180.945 40.844 mo
181.149 40.844 li
@
182.067 40.844 mo
182.271 40.844 li
@
183.189 40.844 mo
183.393 40.844 li
@
184.311 40.844 mo
184.515 40.844 li
@
185.433 40.844 mo
185.637 40.844 li
@
186.555 40.844 mo
186.759 40.844 li
@
187.677 40.844 mo
187.881 40.844 li
@
188.799 40.844 mo
189.003 40.844 li
@
189.921 40.844 mo
190.125 40.844 li
@
191.043 40.844 mo
191.247 40.844 li
@
192.165 40.844 mo
192.369 40.844 li
@
193.287 40.844 mo
193.491 40.844 li
@
194.409 40.844 mo
194.613 40.844 li
@
195.531 40.844 mo
195.735 40.844 li
@
196.653 40.844 mo
196.857 40.844 li
@
197.775 40.844 mo
197.979 40.844 li
@
198.897 40.844 mo
199.101 40.844 li
@
200.019 40.844 mo
200.223 40.844 li
@
201.141 40.844 mo
201.345 40.844 li
@
202.263 40.844 mo
202.467 40.844 li
@
203.385 40.844 mo
203.589 40.844 li
@
204.507 40.844 mo
204.711 40.844 li
@
205.629 40.844 mo
205.833 40.844 li
@
206.751 40.844 mo
206.955 40.844 li
@
207.873 40.844 mo
208.077 40.844 li
@
208.995 40.844 mo
209.199 40.844 li
@
210.117 40.844 mo
210.321 40.844 li
@
211.239 40.844 mo
211.443 40.844 li
@
212.361 40.844 mo
212.565 40.844 li
@
213.483 40.844 mo
213.687 40.844 li
@
214.67 40.844 mo
214.874 40.844 li
@
215.792 40.844 mo
215.996 40.844 li
@
216.914 40.844 mo
217.118 40.844 li
@
218.036 40.844 mo
218.24 40.844 li
@
219.158 40.844 mo
219.362 40.844 li
@
220.28 40.844 mo
220.484 40.844 li
@
221.402 40.844 mo
221.606 40.844 li
@
222.524 40.844 mo
222.728 40.844 li
@
223.646 40.844 mo
223.85 40.844 li
@
224.768 40.844 mo
224.972 40.844 li
@
225.89 40.844 mo
226.094 40.844 li
@
227.012 40.844 mo
227.216 40.844 li
@
228.134 40.844 mo
228.338 40.844 li
@
229.256 40.844 mo
229.46 40.844 li
@
230.378 40.844 mo
230.582 40.844 li
@
231.5 40.844 mo
231.704 40.844 li
@
232.622 40.844 mo
232.826 40.844 li
@
233.744 40.844 mo
233.948 40.844 li
@
234.866 40.844 mo
235.07 40.844 li
@
235.988 40.844 mo
236.192 40.844 li
@
237.11 40.844 mo
237.314 40.844 li
@
238.232 40.844 mo
238.436 40.844 li
@
239.354 40.844 mo
239.558 40.844 li
@
240.476 40.844 mo
240.68 40.844 li
@
241.598 40.844 mo
241.802 40.844 li
@
242.72 40.844 mo
242.924 40.844 li
@
243.842 40.844 mo
244.046 40.844 li
@
244.964 40.844 mo
245.168 40.844 li
@
246.086 40.844 mo
246.29 40.844 li
@
247.208 40.844 mo
247.412 40.844 li
@
248.33 40.844 mo
248.534 40.844 li
@
249.452 40.844 mo
249.656 40.844 li
@
250.574 40.844 mo
250.778 40.844 li
@
251.696 40.844 mo
251.9 40.844 li
@
252.818 40.844 mo
253.022 40.844 li
@
253.94 40.844 mo
254.144 40.844 li
@
255.062 40.844 mo
255.266 40.844 li
@
256.184 40.844 mo
256.388 40.844 li
@
257.306 40.844 mo
257.51 40.844 li
@
258.428 40.844 mo
258.632 40.844 li
@
259.55 40.844 mo
259.754 40.844 li
@
260.672 40.844 mo
260.876 40.844 li
@
261.794 40.844 mo
261.998 40.844 li
@
262.916 40.844 mo
263.12 40.844 li
@
264.038 40.844 mo
264.242 40.844 li
@
265.16 40.844 mo
265.364 40.844 li
@
266.282 40.844 mo
266.486 40.844 li
@
267.404 40.844 mo
267.608 40.844 li
@
268.526 40.844 mo
268.73 40.844 li
@
269.648 40.844 mo
269.852 40.844 li
@
270.77 40.844 mo
270.974 40.844 li
@
271.892 40.844 mo
272.096 40.844 li
@
273.014 40.844 mo
273.218 40.844 li
@
274.136 40.844 mo
274.34 40.844 li
@
275.258 40.844 mo
275.462 40.844 li
@
276.38 40.844 mo
276.584 40.844 li
@
277.502 40.844 mo
277.706 40.844 li
@
278.624 40.844 mo
278.828 40.844 li
@
279.746 40.844 mo
279.95 40.844 li
@
280.868 40.844 mo
281.072 40.844 li
@
281.99 40.844 mo
282.194 40.844 li
@
283.112 40.844 mo
283.316 40.844 li
@
284.234 40.844 mo
284.438 40.844 li
@
285.356 40.844 mo
285.56 40.844 li
@
286.478 40.844 mo
286.682 40.844 li
@
287.6 40.844 mo
287.804 40.844 li
@
288.722 40.844 mo
288.926 40.844 li
@
289.844 40.844 mo
290.048 40.844 li
@
290.966 40.844 mo
291.17 40.844 li
@
292.088 40.844 mo
292.292 40.844 li
@
60.8891 15.66 mo
61.0931 15.66 li
@
62.0111 15.66 mo
62.2151 15.66 li
@
63.1331 15.66 mo
63.3371 15.66 li
@
64.2551 15.66 mo
64.4591 15.66 li
@
65.3771 15.66 mo
65.5811 15.66 li
@
66.4991 15.66 mo
66.7031 15.66 li
@
67.6211 15.66 mo
67.8251 15.66 li
@
68.7431 15.66 mo
68.9471 15.66 li
@
69.8651 15.66 mo
70.0691 15.66 li
@
70.9871 15.66 mo
71.1911 15.66 li
@
72.1091 15.66 mo
72.3131 15.66 li
@
73.2311 15.66 mo
73.4351 15.66 li
@
74.3531 15.66 mo
74.5571 15.66 li
@
75.4751 15.66 mo
75.6791 15.66 li
@
76.5971 15.66 mo
76.8011 15.66 li
@
77.7191 15.66 mo
77.9231 15.66 li
@
78.8411 15.66 mo
79.0451 15.66 li
@
79.9631 15.66 mo
80.1671 15.66 li
@
81.0851 15.66 mo
81.2891 15.66 li
@
82.2071 15.66 mo
82.4111 15.66 li
@
83.3291 15.66 mo
83.5331 15.66 li
@
84.4511 15.66 mo
84.6551 15.66 li
@
85.5731 15.66 mo
85.7771 15.66 li
@
86.6951 15.66 mo
86.8991 15.66 li
@
87.8171 15.66 mo
88.0211 15.66 li
@
88.9391 15.66 mo
89.1431 15.66 li
@
90.0611 15.66 mo
90.2651 15.66 li
@
91.1831 15.66 mo
91.3871 15.66 li
@
92.3051 15.66 mo
92.5091 15.66 li
@
93.4271 15.66 mo
93.6311 15.66 li
@
94.5491 15.66 mo
94.7531 15.66 li
@
95.6711 15.66 mo
95.8751 15.66 li
@
96.7931 15.66 mo
96.9971 15.66 li
@
97.9151 15.66 mo
98.1191 15.66 li
@
99.0371 15.66 mo
99.2411 15.66 li
@
100.159 15.66 mo
100.363 15.66 li
@
101.281 15.66 mo
101.485 15.66 li
@
102.403 15.66 mo
102.607 15.66 li
@
103.525 15.66 mo
103.729 15.66 li
@
104.647 15.66 mo
104.851 15.66 li
@
105.769 15.66 mo
105.973 15.66 li
@
106.891 15.66 mo
107.095 15.66 li
@
108.013 15.66 mo
108.217 15.66 li
@
109.135 15.66 mo
109.339 15.66 li
@
110.257 15.66 mo
110.461 15.66 li
@
111.379 15.66 mo
111.583 15.66 li
@
112.501 15.66 mo
112.705 15.66 li
@
113.623 15.66 mo
113.827 15.66 li
@
114.745 15.66 mo
114.949 15.66 li
@
115.867 15.66 mo
116.071 15.66 li
@
116.989 15.66 mo
117.193 15.66 li
@
118.111 15.66 mo
118.315 15.66 li
@
119.233 15.66 mo
119.437 15.66 li
@
120.355 15.66 mo
120.559 15.66 li
@
121.477 15.66 mo
121.681 15.66 li
@
122.599 15.66 mo
122.803 15.66 li
@
123.721 15.66 mo
123.925 15.66 li
@
124.843 15.66 mo
125.047 15.66 li
@
125.965 15.66 mo
126.169 15.66 li
@
127.087 15.66 mo
127.291 15.66 li
@
128.209 15.66 mo
128.413 15.66 li
@
129.331 15.66 mo
129.535 15.66 li
@
130.453 15.66 mo
130.657 15.66 li
@
131.575 15.66 mo
131.779 15.66 li
@
132.697 15.66 mo
132.901 15.66 li
@
133.819 15.66 mo
134.023 15.66 li
@
134.941 15.66 mo
135.145 15.66 li
@
136.063 15.66 mo
136.267 15.66 li
@
137.185 15.66 mo
137.389 15.66 li
@
138.307 15.66 mo
138.511 15.66 li
@
139.429 15.66 mo
139.633 15.66 li
@
140.551 15.66 mo
140.755 15.66 li
@
141.673 15.66 mo
141.877 15.66 li
@
142.795 15.66 mo
142.999 15.66 li
@
143.917 15.66 mo
144.121 15.66 li
@
145.039 15.66 mo
145.243 15.66 li
@
146.161 15.66 mo
146.365 15.66 li
@
147.283 15.66 mo
147.487 15.66 li
@
148.405 15.66 mo
148.609 15.66 li
@
149.527 15.66 mo
149.731 15.66 li
@
150.649 15.66 mo
150.853 15.66 li
@
151.771 15.66 mo
151.975 15.66 li
@
152.893 15.66 mo
153.097 15.66 li
@
154.015 15.66 mo
154.219 15.66 li
@
155.137 15.66 mo
155.341 15.66 li
@
156.259 15.66 mo
156.463 15.66 li
@
157.381 15.66 mo
157.585 15.66 li
@
158.503 15.66 mo
158.707 15.66 li
@
159.625 15.66 mo
159.829 15.66 li
@
160.747 15.66 mo
160.951 15.66 li
@
161.869 15.66 mo
162.073 15.66 li
@
162.991 15.66 mo
163.195 15.66 li
@
164.113 15.66 mo
164.317 15.66 li
@
165.235 15.66 mo
165.439 15.66 li
@
166.357 15.66 mo
166.561 15.66 li
@
167.479 15.66 mo
167.683 15.66 li
@
168.601 15.66 mo
168.805 15.66 li
@
169.723 15.66 mo
169.927 15.66 li
@
170.845 15.66 mo
171.049 15.66 li
@
171.967 15.66 mo
172.171 15.66 li
@
173.089 15.66 mo
173.293 15.66 li
@
174.211 15.66 mo
174.415 15.66 li
@
175.333 15.66 mo
175.537 15.66 li
@
176.455 15.66 mo
176.659 15.66 li
@
177.577 15.66 mo
177.781 15.66 li
@
178.699 15.66 mo
178.903 15.66 li
@
179.821 15.66 mo
180.025 15.66 li
@
180.943 15.66 mo
181.147 15.66 li
@
182.065 15.66 mo
182.269 15.66 li
@
183.187 15.66 mo
183.391 15.66 li
@
184.309 15.66 mo
184.513 15.66 li
@
185.431 15.66 mo
185.635 15.66 li
@
186.553 15.66 mo
186.757 15.66 li
@
187.675 15.66 mo
187.879 15.66 li
@
188.797 15.66 mo
189.001 15.66 li
@
189.919 15.66 mo
190.123 15.66 li
@
191.041 15.66 mo
191.245 15.66 li
@
192.163 15.66 mo
192.367 15.66 li
@
193.285 15.66 mo
193.489 15.66 li
@
194.407 15.66 mo
194.611 15.66 li
@
195.529 15.66 mo
195.733 15.66 li
@
196.651 15.66 mo
196.855 15.66 li
@
197.773 15.66 mo
197.977 15.66 li
@
198.895 15.66 mo
199.099 15.66 li
@
200.017 15.66 mo
200.221 15.66 li
@
201.139 15.66 mo
201.343 15.66 li
@
202.261 15.66 mo
202.465 15.66 li
@
203.383 15.66 mo
203.587 15.66 li
@
204.505 15.66 mo
204.709 15.66 li
@
205.627 15.66 mo
205.831 15.66 li
@
206.814 15.66 mo
207.018 15.66 li
@
207.936 15.66 mo
208.14 15.66 li
@
209.058 15.66 mo
209.262 15.66 li
@
210.18 15.66 mo
210.384 15.66 li
@
211.302 15.66 mo
211.506 15.66 li
@
212.424 15.66 mo
212.628 15.66 li
@
213.546 15.66 mo
213.75 15.66 li
@
214.668 15.66 mo
214.872 15.66 li
@
215.79 15.66 mo
215.994 15.66 li
@
216.912 15.66 mo
217.116 15.66 li
@
218.034 15.66 mo
218.238 15.66 li
@
219.156 15.66 mo
219.36 15.66 li
@
220.278 15.66 mo
220.482 15.66 li
@
221.4 15.66 mo
221.604 15.66 li
@
222.522 15.66 mo
222.726 15.66 li
@
223.644 15.66 mo
223.848 15.66 li
@
224.766 15.66 mo
224.97 15.66 li
@
225.888 15.66 mo
226.092 15.66 li
@
227.01 15.66 mo
227.214 15.66 li
@
228.132 15.66 mo
228.336 15.66 li
@
229.254 15.66 mo
229.458 15.66 li
@
230.376 15.66 mo
230.58 15.66 li
@
231.498 15.66 mo
231.702 15.66 li
@
232.62 15.66 mo
232.824 15.66 li
@
233.742 15.66 mo
233.946 15.66 li
@
234.864 15.66 mo
235.068 15.66 li
@
235.986 15.66 mo
236.19 15.66 li
@
237.108 15.66 mo
237.312 15.66 li
@
238.23 15.66 mo
238.434 15.66 li
@
239.352 15.66 mo
239.556 15.66 li
@
240.474 15.66 mo
240.678 15.66 li
@
241.596 15.66 mo
241.8 15.66 li
@
242.718 15.66 mo
242.922 15.66 li
@
243.84 15.66 mo
244.044 15.66 li
@
244.962 15.66 mo
245.166 15.66 li
@
246.084 15.66 mo
246.288 15.66 li
@
247.206 15.66 mo
247.41 15.66 li
@
248.328 15.66 mo
248.532 15.66 li
@
249.45 15.66 mo
249.654 15.66 li
@
250.572 15.66 mo
250.776 15.66 li
@
251.694 15.66 mo
251.898 15.66 li
@
252.816 15.66 mo
253.02 15.66 li
@
253.938 15.66 mo
254.142 15.66 li
@
255.06 15.66 mo
255.264 15.66 li
@
256.182 15.66 mo
256.386 15.66 li
@
257.304 15.66 mo
257.508 15.66 li
@
258.426 15.66 mo
258.63 15.66 li
@
259.548 15.66 mo
259.752 15.66 li
@
260.67 15.66 mo
260.874 15.66 li
@
261.792 15.66 mo
261.996 15.66 li
@
262.914 15.66 mo
263.118 15.66 li
@
264.036 15.66 mo
264.24 15.66 li
@
265.158 15.66 mo
265.362 15.66 li
@
266.28 15.66 mo
266.484 15.66 li
@
267.402 15.66 mo
267.606 15.66 li
@
268.524 15.66 mo
268.728 15.66 li
@
269.646 15.66 mo
269.85 15.66 li
@
270.768 15.66 mo
270.972 15.66 li
@
271.89 15.66 mo
272.094 15.66 li
@
273.012 15.66 mo
273.216 15.66 li
@
274.134 15.66 mo
274.338 15.66 li
@
275.256 15.66 mo
275.46 15.66 li
@
276.378 15.66 mo
276.582 15.66 li
@
277.5 15.66 mo
277.704 15.66 li
@
278.622 15.66 mo
278.826 15.66 li
@
279.744 15.66 mo
279.948 15.66 li
@
280.866 15.66 mo
281.07 15.66 li
@
281.988 15.66 mo
282.192 15.66 li
@
283.11 15.66 mo
283.314 15.66 li
@
284.232 15.66 mo
284.436 15.66 li
@
285.354 15.66 mo
285.558 15.66 li
@
286.476 15.66 mo
286.68 15.66 li
@
287.598 15.66 mo
287.802 15.66 li
@
288.72 15.66 mo
288.924 15.66 li
@
289.842 15.66 mo
290.046 15.66 li
@
290.964 15.66 mo
291.168 15.66 li
@
292.086 15.66 mo
292.29 15.66 li
@
.306 lw
118.966 179.1 mo
118.966 3.12003 li
@
177.021 179.1 mo
177.021 3.12003 li
@
235.076 179.1 mo
235.076 3.12003 li
@
60.912 153.916 mo
293.131 153.916 li
@
60.912 128.834 mo
293.131 128.834 li
@
60.912 103.65 mo
293.131 103.65 li
@
60.912 78.568 mo
293.131 78.568 li
@
60.912 53.384 mo
293.131 53.384 li
@
60.912 28.302 mo
293.131 28.302 li
@
59.265 187.934 mo
59.265 187.339 59.326 186.859 59.449 186.496 cv
59.572 186.133 59.754 185.853 59.995 185.657 cv
60.237 185.46 60.541 185.361 60.908 185.361 cv
61.179 185.361 61.416 185.415 61.62 185.524 cv
61.824 185.633 61.992 185.79 62.125 185.995 cv
62.258 186.2 62.362 186.449 62.438 186.744 cv
62.513 187.038 62.551 187.435 62.551 187.934 cv
62.551 188.525 62.491 189.002 62.369 189.365 cv
62.248 189.728 62.066 190.008 61.824 190.206 cv
61.582 190.404 61.277 190.503 60.908 190.503 cv
60.422 190.503 60.041 190.329 59.763 189.981 cv
59.431 189.562 59.265 188.88 59.265 187.934 cv
cp
59.901 187.934 mo
59.901 188.761 59.998 189.311 60.191 189.585 cv
60.385 189.858 60.624 189.995 60.908 189.995 cv
61.192 189.995 61.431 189.858 61.625 189.583 cv
61.818 189.308 61.915 188.758 61.915 187.934 cv
61.915 187.105 61.818 186.554 61.625 186.282 cv
61.431 186.009 61.19 185.873 60.901 185.873 cv
60.617 185.873 60.39 185.993 60.221 186.234 cv
60.008 186.54 59.901 187.107 59.901 187.934 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
118.633 189.823 mo
118.633 190.417 118.633 189.823 118.633 190.417 cv
115.302 190.417 118.633 190.417 115.302 190.417 cv
115.297 190.268 115.322 190.125 115.374 189.988 cv
115.459 189.761 115.595 189.538 115.782 189.318 cv
115.968 189.098 116.238 188.844 116.591 188.555 cv
117.139 188.107 117.509 187.751 117.701 187.489 cv
117.894 187.227 117.99 186.979 117.99 186.745 cv
117.99 186.5 117.903 186.293 117.727 186.125 cv
117.552 185.957 117.323 185.873 117.041 185.873 cv
116.744 185.873 116.505 185.962 116.326 186.141 cv
116.148 186.319 116.057 186.566 116.055 186.883 cv
115.419 186.817 116.055 186.883 115.419 186.817 cv
115.462 186.343 115.626 185.982 115.91 185.733 cv
116.195 185.485 116.576 185.361 117.055 185.361 cv
117.539 185.361 117.921 185.495 118.203 185.763 cv
118.485 186.031 118.626 186.363 118.626 186.759 cv
118.626 186.96 118.585 187.158 118.502 187.353 cv
118.42 187.548 118.283 187.753 118.092 187.968 cv
117.9 188.183 117.582 188.479 117.138 188.854 cv
116.766 189.166 116.528 189.377 116.423 189.488 cv
116.317 189.599 116.23 189.711 116.161 189.823 cv
118.633 189.823 116.161 189.823 118.633 189.823 cv
f
119.259 187.934 mo
119.259 187.339 119.32 186.859 119.443 186.496 cv
119.566 186.133 119.748 185.853 119.989 185.657 cv
120.231 185.46 120.535 185.361 120.902 185.361 cv
121.173 185.361 121.41 185.415 121.614 185.524 cv
121.818 185.633 121.986 185.79 122.119 185.995 cv
122.252 186.2 122.356 186.449 122.432 186.744 cv
122.507 187.038 122.545 187.435 122.545 187.934 cv
122.545 188.525 122.485 189.002 122.363 189.365 cv
122.242 189.728 122.06 190.008 121.818 190.206 cv
121.576 190.404 121.271 190.503 120.902 190.503 cv
120.416 190.503 120.035 190.329 119.757 189.981 cv
119.425 189.562 119.259 188.88 119.259 187.934 cv
cp
119.895 187.934 mo
119.895 188.761 119.992 189.311 120.185 189.585 cv
120.379 189.858 120.618 189.995 120.902 189.995 cv
121.186 189.995 121.425 189.858 121.619 189.583 cv
121.812 189.308 121.909 188.758 121.909 187.934 cv
121.909 187.105 121.812 186.554 121.619 186.282 cv
121.425 186.009 121.184 185.873 120.895 185.873 cv
120.611 185.873 120.384 185.993 120.215 186.234 cv
120.001 186.54 119.895 187.107 119.895 187.934 cv
f
175.42 190.417 mo
175.42 189.211 175.42 190.417 175.42 189.211 cv
173.234 189.211 175.42 189.211 173.234 189.211 cv
173.234 188.644 173.234 189.211 173.234 188.644 cv
175.533 185.381 173.234 188.644 175.533 185.381 cv
176.039 185.381 175.533 185.381 176.039 185.381 cv
176.039 188.644 176.039 185.381 176.039 188.644 cv
176.719 188.644 176.039 188.644 176.719 188.644 cv
176.719 189.211 176.719 188.644 176.719 189.211 cv
176.039 189.211 176.719 189.211 176.039 189.211 cv
176.039 190.417 176.039 189.211 176.039 190.417 cv
175.42 190.417 176.039 190.417 175.42 190.417 cv
cp
175.42 188.644 mo
175.42 186.374 175.42 188.644 175.42 186.374 cv
173.842 188.644 175.42 186.374 173.842 188.644 cv
175.42 188.644 173.842 188.644 175.42 188.644 cv
f
177.313 187.934 mo
177.313 187.339 177.374 186.859 177.497 186.496 cv
177.62 186.133 177.802 185.853 178.043 185.657 cv
178.285 185.46 178.589 185.361 178.956 185.361 cv
179.227 185.361 179.464 185.415 179.668 185.524 cv
179.872 185.633 180.04 185.79 180.173 185.995 cv
180.306 186.2 180.41 186.449 180.486 186.744 cv
180.561 187.038 180.599 187.435 180.599 187.934 cv
180.599 188.525 180.539 189.002 180.417 189.365 cv
180.296 189.728 180.114 190.008 179.872 190.206 cv
179.63 190.404 179.325 190.503 178.956 190.503 cv
178.47 190.503 178.089 190.329 177.811 189.981 cv
177.479 189.562 177.313 188.88 177.313 187.934 cv
cp
177.949 187.934 mo
177.949 188.761 178.046 189.311 178.239 189.585 cv
178.433 189.858 178.672 189.995 178.956 189.995 cv
179.24 189.995 179.479 189.858 179.673 189.583 cv
179.866 189.308 179.963 188.758 179.963 187.934 cv
179.963 187.105 179.866 186.554 179.673 186.282 cv
179.479 186.009 179.238 185.873 178.949 185.873 cv
178.665 185.873 178.438 185.993 178.269 186.234 cv
178.056 186.54 177.949 187.107 177.949 187.934 cv
f
234.702 186.614 mo
234.087 186.662 234.702 186.614 234.087 186.662 cv
234.032 186.419 233.954 186.243 233.853 186.133 cv
233.686 185.957 233.479 185.869 233.234 185.869 cv
233.037 185.869 232.864 185.924 232.715 186.033 cv
232.52 186.175 232.367 186.383 232.254 186.655 cv
232.142 186.928 232.084 187.316 232.079 187.82 cv
232.228 187.593 232.41 187.425 232.626 187.315 cv
232.841 187.205 233.067 187.15 233.303 187.15 cv
233.715 187.15 234.067 187.302 234.357 187.605 cv
234.646 187.908 234.791 188.301 234.791 188.782 cv
234.791 189.098 234.723 189.391 234.587 189.663 cv
234.45 189.934 234.263 190.142 234.025 190.286 cv
233.786 190.43 233.516 190.503 233.214 190.503 cv
232.698 190.503 232.277 190.313 231.952 189.934 cv
231.627 189.555 231.464 188.93 231.464 188.06 cv
231.464 187.087 231.644 186.379 232.004 185.937 cv
232.318 185.553 232.74 185.36 233.272 185.36 cv
233.668 185.36 233.993 185.471 234.247 185.693 cv
234.5 185.916 234.652 186.222 234.702 186.614 cv
cp
232.175 188.785 mo
232.175 188.998 232.221 189.202 232.311 189.396 cv
232.402 189.591 232.528 189.739 232.691 189.841 cv
232.854 189.943 233.024 189.994 233.203 189.994 cv
233.464 189.994 233.689 189.889 233.877 189.678 cv
234.065 189.467 234.159 189.181 234.159 188.819 cv
234.159 188.471 234.066 188.197 233.88 187.997 cv
233.695 187.796 233.461 187.696 233.179 187.696 cv
232.9 187.696 232.662 187.796 232.468 187.997 cv
232.273 188.197 232.175 188.46 232.175 188.785 cv
f
235.368 187.934 mo
235.368 187.339 235.429 186.859 235.552 186.496 cv
235.675 186.133 235.857 185.853 236.098 185.657 cv
236.34 185.46 236.644 185.361 237.011 185.361 cv
237.282 185.361 237.519 185.415 237.723 185.524 cv
237.927 185.633 238.095 185.79 238.228 185.995 cv
238.361 186.2 238.465 186.449 238.541 186.744 cv
238.616 187.038 238.654 187.435 238.654 187.934 cv
238.654 188.525 238.594 189.002 238.472 189.365 cv
238.351 189.728 238.169 190.008 237.927 190.206 cv
237.685 190.404 237.38 190.503 237.011 190.503 cv
236.525 190.503 236.144 190.329 235.866 189.981 cv
235.534 189.562 235.368 188.88 235.368 187.934 cv
cp
236.004 187.934 mo
236.004 188.761 236.101 189.311 236.294 189.585 cv
236.488 189.858 236.727 189.995 237.011 189.995 cv
237.295 189.995 237.534 189.858 237.728 189.583 cv
237.921 189.308 238.018 188.758 238.018 187.934 cv
238.018 187.105 237.921 186.554 237.728 186.282 cv
237.534 186.009 237.293 185.873 237.004 185.873 cv
236.72 185.873 236.493 185.993 236.324 186.234 cv
236.11 186.54 236.004 187.107 236.004 187.934 cv
f
290.498 187.686 mo
290.241 187.592 290.051 187.458 289.927 187.284 cv
289.804 187.11 289.742 186.902 289.742 186.659 cv
289.742 186.292 289.874 185.984 290.137 185.735 cv
290.401 185.485 290.751 185.36 291.189 185.36 cv
291.629 185.36 291.983 185.488 292.251 185.743 cv
292.519 185.999 292.653 186.31 292.653 186.676 cv
292.653 186.91 292.592 187.113 292.469 187.286 cv
292.347 187.459 292.161 187.592 291.911 187.686 cv
292.22 187.787 292.456 187.949 292.617 188.174 cv
292.779 188.398 292.86 188.666 292.86 188.978 cv
292.86 189.408 292.707 189.77 292.402 190.063 cv
292.098 190.356 291.697 190.503 291.199 190.503 cv
290.702 190.503 290.301 190.356 289.996 190.061 cv
289.691 189.767 289.539 189.4 289.539 188.96 cv
289.539 188.633 289.622 188.359 289.788 188.138 cv
289.954 187.917 290.191 187.766 290.498 187.686 cv
cp
290.374 186.638 mo
290.374 186.876 290.451 187.071 290.605 187.222 cv
290.758 187.373 290.958 187.449 291.203 187.449 cv
291.441 187.449 291.636 187.374 291.789 187.224 cv
291.941 187.074 292.017 186.89 292.017 186.673 cv
292.017 186.446 291.939 186.255 291.782 186.101 cv
291.625 185.946 291.43 185.869 291.196 185.869 cv
290.96 185.869 290.764 185.944 290.608 186.096 cv
290.452 186.247 290.374 186.428 290.374 186.638 cv
cp
290.175 188.964 mo
290.175 189.14 290.217 189.311 290.3 189.476 cv
290.384 189.641 290.508 189.768 290.673 189.859 cv
290.838 189.949 291.016 189.994 291.206 189.994 cv
291.502 189.994 291.746 189.899 291.938 189.709 cv
292.131 189.519 292.227 189.278 292.227 188.984 cv
292.227 188.687 292.128 188.441 291.93 188.246 cv
291.731 188.051 291.483 187.954 291.186 187.954 cv
290.894 187.954 290.653 188.05 290.462 188.242 cv
290.271 188.435 290.175 188.675 290.175 188.964 cv
f
293.423 187.934 mo
293.423 187.339 293.484 186.859 293.607 186.496 cv
293.73 186.133 293.912 185.853 294.153 185.657 cv
294.395 185.46 294.699 185.361 295.066 185.361 cv
295.337 185.361 295.574 185.415 295.778 185.524 cv
295.982 185.633 296.15 185.79 296.283 185.995 cv
296.416 186.2 296.52 186.449 296.596 186.744 cv
296.671 187.038 296.709 187.435 296.709 187.934 cv
296.709 188.525 296.649 189.002 296.527 189.365 cv
296.406 189.728 296.224 190.008 295.982 190.206 cv
295.74 190.404 295.435 190.503 295.066 190.503 cv
294.58 190.503 294.199 190.329 293.921 189.981 cv
293.589 189.562 293.423 188.88 293.423 187.934 cv
cp
294.059 187.934 mo
294.059 188.761 294.156 189.311 294.349 189.585 cv
294.543 189.858 294.782 189.995 295.066 189.995 cv
295.35 189.995 295.589 189.858 295.783 189.583 cv
295.976 189.308 296.073 188.758 296.073 187.934 cv
296.073 187.105 295.976 186.554 295.783 186.282 cv
295.589 186.009 295.348 185.873 295.059 185.873 cv
294.775 185.873 294.548 185.993 294.379 186.234 cv
294.165 186.54 294.059 187.107 294.059 187.934 cv
f
41.818 178.553 mo
41.818 177.958 41.879 177.478 42.002 177.115 cv
42.125 176.752 42.307 176.472 42.548 176.276 cv
42.79 176.079 43.094 175.98 43.461 175.98 cv
43.732 175.98 43.969 176.034 44.173 176.143 cv
44.377 176.252 44.545 176.409 44.678 176.614 cv
44.811 176.819 44.915 177.068 44.991 177.363 cv
45.066 177.657 45.104 178.054 45.104 178.553 cv
45.104 179.144 45.044 179.621 44.922 179.984 cv
44.801 180.347 44.619 180.627 44.377 180.825 cv
44.135 181.023 43.83 181.122 43.461 181.122 cv
42.975 181.122 42.594 180.948 42.316 180.6 cv
41.984 180.181 41.818 179.499 41.818 178.553 cv
cp
42.454 178.553 mo
42.454 179.38 42.551 179.93 42.744 180.204 cv
42.938 180.477 43.177 180.614 43.461 180.614 cv
43.745 180.614 43.984 180.477 44.178 180.202 cv
44.371 179.927 44.468 179.377 44.468 178.553 cv
44.468 177.724 44.371 177.173 44.178 176.901 cv
43.984 176.628 43.743 176.492 43.454 176.492 cv
43.17 176.492 42.943 176.612 42.774 176.853 cv
42.561 177.159 42.454 177.726 42.454 178.553 cv
f
46.029 181.037 mo
46.029 180.333 46.029 181.037 46.029 180.333 cv
46.734 180.333 46.029 180.333 46.734 180.333 cv
46.734 181.037 46.734 180.333 46.734 181.037 cv
46.734 181.296 46.688 181.505 46.596 181.664 cv
46.505 181.823 46.359 181.946 46.16 182.033 cv
45.988 181.769 46.16 182.033 45.988 181.769 cv
46.118 181.711 46.215 181.627 46.276 181.516 cv
46.338 181.405 46.373 181.245 46.38 181.037 cv
46.029 181.037 46.38 181.037 46.029 181.037 cv
f
47.634 178.553 mo
47.634 177.958 47.695 177.478 47.818 177.115 cv
47.941 176.752 48.123 176.472 48.364 176.276 cv
48.606 176.079 48.91 175.98 49.277 175.98 cv
49.548 175.98 49.785 176.034 49.989 176.143 cv
50.193 176.252 50.361 176.409 50.494 176.614 cv
50.627 176.819 50.731 177.068 50.807 177.363 cv
50.882 177.657 50.92 178.054 50.92 178.553 cv
50.92 179.144 50.86 179.621 50.738 179.984 cv
50.617 180.347 50.435 180.627 50.193 180.825 cv
49.951 181.023 49.646 181.122 49.277 181.122 cv
48.791 181.122 48.41 180.948 48.132 180.6 cv
47.8 180.181 47.634 179.499 47.634 178.553 cv
cp
48.27 178.553 mo
48.27 179.38 48.367 179.93 48.56 180.204 cv
48.754 180.477 48.993 180.614 49.277 180.614 cv
49.561 180.614 49.8 180.477 49.994 180.202 cv
50.187 179.927 50.284 179.377 50.284 178.553 cv
50.284 177.724 50.187 177.173 49.994 176.901 cv
49.8 176.628 49.559 176.492 49.27 176.492 cv
48.986 176.492 48.759 176.612 48.59 176.853 cv
48.377 177.159 48.27 177.726 48.27 178.553 cv
f
52.463 178.306 mo
52.206 178.212 52.016 178.078 51.892 177.904 cv
51.769 177.73 51.707 177.522 51.707 177.279 cv
51.707 176.912 51.839 176.604 52.102 176.355 cv
52.366 176.105 52.716 175.98 53.154 175.98 cv
53.594 175.98 53.948 176.108 54.216 176.363 cv
54.484 176.619 54.618 176.93 54.618 177.296 cv
54.618 177.53 54.557 177.733 54.434 177.906 cv
54.312 178.079 54.126 178.212 53.876 178.306 cv
54.185 178.407 54.421 178.569 54.582 178.794 cv
54.744 179.018 54.825 179.286 54.825 179.598 cv
54.825 180.028 54.672 180.39 54.367 180.683 cv
54.063 180.976 53.662 181.123 53.164 181.123 cv
52.667 181.123 52.266 180.976 51.961 180.681 cv
51.656 180.387 51.504 180.02 51.504 179.58 cv
51.504 179.253 51.587 178.979 51.753 178.758 cv
51.919 178.537 52.156 178.386 52.463 178.306 cv
cp
52.339 177.258 mo
52.339 177.496 52.416 177.691 52.57 177.842 cv
52.723 177.993 52.922 178.069 53.168 178.069 cv
53.406 178.069 53.601 177.994 53.754 177.844 cv
53.906 177.694 53.982 177.51 53.982 177.293 cv
53.982 177.066 53.904 176.875 53.747 176.721 cv
53.59 176.566 53.395 176.489 53.161 176.489 cv
52.925 176.489 52.729 176.564 52.573 176.716 cv
52.417 176.867 52.339 177.048 52.339 177.258 cv
cp
52.14 179.584 mo
52.14 179.76 52.182 179.931 52.265 180.096 cv
52.349 180.261 52.473 180.388 52.638 180.479 cv
52.803 180.569 52.981 180.614 53.171 180.614 cv
53.467 180.614 53.711 180.519 53.903 180.329 cv
54.096 180.139 54.192 179.898 54.192 179.604 cv
54.192 179.307 54.093 179.061 53.895 178.866 cv
53.696 178.671 53.448 178.574 53.151 178.574 cv
52.859 178.574 52.618 178.67 52.427 178.862 cv
52.236 179.055 52.14 179.295 52.14 179.584 cv
f
41.818 153.37 mo
41.818 152.775 41.879 152.295 42.002 151.932 cv
42.125 151.569 42.307 151.289 42.548 151.093 cv
42.79 150.896 43.094 150.797 43.461 150.797 cv
43.732 150.797 43.969 150.851 44.173 150.96 cv
44.377 151.069 44.545 151.226 44.678 151.431 cv
44.811 151.636 44.915 151.885 44.991 152.18 cv
45.066 152.474 45.104 152.871 45.104 153.37 cv
45.104 153.961 45.044 154.438 44.922 154.801 cv
44.801 155.164 44.619 155.444 44.377 155.642 cv
44.135 155.84 43.83 155.939 43.461 155.939 cv
42.975 155.939 42.594 155.765 42.316 155.417 cv
41.984 154.998 41.818 154.316 41.818 153.37 cv
cp
42.454 153.37 mo
42.454 154.197 42.551 154.747 42.744 155.021 cv
42.938 155.294 43.177 155.431 43.461 155.431 cv
43.745 155.431 43.984 155.294 44.178 155.019 cv
44.371 154.744 44.468 154.194 44.468 153.37 cv
44.468 152.541 44.371 151.99 44.178 151.718 cv
43.984 151.445 43.743 151.309 43.454 151.309 cv
43.17 151.309 42.943 151.429 42.774 151.67 cv
42.561 151.976 42.454 152.543 42.454 153.37 cv
f
46.029 155.853 mo
46.029 155.149 46.029 155.853 46.029 155.149 cv
46.734 155.149 46.029 155.149 46.734 155.149 cv
46.734 155.853 46.734 155.149 46.734 155.853 cv
46.734 156.112 46.688 156.321 46.596 156.48 cv
46.505 156.639 46.359 156.762 46.16 156.849 cv
45.988 156.585 46.16 156.849 45.988 156.585 cv
46.118 156.527 46.215 156.443 46.276 156.332 cv
46.338 156.221 46.373 156.061 46.38 155.853 cv
46.029 155.853 46.38 155.853 46.029 155.853 cv
f
47.634 153.37 mo
47.634 152.775 47.695 152.295 47.818 151.932 cv
47.941 151.569 48.123 151.289 48.364 151.093 cv
48.606 150.896 48.91 150.797 49.277 150.797 cv
49.548 150.797 49.785 150.851 49.989 150.96 cv
50.193 151.069 50.361 151.226 50.494 151.431 cv
50.627 151.636 50.731 151.885 50.807 152.18 cv
50.882 152.474 50.92 152.871 50.92 153.37 cv
50.92 153.961 50.86 154.438 50.738 154.801 cv
50.617 155.164 50.435 155.444 50.193 155.642 cv
49.951 155.84 49.646 155.939 49.277 155.939 cv
48.791 155.939 48.41 155.765 48.132 155.417 cv
47.8 154.998 47.634 154.316 47.634 153.37 cv
cp
48.27 153.37 mo
48.27 154.197 48.367 154.747 48.56 155.021 cv
48.754 155.294 48.993 155.431 49.277 155.431 cv
49.561 155.431 49.8 155.294 49.994 155.019 cv
50.187 154.744 50.284 154.194 50.284 153.37 cv
50.284 152.541 50.187 151.99 49.994 151.718 cv
49.8 151.445 49.559 151.309 49.27 151.309 cv
48.986 151.309 48.759 151.429 48.59 151.67 cv
48.377 151.976 48.27 152.543 48.27 153.37 cv
f
51.604 154.689 mo
52.199 154.634 51.604 154.689 52.199 154.634 cv
52.249 154.913 52.345 155.116 52.487 155.242 cv
52.63 155.368 52.812 155.431 53.034 155.431 cv
53.224 155.431 53.391 155.387 53.534 155.3 cv
53.677 155.213 53.795 155.097 53.887 154.952 cv
53.978 154.806 54.055 154.61 54.117 154.363 cv
54.179 154.115 54.21 153.863 54.21 153.607 cv
54.21 153.579 54.209 153.538 54.206 153.483 cv
54.082 153.68 53.913 153.84 53.699 153.962 cv
53.485 154.085 53.253 154.146 53.003 154.146 cv
52.586 154.146 52.233 153.995 51.944 153.693 cv
51.656 153.391 51.511 152.992 51.511 152.497 cv
51.511 151.987 51.662 151.576 51.963 151.264 cv
52.265 150.953 52.642 150.797 53.096 150.797 cv
53.424 150.797 53.723 150.885 53.995 151.061 cv
54.266 151.238 54.473 151.489 54.614 151.816 cv
54.755 152.142 54.825 152.614 54.825 153.233 cv
54.825 153.876 54.755 154.388 54.615 154.77 cv
54.475 155.151 54.267 155.441 53.991 155.641 cv
53.715 155.84 53.392 155.939 53.02 155.939 cv
52.626 155.939 52.304 155.83 52.054 155.611 cv
51.805 155.393 51.654 155.085 51.604 154.689 cv
cp
54.137 152.466 mo
54.137 152.112 54.043 151.83 53.854 151.621 cv
53.665 151.413 53.437 151.309 53.172 151.309 cv
52.897 151.309 52.657 151.421 52.453 151.645 cv
52.249 151.87 52.147 152.161 52.147 152.518 cv
52.147 152.839 52.244 153.099 52.438 153.299 cv
52.631 153.5 52.87 153.6 53.154 153.6 cv
53.441 153.6 53.676 153.5 53.861 153.299 cv
54.045 153.099 54.137 152.821 54.137 152.466 cv
f
41.818 128.288 mo
41.818 127.693 41.879 127.213 42.002 126.85 cv
42.125 126.487 42.307 126.207 42.548 126.011 cv
42.79 125.814 43.094 125.715 43.461 125.715 cv
43.732 125.715 43.969 125.769 44.173 125.878 cv
44.377 125.987 44.545 126.144 44.678 126.349 cv
44.811 126.554 44.915 126.803 44.991 127.098 cv
45.066 127.392 45.104 127.789 45.104 128.288 cv
45.104 128.879 45.044 129.356 44.922 129.719 cv
44.801 130.082 44.619 130.362 44.377 130.56 cv
44.135 130.758 43.83 130.857 43.461 130.857 cv
42.975 130.857 42.594 130.683 42.316 130.335 cv
41.984 129.916 41.818 129.234 41.818 128.288 cv
cp
42.454 128.288 mo
42.454 129.115 42.551 129.665 42.744 129.939 cv
42.938 130.212 43.177 130.349 43.461 130.349 cv
43.745 130.349 43.984 130.212 44.178 129.937 cv
44.371 129.662 44.468 129.112 44.468 128.288 cv
44.468 127.459 44.371 126.908 44.178 126.636 cv
43.984 126.363 43.743 126.227 43.454 126.227 cv
43.17 126.227 42.943 126.347 42.774 126.588 cv
42.561 126.894 42.454 127.461 42.454 128.288 cv
f
46.029 130.771 mo
46.029 130.067 46.029 130.771 46.029 130.067 cv
46.734 130.067 46.029 130.067 46.734 130.067 cv
46.734 130.771 46.734 130.067 46.734 130.771 cv
46.734 131.03 46.688 131.239 46.596 131.398 cv
46.505 131.557 46.359 131.68 46.16 131.767 cv
45.988 131.503 46.16 131.767 45.988 131.503 cv
46.118 131.445 46.215 131.361 46.276 131.25 cv
46.338 131.139 46.373 130.979 46.38 130.771 cv
46.029 130.771 46.38 130.771 46.029 130.771 cv
f
49.965 130.771 mo
49.346 130.771 49.965 130.771 49.346 130.771 cv
49.346 126.831 49.346 130.771 49.346 126.831 cv
49.197 126.973 49.002 127.115 48.76 127.257 cv
48.518 127.399 48.301 127.505 48.109 127.576 cv
48.109 126.979 48.109 127.576 48.109 126.979 cv
48.455 126.816 48.757 126.619 49.016 126.388 cv
49.275 126.157 49.459 125.932 49.566 125.715 cv
49.965 125.715 49.566 125.715 49.965 125.715 cv
49.965 130.771 49.965 125.715 49.965 130.771 cv
f
51.511 128.288 mo
51.511 127.693 51.572 127.213 51.695 126.85 cv
51.818 126.487 52 126.207 52.241 126.011 cv
52.483 125.814 52.787 125.715 53.154 125.715 cv
53.425 125.715 53.662 125.769 53.866 125.878 cv
54.07 125.987 54.238 126.144 54.371 126.349 cv
54.504 126.554 54.608 126.803 54.684 127.098 cv
54.759 127.392 54.797 127.789 54.797 128.288 cv
54.797 128.879 54.737 129.356 54.615 129.719 cv
54.494 130.082 54.312 130.362 54.07 130.56 cv
53.828 130.758 53.523 130.857 53.154 130.857 cv
52.668 130.857 52.287 130.683 52.009 130.335 cv
51.677 129.916 51.511 129.234 51.511 128.288 cv
cp
52.147 128.288 mo
52.147 129.115 52.244 129.665 52.437 129.939 cv
52.631 130.212 52.87 130.349 53.154 130.349 cv
53.438 130.349 53.677 130.212 53.871 129.937 cv
54.065 129.662 54.161 129.112 54.161 128.288 cv
54.161 127.459 54.065 126.908 53.871 126.636 cv
53.677 126.363 53.436 126.227 53.147 126.227 cv
52.863 126.227 52.636 126.347 52.467 126.588 cv
52.254 126.894 52.147 127.461 52.147 128.288 cv
f
41.818 103.104 mo
41.818 102.509 41.879 102.029 42.002 101.666 cv
42.125 101.303 42.307 101.023 42.548 100.827 cv
42.79 100.63 43.094 100.531 43.461 100.531 cv
43.732 100.531 43.969 100.585 44.173 100.694 cv
44.377 100.803 44.545 100.96 44.678 101.165 cv
44.811 101.37 44.915 101.619 44.991 101.914 cv
45.066 102.208 45.104 102.605 45.104 103.104 cv
45.104 103.695 45.044 104.172 44.922 104.535 cv
44.801 104.898 44.619 105.178 44.377 105.376 cv
44.135 105.574 43.83 105.673 43.461 105.673 cv
42.975 105.673 42.594 105.499 42.316 105.151 cv
41.984 104.732 41.818 104.05 41.818 103.104 cv
cp
42.454 103.104 mo
42.454 103.931 42.551 104.481 42.744 104.755 cv
42.938 105.028 43.177 105.165 43.461 105.165 cv
43.745 105.165 43.984 105.028 44.178 104.753 cv
44.371 104.478 44.468 103.928 44.468 103.104 cv
44.468 102.275 44.371 101.724 44.178 101.452 cv
43.984 101.179 43.743 101.043 43.454 101.043 cv
43.17 101.043 42.943 101.163 42.774 101.404 cv
42.561 101.71 42.454 102.277 42.454 103.104 cv
f
46.029 105.588 mo
46.029 104.884 46.029 105.588 46.029 104.884 cv
46.734 104.884 46.029 104.884 46.734 104.884 cv
46.734 105.588 46.734 104.884 46.734 105.588 cv
46.734 105.847 46.688 106.056 46.596 106.215 cv
46.505 106.374 46.359 106.497 46.16 106.584 cv
45.988 106.32 46.16 106.584 45.988 106.32 cv
46.118 106.262 46.215 106.178 46.276 106.067 cv
46.338 105.956 46.373 105.796 46.38 105.588 cv
46.029 105.588 46.38 105.588 46.029 105.588 cv
f
49.965 105.588 mo
49.346 105.588 49.965 105.588 49.346 105.588 cv
49.346 101.648 49.346 105.588 49.346 101.648 cv
49.197 101.79 49.002 101.932 48.76 102.074 cv
48.518 102.216 48.301 102.322 48.109 102.393 cv
48.109 101.796 48.109 102.393 48.109 101.796 cv
48.455 101.633 48.757 101.436 49.016 101.205 cv
49.275 100.974 49.459 100.749 49.566 100.532 cv
49.965 100.532 49.566 100.532 49.965 100.532 cv
49.965 105.588 49.965 100.532 49.965 105.588 cv
f
53.842 105.588 mo
53.223 105.588 53.842 105.588 53.223 105.588 cv
53.223 101.648 53.223 105.588 53.223 101.648 cv
53.074 101.79 52.879 101.932 52.637 102.074 cv
52.395 102.216 52.178 102.322 51.986 102.393 cv
51.986 101.796 51.986 102.393 51.986 101.796 cv
52.332 101.633 52.634 101.436 52.893 101.205 cv
53.152 100.974 53.336 100.749 53.443 100.532 cv
53.842 100.532 53.443 100.532 53.842 100.532 cv
53.842 105.588 53.842 100.532 53.842 105.588 cv
f
41.818 78.022 mo
41.818 77.427 41.879 76.947 42.002 76.584 cv
42.125 76.221 42.307 75.941 42.548 75.745 cv
42.79 75.548 43.094 75.449 43.461 75.449 cv
43.732 75.449 43.969 75.503 44.173 75.612 cv
44.377 75.721 44.545 75.878 44.678 76.083 cv
44.811 76.288 44.915 76.537 44.991 76.832 cv
45.066 77.126 45.104 77.523 45.104 78.022 cv
45.104 78.613 45.044 79.09 44.922 79.453 cv
44.801 79.816 44.619 80.096 44.377 80.294 cv
44.135 80.492 43.83 80.591 43.461 80.591 cv
42.975 80.591 42.594 80.417 42.316 80.069 cv
41.984 79.65 41.818 78.968 41.818 78.022 cv
cp
42.454 78.022 mo
42.454 78.849 42.551 79.399 42.744 79.673 cv
42.938 79.946 43.177 80.083 43.461 80.083 cv
43.745 80.083 43.984 79.946 44.178 79.671 cv
44.371 79.396 44.468 78.846 44.468 78.022 cv
44.468 77.193 44.371 76.642 44.178 76.37 cv
43.984 76.097 43.743 75.961 43.454 75.961 cv
43.17 75.961 42.943 76.081 42.774 76.322 cv
42.561 76.628 42.454 77.195 42.454 78.022 cv
f
46.029 80.506 mo
46.029 79.802 46.029 80.506 46.029 79.802 cv
46.734 79.802 46.029 79.802 46.734 79.802 cv
46.734 80.506 46.734 79.802 46.734 80.506 cv
46.734 80.765 46.688 80.974 46.596 81.133 cv
46.505 81.292 46.359 81.415 46.16 81.502 cv
45.988 81.238 46.16 81.502 45.988 81.238 cv
46.118 81.18 46.215 81.096 46.276 80.985 cv
46.338 80.874 46.373 80.714 46.38 80.506 cv
46.029 80.506 46.38 80.506 46.029 80.506 cv
f
49.965 80.506 mo
49.346 80.506 49.965 80.506 49.346 80.506 cv
49.346 76.566 49.346 80.506 49.346 76.566 cv
49.197 76.708 49.002 76.85 48.76 76.992 cv
48.518 77.134 48.301 77.24 48.109 77.311 cv
48.109 76.714 48.109 77.311 48.109 76.714 cv
48.455 76.551 48.757 76.354 49.016 76.123 cv
49.275 75.892 49.459 75.667 49.566 75.45 cv
49.965 75.45 49.566 75.45 49.965 75.45 cv
49.965 80.506 49.965 75.45 49.965 80.506 cv
f
54.763 79.912 mo
54.763 80.506 54.763 79.912 54.763 80.506 cv
51.432 80.506 54.763 80.506 51.432 80.506 cv
51.427 80.357 51.452 80.214 51.504 80.077 cv
51.589 79.85 51.725 79.627 51.912 79.407 cv
52.098 79.187 52.368 78.933 52.721 78.644 cv
53.269 78.196 53.639 77.84 53.831 77.578 cv
54.024 77.316 54.12 77.068 54.12 76.834 cv
54.12 76.589 54.033 76.382 53.857 76.214 cv
53.682 76.046 53.453 75.962 53.171 75.962 cv
52.874 75.962 52.635 76.051 52.456 76.23 cv
52.278 76.408 52.187 76.656 52.185 76.972 cv
51.549 76.906 52.185 76.972 51.549 76.906 cv
51.592 76.432 51.756 76.071 52.04 75.823 cv
52.325 75.574 52.706 75.45 53.185 75.45 cv
53.669 75.45 54.051 75.584 54.333 75.852 cv
54.615 76.12 54.756 76.452 54.756 76.848 cv
54.756 77.049 54.715 77.247 54.632 77.442 cv
54.55 77.637 54.413 77.842 54.222 78.057 cv
54.03 78.272 53.712 78.568 53.268 78.943 cv
52.896 79.255 52.658 79.466 52.553 79.577 cv
52.447 79.688 52.36 79.8 52.291 79.912 cv
54.763 79.912 52.291 79.912 54.763 79.912 cv
f
41.818 52.839 mo
41.818 52.244 41.879 51.764 42.002 51.401 cv
42.125 51.038 42.307 50.758 42.548 50.562 cv
42.79 50.365 43.094 50.266 43.461 50.266 cv
43.732 50.266 43.969 50.32 44.173 50.429 cv
44.377 50.538 44.545 50.695 44.678 50.9 cv
44.811 51.105 44.915 51.354 44.991 51.649 cv
45.066 51.943 45.104 52.34 45.104 52.839 cv
45.104 53.43 45.044 53.907 44.922 54.27 cv
44.801 54.633 44.619 54.913 44.377 55.111 cv
44.135 55.309 43.83 55.408 43.461 55.408 cv
42.975 55.408 42.594 55.234 42.316 54.886 cv
41.984 54.467 41.818 53.785 41.818 52.839 cv
cp
42.454 52.839 mo
42.454 53.666 42.551 54.216 42.744 54.49 cv
42.938 54.763 43.177 54.9 43.461 54.9 cv
43.745 54.9 43.984 54.763 44.178 54.488 cv
44.371 54.213 44.468 53.663 44.468 52.839 cv
44.468 52.01 44.371 51.459 44.178 51.187 cv
43.984 50.914 43.743 50.778 43.454 50.778 cv
43.17 50.778 42.943 50.898 42.774 51.139 cv
42.561 51.445 42.454 52.012 42.454 52.839 cv
f
46.029 55.322 mo
46.029 54.618 46.029 55.322 46.029 54.618 cv
46.734 54.618 46.029 54.618 46.734 54.618 cv
46.734 55.322 46.734 54.618 46.734 55.322 cv
46.734 55.581 46.688 55.79 46.596 55.949 cv
46.505 56.108 46.359 56.231 46.16 56.318 cv
45.988 56.054 46.16 56.318 45.988 56.054 cv
46.118 55.996 46.215 55.912 46.276 55.801 cv
46.338 55.69 46.373 55.53 46.38 55.322 cv
46.029 55.322 46.38 55.322 46.029 55.322 cv
f
49.965 55.322 mo
49.346 55.322 49.965 55.322 49.346 55.322 cv
49.346 51.382 49.346 55.322 49.346 51.382 cv
49.197 51.524 49.002 51.666 48.76 51.808 cv
48.518 51.95 48.301 52.056 48.109 52.127 cv
48.109 51.53 48.109 52.127 48.109 51.53 cv
48.455 51.367 48.757 51.17 49.016 50.939 cv
49.275 50.707 49.459 50.483 49.566 50.265 cv
49.965 50.265 49.566 50.265 49.965 50.265 cv
49.965 55.322 49.965 50.265 49.965 55.322 cv
f
51.514 53.993 mo
52.133 53.911 51.514 53.993 52.133 53.911 cv
52.204 54.261 52.325 54.513 52.495 54.668 cv
52.666 54.823 52.874 54.9 53.119 54.9 cv
53.41 54.9 53.656 54.799 53.857 54.598 cv
54.057 54.396 54.157 54.146 54.157 53.849 cv
54.157 53.565 54.065 53.331 53.879 53.146 cv
53.693 52.962 53.457 52.87 53.171 52.87 cv
53.054 52.87 52.909 52.893 52.734 52.938 cv
52.803 52.396 52.734 52.938 52.803 52.396 cv
52.844 52.4 52.878 52.403 52.903 52.403 cv
53.166 52.403 53.404 52.334 53.614 52.196 cv
53.825 52.059 53.931 51.847 53.931 51.561 cv
53.931 51.334 53.854 51.146 53.7 50.998 cv
53.547 50.849 53.348 50.774 53.106 50.774 cv
52.865 50.774 52.664 50.85 52.504 51.001 cv
52.344 51.152 52.24 51.379 52.195 51.681 cv
51.576 51.571 52.195 51.681 51.576 51.571 cv
51.651 51.157 51.823 50.836 52.091 50.608 cv
52.36 50.38 52.693 50.266 53.092 50.266 cv
53.367 50.266 53.62 50.325 53.852 50.443 cv
54.083 50.561 54.26 50.722 54.383 50.925 cv
54.505 51.129 54.567 51.346 54.567 51.575 cv
54.567 51.792 54.508 51.99 54.391 52.169 cv
54.274 52.348 54.101 52.49 53.872 52.595 cv
54.17 52.664 54.402 52.806 54.567 53.023 cv
54.732 53.239 54.814 53.51 54.814 53.835 cv
54.814 54.275 54.654 54.647 54.333 54.953 cv
54.012 55.259 53.606 55.412 53.116 55.412 cv
52.674 55.412 52.306 55.28 52.014 55.017 cv
51.722 54.753 51.555 54.412 51.514 53.993 cv
f
41.818 27.757 mo
41.818 27.162 41.879 26.682 42.002 26.319 cv
42.125 25.956 42.307 25.676 42.548 25.48 cv
42.79 25.283 43.094 25.184 43.461 25.184 cv
43.732 25.184 43.969 25.238 44.173 25.347 cv
44.377 25.456 44.545 25.613 44.678 25.818 cv
44.811 26.023 44.915 26.272 44.991 26.567 cv
45.066 26.861 45.104 27.258 45.104 27.757 cv
45.104 28.348 45.044 28.825 44.922 29.188 cv
44.801 29.551 44.619 29.831 44.377 30.029 cv
44.135 30.227 43.83 30.326 43.461 30.326 cv
42.975 30.326 42.594 30.152 42.316 29.804 cv
41.984 29.385 41.818 28.703 41.818 27.757 cv
cp
42.454 27.757 mo
42.454 28.584 42.551 29.134 42.744 29.408 cv
42.938 29.681 43.177 29.818 43.461 29.818 cv
43.745 29.818 43.984 29.681 44.178 29.406 cv
44.371 29.131 44.468 28.581 44.468 27.757 cv
44.468 26.928 44.371 26.377 44.178 26.105 cv
43.984 25.832 43.743 25.696 43.454 25.696 cv
43.17 25.696 42.943 25.816 42.774 26.057 cv
42.561 26.363 42.454 26.93 42.454 27.757 cv
f
46.029 30.241 mo
46.029 29.537 46.029 30.241 46.029 29.537 cv
46.734 29.537 46.029 29.537 46.734 29.537 cv
46.734 30.241 46.734 29.537 46.734 30.241 cv
46.734 30.5 46.688 30.709 46.596 30.868 cv
46.505 31.027 46.359 31.15 46.16 31.237 cv
45.988 30.973 46.16 31.237 45.988 30.973 cv
46.118 30.915 46.215 30.831 46.276 30.72 cv
46.338 30.609 46.373 30.449 46.38 30.241 cv
46.029 30.241 46.38 30.241 46.029 30.241 cv
f
49.965 30.241 mo
49.346 30.241 49.965 30.241 49.346 30.241 cv
49.346 26.301 49.346 30.241 49.346 26.301 cv
49.197 26.443 49.002 26.585 48.76 26.727 cv
48.518 26.869 48.301 26.975 48.109 27.046 cv
48.109 26.449 48.109 27.046 48.109 26.449 cv
48.455 26.286 48.757 26.089 49.016 25.858 cv
49.275 25.626 49.459 25.402 49.566 25.184 cv
49.965 25.184 49.566 25.184 49.965 25.184 cv
49.965 30.241 49.965 25.184 49.965 30.241 cv
f
53.494 30.241 mo
53.494 29.035 53.494 30.241 53.494 29.035 cv
51.308 29.035 53.494 29.035 51.308 29.035 cv
51.308 28.468 51.308 29.035 51.308 28.468 cv
53.607 25.205 51.308 28.468 53.607 25.205 cv
54.113 25.205 53.607 25.205 54.113 25.205 cv
54.113 28.468 54.113 25.205 54.113 28.468 cv
54.793 28.468 54.113 28.468 54.793 28.468 cv
54.793 29.035 54.793 28.468 54.793 29.035 cv
54.113 29.035 54.793 29.035 54.113 29.035 cv
54.113 30.241 54.113 29.035 54.113 30.241 cv
53.494 30.241 54.113 30.241 53.494 30.241 cv
cp
53.494 28.468 mo
53.494 26.198 53.494 28.468 53.494 26.198 cv
51.916 28.468 53.494 26.198 51.916 28.468 cv
53.494 28.468 51.916 28.468 53.494 28.468 cv
f
41.818 2.57301 mo
41.818 1.97801 41.879 1.49802 42.002 1.13501 cv
42.125 .772018 42.307 .49202 42.548 .296021 cv
42.79 .0990143 43.094 1.52588e-5 43.461 1.52588e-5 cv
43.732 1.52588e-5 43.969 .0540161 44.173 .16301 cv
44.377 .272018 44.545 .429016 44.678 .634018 cv
44.811 .83902 44.915 1.08801 44.991 1.38301 cv
45.066 1.67702 45.104 2.07402 45.104 2.57301 cv
45.104 3.16402 45.044 3.64101 44.922 4.00401 cv
44.801 4.36702 44.619 4.64702 44.377 4.84502 cv
44.135 5.04301 43.83 5.14201 43.461 5.14201 cv
42.975 5.14201 42.594 4.96802 42.316 4.62001 cv
41.984 4.20102 41.818 3.51901 41.818 2.57301 cv
cp
42.454 2.57301 mo
42.454 3.40001 42.551 3.95001 42.744 4.22401 cv
42.938 4.49701 43.177 4.63402 43.461 4.63402 cv
43.745 4.63402 43.984 4.49701 44.178 4.22202 cv
44.371 3.94701 44.468 3.39702 44.468 2.57301 cv
44.468 1.74402 44.371 1.19301 44.178 .921021 cv
43.984 .64801 43.743 .512009 43.454 .512009 cv
43.17 .512009 42.943 .632019 42.774 .873016 cv
42.561 1.17902 42.454 1.74602 42.454 2.57301 cv
f
46.029 5.05702 mo
46.029 4.35303 46.029 5.05702 46.029 4.35303 cv
46.734 4.35303 46.029 4.35303 46.734 4.35303 cv
46.734 5.05702 46.734 4.35303 46.734 5.05702 cv
46.734 5.31602 46.688 5.52502 46.596 5.68402 cv
46.505 5.84302 46.359 5.96602 46.16 6.05302 cv
45.988 5.78902 46.16 6.05302 45.988 5.78902 cv
46.118 5.73102 46.215 5.64702 46.276 5.53603 cv
46.338 5.42502 46.373 5.26501 46.38 5.05702 cv
46.029 5.05702 46.38 5.05702 46.029 5.05702 cv
f
49.965 5.05702 mo
49.346 5.05702 49.965 5.05702 49.346 5.05702 cv
49.346 1.11702 49.346 5.05702 49.346 1.11702 cv
49.197 1.25902 49.002 1.40102 48.76 1.54303 cv
48.518 1.68503 48.301 1.79102 48.109 1.86201 cv
48.109 1.26501 48.109 1.86201 48.109 1.26501 cv
48.455 1.10202 48.757 .905029 49.016 .674026 cv
49.275 .443024 49.459 .218018 49.566 .00102234 cv
49.965 .00102234 49.566 .00102234 49.965 .00102234 cv
49.965 5.05702 49.965 .00102234 49.965 5.05702 cv
f
51.511 3.73802 mo
52.161 3.68303 51.511 3.73802 52.161 3.68303 cv
52.209 3.99902 52.321 4.23701 52.496 4.39603 cv
52.671 4.55502 52.883 4.63503 53.13 4.63503 cv
53.428 4.63503 53.68 4.52202 53.886 4.29802 cv
54.093 4.07402 54.196 3.77602 54.196 3.40503 cv
54.196 3.05202 54.097 2.77402 53.898 2.57002 cv
53.7 2.36603 53.441 2.26402 53.12 2.26402 cv
52.92 2.26402 52.741 2.31003 52.58 2.40002 cv
52.42 2.49002 52.294 2.60802 52.202 2.75203 cv
51.621 2.67702 52.202 2.75203 51.621 2.67702 cv
52.109 .0900269 51.621 2.67702 52.109 .0900269 cv
54.615 .0900269 52.109 .0900269 54.615 .0900269 cv
54.615 .681015 54.615 .0900269 54.615 .681015 cv
52.604 .681015 54.615 .681015 52.604 .681015 cv
52.333 2.03403 52.604 .681015 52.333 2.03403 cv
52.635 1.82402 52.952 1.71802 53.285 1.71802 cv
53.725 1.71802 54.096 1.87003 54.399 2.17502 cv
54.701 2.48003 54.852 2.87102 54.852 3.35002 cv
54.852 3.80602 54.719 4.19902 54.454 4.53203 cv
54.13 4.93903 53.689 5.14302 53.13 5.14302 cv
52.672 5.14302 52.298 5.01501 52.008 4.75803 cv
51.718 4.50203 51.552 4.16202 51.511 3.73802 cv
f
.714 lw
60.912 182.566 mo
60.912 179.099 li
@
89.99 180.833 mo
89.99 179.1 li
@
118.966 182.566 mo
118.966 179.099 li
@
148.044 180.833 mo
148.044 179.1 li
@
177.02 182.566 mo
177.02 179.099 li
@
206.098 180.833 mo
206.098 179.1 li
@
235.074 182.566 mo
235.074 179.099 li
@
264.152 180.833 mo
264.152 179.1 li
@
293.128 182.566 mo
293.128 179.099 li
@
60.909 179.099 mo
293.128 179.099 li
@
60.909 3.11902 mo
293.128 3.11902 li
@
57.44 179.099 mo
60.909 179.099 li
@
59.174 166.558 mo
60.909 166.558 li
@
57.44 153.915 mo
60.909 153.915 li
@
59.174 141.374 mo
60.909 141.374 li
@
57.44 128.833 mo
60.909 128.833 li
@
59.174 116.292 mo
60.909 116.292 li
@
57.44 103.649 mo
60.909 103.649 li
@
59.174 91.108 mo
60.909 91.108 li
@
57.44 78.567 mo
60.909 78.567 li
@
59.174 65.924 mo
60.909 65.924 li
@
57.44 53.383 mo
60.909 53.383 li
@
59.174 40.842 mo
60.909 40.842 li
@
57.44 28.301 mo
60.909 28.301 li
@
59.174 15.658 mo
60.909 15.658 li
@
57.44 3.117 mo
60.909 3.117 li
@
60.909 179.097 mo
60.909 3.117 li
@
293.128 179.097 mo
293.128 3.117 li
@
gsave
60.912 3.12003 mo
293.233 3.12003 li
293.233 179.202 li
60.912 179.202 li
cp
eclp
.918 lw
63.768 25.245 mo
69.584 34.523 li
75.399 61.746 li
78.358 78.263 li
81.215 79.793 li
89.99 80.303 li
95.703 82.342 li
107.335 84.585 li
113.15 160.238 li
118.966 160.85 li
124.782 161.257 li
136.413 167.783 li
145.086 167.987 li
196.387 167.878 247.653 168.104 298.946 168.191 cv
304.762 168.191 li
@
grestore
28.058 105.233 mo
21.923 105.233 28.058 105.233 21.923 105.233 cv
21.923 102.92 21.923 105.233 21.923 102.92 cv
21.923 102.513 21.943 102.203 21.982 101.988 cv
22.032 101.687 22.127 101.434 22.268 101.231 cv
22.409 101.027 22.607 100.864 22.86 100.74 cv
23.114 100.615 23.393 100.553 23.697 100.553 cv
24.219 100.553 24.661 100.719 25.022 101.051 cv
25.383 101.383 25.564 101.982 25.564 102.849 cv
25.564 104.422 25.564 102.849 25.564 104.422 cv
28.058 104.422 25.564 104.422 28.058 104.422 cv
28.058 105.233 28.058 104.422 28.058 105.233 cv
cp
24.84 104.422 mo
24.84 102.837 24.84 104.422 24.84 102.837 cv
24.84 102.313 24.742 101.94 24.547 101.72 cv
24.352 101.5 24.077 101.39 23.723 101.39 cv
23.466 101.39 23.246 101.455 23.063 101.584 cv
22.881 101.714 22.76 101.885 22.701 102.097 cv
22.665 102.233 22.647 102.486 22.647 102.854 cv
22.647 104.422 22.647 102.854 22.647 104.422 cv
24.84 104.422 22.647 104.422 24.84 104.422 cv
f
28.058 99.557 mo
21.923 99.557 28.058 99.557 21.923 99.557 cv
21.923 98.746 21.923 99.557 21.923 98.746 cv
27.334 98.746 21.923 98.746 27.334 98.746 cv
27.334 95.726 27.334 98.746 27.334 95.726 cv
28.058 95.726 27.334 95.726 28.058 95.726 cv
28.058 99.557 28.058 95.726 28.058 99.557 cv
f
25.907 90.357 mo
26.112 89.546 25.907 90.357 26.112 89.546 cv
26.779 89.716 27.287 90.022 27.637 90.464 cv
27.988 90.906 28.163 91.446 28.163 92.084 cv
28.163 92.745 28.028 93.282 27.759 93.696 cv
27.49 94.11 27.1 94.425 26.589 94.641 cv
26.079 94.857 25.53 94.965 24.944 94.965 cv
24.306 94.965 23.748 94.843 23.273 94.599 cv
22.797 94.356 22.436 94.008 22.189 93.558 cv
21.942 93.108 21.818 92.612 21.818 92.072 cv
21.818 91.458 21.975 90.942 22.287 90.524 cv
22.6 90.106 23.039 89.815 23.605 89.65 cv
23.794 90.449 23.605 89.65 23.794 90.449 cv
23.347 90.591 23.022 90.797 22.819 91.068 cv
22.615 91.338 22.513 91.678 22.513 92.088 cv
22.513 92.559 22.626 92.953 22.852 93.27 cv
23.078 93.586 23.381 93.808 23.762 93.937 cv
24.143 94.065 24.536 94.129 24.94 94.129 cv
25.462 94.129 25.917 94.053 26.307 93.901 cv
26.696 93.749 26.987 93.513 27.179 93.192 cv
27.372 92.872 27.468 92.525 27.468 92.151 cv
27.468 91.697 27.337 91.312 27.075 90.997 cv
26.812 90.682 26.423 90.469 25.907 90.357 cv
f
31.105 87.153 mo
31.243 87.316 31.341 87.472 31.398 87.623 cv
31.455 87.773 31.483 87.934 31.483 88.107 cv
31.483 88.391 31.414 88.61 31.275 88.763 cv
31.135 88.916 30.958 88.992 30.741 88.992 cv
30.614 88.992 30.498 88.963 30.393 88.906 cv
30.288 88.848 30.204 88.772 30.141 88.679 cv
30.077 88.585 30.029 88.48 29.997 88.363 cv
29.974 88.277 29.952 88.147 29.931 87.973 cv
29.888 87.618 29.838 87.357 29.779 87.19 cv
29.719 87.188 29.681 87.187 29.665 87.187 cv
29.486 87.187 29.36 87.229 29.286 87.312 cv
29.187 87.424 29.137 87.59 29.137 87.812 cv
29.137 88.018 29.174 88.171 29.246 88.269 cv
29.318 88.367 29.447 88.44 29.631 88.487 cv
29.572 88.917 29.631 88.487 29.572 88.917 cv
29.388 88.878 29.24 88.813 29.126 88.724 cv
29.013 88.635 28.926 88.505 28.865 88.336 cv
28.804 88.167 28.774 87.971 28.774 87.748 cv
28.774 87.527 28.8 87.347 28.852 87.209 cv
28.904 87.071 28.969 86.969 29.048 86.904 cv
29.127 86.839 29.227 86.794 29.347 86.768 cv
29.422 86.753 29.557 86.746 29.753 86.746 cv
30.338 86.746 29.753 86.746 30.338 86.746 cv
30.747 86.746 31.005 86.736 31.114 86.718 cv
31.222 86.699 31.325 86.662 31.425 86.607 cv
31.425 87.065 31.425 86.607 31.425 87.065 cv
31.334 87.111 31.227 87.14 31.105 87.153 cv
cp
30.124 87.19 mo
30.189 87.349 30.244 87.588 30.29 87.907 cv
30.316 88.087 30.345 88.215 30.378 88.29 cv
30.41 88.365 30.458 88.422 30.52 88.463 cv
30.583 88.504 30.653 88.524 30.729 88.524 cv
30.846 88.524 30.944 88.48 31.022 88.391 cv
31.1 88.302 31.139 88.173 31.139 88.002 cv
31.139 87.833 31.102 87.682 31.028 87.551 cv
30.954 87.419 30.853 87.322 30.724 87.26 cv
30.625 87.213 30.478 87.19 30.285 87.19 cv
30.124 87.19 30.285 87.19 30.124 87.19 cv
f
31.425 85.269 mo
28.833 86.255 31.425 85.269 28.833 86.255 cv
28.833 85.791 28.833 86.255 28.833 85.791 cv
30.385 85.235 28.833 85.791 30.385 85.235 cv
30.553 85.175 30.727 85.119 30.907 85.069 cv
30.771 85.03 30.606 84.975 30.414 84.906 cv
28.833 84.33 30.414 84.906 28.833 84.33 cv
28.833 83.878 28.833 84.33 28.833 83.878 cv
31.425 84.859 28.833 83.878 31.425 84.859 cv
31.425 85.269 31.425 84.859 31.425 85.269 cv
f
30.59 81.666 mo
30.646 81.212 30.59 81.666 30.646 81.212 cv
30.911 81.284 31.117 81.416 31.264 81.61 cv
31.41 81.803 31.483 82.051 31.483 82.351 cv
31.483 82.73 31.367 83.031 31.133 83.253 cv
30.9 83.475 30.572 83.586 30.151 83.586 cv
29.714 83.586 29.376 83.474 29.135 83.249 cv
28.894 83.025 28.774 82.734 28.774 82.376 cv
28.774 82.029 28.892 81.747 29.128 81.527 cv
29.364 81.307 29.696 81.198 30.124 81.198 cv
30.15 81.198 30.189 81.198 30.241 81.2 cv
30.241 83.132 30.241 81.2 30.241 83.132 cv
30.526 83.116 30.744 83.035 30.895 82.891 cv
31.047 82.746 31.122 82.565 31.122 82.349 cv
31.122 82.188 31.08 82.051 30.995 81.937 cv
30.911 81.823 30.776 81.733 30.59 81.666 cv
cp
29.88 83.108 mo
29.88 81.661 29.88 83.108 29.88 81.661 cv
29.662 81.681 29.498 81.736 29.389 81.827 cv
29.22 81.967 29.135 82.148 29.135 82.371 cv
29.135 82.573 29.203 82.742 29.338 82.88 cv
29.473 83.017 29.653 83.093 29.88 83.108 cv
f
153.695 201.828 mo
154.507 202.033 153.695 201.828 154.507 202.033 cv
154.337 202.699 154.03 203.207 153.588 203.557 cv
153.146 203.907 152.606 204.082 151.967 204.082 cv
151.305 204.082 150.768 203.948 150.353 203.678 cv
149.939 203.409 149.624 203.02 149.408 202.51 cv
149.191 201.999 149.083 201.452 149.083 200.866 cv
149.083 200.228 149.205 199.671 149.45 199.196 cv
149.694 198.72 150.041 198.359 150.492 198.112 cv
150.942 197.866 151.438 197.742 151.979 197.742 cv
152.593 197.742 153.109 197.898 153.528 198.211 cv
153.946 198.523 154.238 198.962 154.402 199.528 cv
153.603 199.716 154.402 199.528 153.603 199.716 cv
153.461 199.27 153.254 198.945 152.984 198.742 cv
152.713 198.538 152.373 198.436 151.962 198.436 cv
151.491 198.436 151.097 198.549 150.78 198.775 cv
150.464 199.001 150.241 199.304 150.113 199.685 cv
149.984 200.065 149.92 200.458 149.92 200.862 cv
149.92 201.383 149.996 201.838 150.148 202.227 cv
150.3 202.616 150.537 202.907 150.858 203.099 cv
151.179 203.292 151.526 203.388 151.9 203.388 cv
152.354 203.388 152.739 203.257 153.055 202.995 cv
153.37 202.733 153.583 202.344 153.695 201.828 cv
f
155.542 203.978 mo
155.542 197.847 155.542 203.978 155.542 197.847 cv
157.856 197.847 155.542 197.847 157.856 197.847 cv
158.264 197.847 158.575 197.867 158.789 197.906 cv
159.091 197.956 159.343 198.052 159.547 198.192 cv
159.751 198.333 159.914 198.53 160.039 198.784 cv
160.163 199.038 160.225 199.317 160.225 199.62 cv
160.225 200.142 160.059 200.583 159.727 200.944 cv
159.395 201.305 158.795 201.486 157.927 201.486 cv
156.354 201.486 157.927 201.486 156.354 201.486 cv
156.354 203.978 156.354 201.486 156.354 203.978 cv
155.542 203.978 156.354 203.978 155.542 203.978 cv
cp
156.354 200.762 mo
157.94 200.762 156.354 200.762 157.94 200.762 cv
158.464 200.762 158.837 200.665 159.057 200.469 cv
159.278 200.274 159.388 200 159.388 199.646 cv
159.388 199.389 159.323 199.17 159.193 198.987 cv
159.064 198.804 158.893 198.684 158.681 198.625 cv
158.544 198.589 158.291 198.571 157.923 198.571 cv
156.354 198.571 157.923 198.571 156.354 198.571 cv
156.354 200.762 156.354 198.571 156.354 200.762 cv
f
165.281 197.847 mo
166.093 197.847 165.281 197.847 166.093 197.847 cv
166.093 201.389 166.093 197.847 166.093 201.389 cv
166.093 202.005 166.023 202.494 165.884 202.857 cv
165.744 203.219 165.492 203.514 165.128 203.741 cv
164.764 203.969 164.286 204.082 163.695 204.082 cv
163.12 204.082 162.65 203.983 162.285 203.785 cv
161.919 203.587 161.658 203.301 161.502 202.926 cv
161.346 202.551 161.268 202.039 161.268 201.389 cv
161.268 197.847 161.268 201.389 161.268 197.847 cv
162.08 197.847 161.268 197.847 162.08 197.847 cv
162.08 201.385 162.08 197.847 162.08 201.385 cv
162.08 201.917 162.129 202.31 162.228 202.562 cv
162.327 202.814 162.497 203.009 162.739 203.145 cv
162.98 203.282 163.275 203.35 163.624 203.35 cv
164.221 203.35 164.646 203.215 164.9 202.945 cv
165.154 202.674 165.281 202.154 165.281 201.385 cv
165.281 197.847 165.281 201.385 165.281 197.847 cv
f
172.63 202.351 mo
173.371 202.447 172.63 202.351 173.371 202.447 cv
173.29 202.957 173.083 203.357 172.749 203.645 cv
172.416 203.934 172.006 204.078 171.521 204.078 cv
170.913 204.078 170.424 203.88 170.054 203.482 cv
169.685 203.085 169.5 202.515 169.5 201.774 cv
169.5 201.294 169.579 200.875 169.738 200.515 cv
169.897 200.156 170.139 199.886 170.464 199.706 cv
170.789 199.526 171.143 199.436 171.525 199.436 cv
172.008 199.436 172.403 199.558 172.709 199.802 cv
173.016 200.046 173.213 200.393 173.3 200.841 cv
172.567 200.954 173.3 200.841 172.567 200.954 cv
172.497 200.656 172.374 200.432 172.197 200.281 cv
172.02 200.13 171.806 200.055 171.554 200.055 cv
171.175 200.055 170.867 200.191 170.63 200.463 cv
170.392 200.735 170.274 201.165 170.274 201.753 cv
170.274 202.35 170.388 202.783 170.617 203.054 cv
170.846 203.324 171.144 203.459 171.513 203.459 cv
171.808 203.459 172.055 203.369 172.253 203.187 cv
172.451 203.006 172.577 202.727 172.63 202.351 cv
f
173.735 201.757 mo
173.735 200.935 173.964 200.325 174.421 199.93 cv
174.804 199.601 175.269 199.436 175.819 199.436 cv
176.43 199.436 176.929 199.636 177.317 200.036 cv
177.705 200.436 177.899 200.989 177.899 201.694 cv
177.899 202.266 177.813 202.715 177.642 203.043 cv
177.47 203.37 177.22 203.625 176.892 203.806 cv
176.565 203.987 176.207 204.078 175.819 204.078 cv
175.197 204.078 174.694 203.879 174.31 203.48 cv
173.927 203.081 173.735 202.507 173.735 201.757 cv
cp
174.509 201.757 mo
174.509 202.326 174.633 202.752 174.882 203.035 cv
175.13 203.318 175.442 203.459 175.819 203.459 cv
176.193 203.459 176.504 203.317 176.752 203.032 cv
177.001 202.748 177.125 202.315 177.125 201.732 cv
177.125 201.183 177 200.767 176.75 200.484 cv
176.5 200.201 176.19 200.059 175.819 200.059 cv
175.442 200.059 175.13 200.2 174.882 200.482 cv
174.633 200.763 174.509 201.188 174.509 201.757 cv
f
178.509 202.652 mo
179.254 202.535 178.509 202.652 179.254 202.535 cv
179.296 202.833 179.412 203.062 179.603 203.221 cv
179.794 203.38 180.062 203.459 180.405 203.459 cv
180.751 203.459 181.007 203.389 181.175 203.248 cv
181.342 203.107 181.426 202.942 181.426 202.752 cv
181.426 202.582 181.352 202.448 181.204 202.351 cv
181.101 202.284 180.844 202.199 180.434 202.096 cv
179.882 201.956 179.499 201.836 179.285 201.734 cv
179.072 201.632 178.91 201.492 178.8 201.312 cv
178.69 201.132 178.635 200.933 178.635 200.716 cv
178.635 200.518 178.68 200.335 178.771 200.166 cv
178.861 199.997 178.985 199.857 179.141 199.746 cv
179.258 199.659 179.418 199.586 179.62 199.526 cv
179.822 199.466 180.039 199.436 180.271 199.436 cv
180.62 199.436 180.926 199.486 181.189 199.587 cv
181.453 199.687 181.648 199.823 181.773 199.994 cv
181.899 200.166 181.985 200.395 182.033 200.682 cv
181.296 200.783 182.033 200.682 181.296 200.783 cv
181.263 200.554 181.166 200.376 181.005 200.247 cv
180.845 200.119 180.618 200.055 180.325 200.055 cv
179.979 200.055 179.732 200.112 179.584 200.226 cv
179.437 200.341 179.363 200.475 179.363 200.628 cv
179.363 200.726 179.393 200.813 179.455 200.891 cv
179.516 200.972 179.612 201.039 179.744 201.092 cv
179.819 201.12 180.041 201.184 180.409 201.285 cv
180.942 201.427 181.314 201.543 181.524 201.634 cv
181.735 201.724 181.9 201.856 182.02 202.029 cv
182.14 202.202 182.2 202.416 182.2 202.673 cv
182.2 202.924 182.127 203.16 181.98 203.382 cv
181.834 203.603 181.622 203.775 181.346 203.896 cv
181.07 204.017 180.758 204.078 180.409 204.078 cv
179.831 204.078 179.391 203.958 179.089 203.718 cv
178.786 203.479 178.593 203.123 178.509 202.652 cv
f
184.741 203.304 mo
184.85 203.969 184.741 203.304 184.85 203.969 cv
184.638 204.014 184.448 204.036 184.281 204.036 cv
184.007 204.036 183.795 203.993 183.645 203.906 cv
183.494 203.82 183.388 203.706 183.327 203.565 cv
183.265 203.425 183.234 203.128 183.234 202.677 cv
183.234 200.122 183.234 202.677 183.234 200.122 cv
182.682 200.122 183.234 200.122 182.682 200.122 cv
182.682 199.536 182.682 200.122 182.682 199.536 cv
183.234 199.536 182.682 199.536 183.234 199.536 cv
183.234 198.436 183.234 199.536 183.234 198.436 cv
183.984 197.985 183.234 198.436 183.984 197.985 cv
183.984 199.536 183.984 197.985 183.984 199.536 cv
184.741 199.536 183.984 199.536 184.741 199.536 cv
184.741 200.122 184.741 199.536 184.741 200.122 cv
183.984 200.122 184.741 200.122 183.984 200.122 cv
183.984 202.719 183.984 200.122 183.984 202.719 cv
183.984 202.933 183.997 203.071 184.023 203.133 cv
184.05 203.194 184.093 203.243 184.153 203.279 cv
184.213 203.315 184.299 203.333 184.41 203.333 cv
184.494 203.333 184.604 203.324 184.741 203.304 cv
f
190.702 203.978 mo
190.702 203.326 190.702 203.978 190.702 203.326 cv
190.356 203.827 189.886 204.078 189.292 204.078 cv
189.029 204.078 188.785 204.028 188.557 203.928 cv
188.33 203.827 188.161 203.701 188.051 203.549 cv
187.941 203.397 187.863 203.211 187.819 202.991 cv
187.788 202.843 187.773 202.609 187.773 202.288 cv
187.773 199.537 187.773 202.288 187.773 199.537 cv
188.526 199.537 187.773 199.537 188.526 199.537 cv
188.526 202 188.526 199.537 188.526 202 cv
188.526 202.393 188.541 202.658 188.572 202.794 cv
188.619 202.992 188.72 203.148 188.873 203.261 cv
189.027 203.374 189.216 203.43 189.442 203.43 cv
189.668 203.43 189.88 203.372 190.078 203.257 cv
190.277 203.141 190.417 202.983 190.499 202.784 cv
190.581 202.585 190.622 202.296 190.622 201.916 cv
190.622 199.537 190.622 201.916 190.622 199.537 cv
191.376 199.537 190.622 199.537 191.376 199.537 cv
191.376 203.978 191.376 199.537 191.376 203.978 cv
190.702 203.978 191.376 203.978 190.702 203.978 cv
f
192.585 203.978 mo
192.585 199.537 192.585 203.978 192.585 199.537 cv
193.263 199.537 192.585 199.537 193.263 199.537 cv
193.263 200.168 193.263 199.537 193.263 200.168 cv
193.589 199.68 194.061 199.436 194.677 199.436 cv
194.945 199.436 195.191 199.485 195.416 199.581 cv
195.641 199.677 195.809 199.803 195.92 199.959 cv
196.032 200.115 196.11 200.301 196.155 200.515 cv
196.183 200.655 196.196 200.899 196.196 201.247 cv
196.196 203.978 196.196 201.247 196.196 203.978 cv
195.443 203.978 196.196 203.978 195.443 203.978 cv
195.443 201.276 195.443 203.978 195.443 201.276 cv
195.443 200.97 195.414 200.741 195.355 200.589 cv
195.297 200.437 195.193 200.315 195.044 200.225 cv
194.894 200.134 194.719 200.089 194.518 200.089 cv
194.198 200.089 193.921 200.191 193.688 200.394 cv
193.455 200.598 193.338 200.984 193.338 201.552 cv
193.338 203.978 193.338 201.552 193.338 203.978 cv
192.585 203.978 193.338 203.978 192.585 203.978 cv
f
197.384 198.713 mo
197.384 197.847 197.384 198.713 197.384 197.847 cv
198.137 197.847 197.384 197.847 198.137 197.847 cv
198.137 198.713 198.137 197.847 198.137 198.713 cv
197.384 198.713 198.137 198.713 197.384 198.713 cv
cp
197.384 203.978 mo
197.384 199.537 197.384 203.978 197.384 199.537 cv
198.137 199.537 197.384 199.537 198.137 199.537 cv
198.137 203.978 198.137 199.537 198.137 203.978 cv
197.384 203.978 198.137 203.978 197.384 203.978 cv
f
200.963 203.304 mo
201.072 203.969 200.963 203.304 201.072 203.969 cv
200.86 204.014 200.67 204.036 200.503 204.036 cv
200.229 204.036 200.017 203.993 199.867 203.906 cv
199.716 203.82 199.61 203.706 199.549 203.565 cv
199.487 203.425 199.456 203.128 199.456 202.677 cv
199.456 200.122 199.456 202.677 199.456 200.122 cv
198.904 200.122 199.456 200.122 198.904 200.122 cv
198.904 199.536 198.904 200.122 198.904 199.536 cv
199.456 199.536 198.904 199.536 199.456 199.536 cv
199.456 198.436 199.456 199.536 199.456 198.436 cv
200.206 197.985 199.456 198.436 200.206 197.985 cv
200.206 199.536 200.206 197.985 200.206 199.536 cv
200.963 199.536 200.206 199.536 200.963 199.536 cv
200.963 200.122 200.963 199.536 200.963 200.122 cv
200.206 200.122 200.963 200.122 200.206 200.122 cv
200.206 202.719 200.206 200.122 200.206 202.719 cv
200.206 202.933 200.219 203.071 200.245 203.133 cv
200.272 203.194 200.315 203.243 200.375 203.279 cv
200.435 203.315 200.521 203.333 200.632 203.333 cv
200.716 203.333 200.826 203.324 200.963 203.304 cv
f
201.364 202.652 mo
202.109 202.535 201.364 202.652 202.109 202.535 cv
202.151 202.833 202.267 203.062 202.458 203.221 cv
202.649 203.38 202.917 203.459 203.26 203.459 cv
203.606 203.459 203.862 203.389 204.03 203.248 cv
204.197 203.107 204.281 202.942 204.281 202.752 cv
204.281 202.582 204.207 202.448 204.059 202.351 cv
203.956 202.284 203.699 202.199 203.289 202.096 cv
202.737 201.956 202.354 201.836 202.14 201.734 cv
201.927 201.632 201.765 201.492 201.655 201.312 cv
201.545 201.132 201.49 200.933 201.49 200.716 cv
201.49 200.518 201.535 200.335 201.626 200.166 cv
201.716 199.997 201.84 199.857 201.996 199.746 cv
202.113 199.659 202.273 199.586 202.475 199.526 cv
202.677 199.466 202.894 199.436 203.126 199.436 cv
203.475 199.436 203.781 199.486 204.044 199.587 cv
204.308 199.687 204.503 199.823 204.628 199.994 cv
204.754 200.166 204.84 200.395 204.888 200.682 cv
204.151 200.783 204.888 200.682 204.151 200.783 cv
204.118 200.554 204.021 200.376 203.86 200.247 cv
203.7 200.119 203.473 200.055 203.18 200.055 cv
202.834 200.055 202.587 200.112 202.44 200.226 cv
202.292 200.341 202.218 200.475 202.218 200.628 cv
202.218 200.726 202.248 200.813 202.31 200.891 cv
202.371 200.972 202.467 201.039 202.599 201.092 cv
202.674 201.12 202.896 201.184 203.264 201.285 cv
203.797 201.427 204.169 201.543 204.379 201.634 cv
204.59 201.724 204.755 201.856 204.875 202.029 cv
204.995 202.202 205.055 202.416 205.055 202.673 cv
205.055 202.924 204.982 203.16 204.835 203.382 cv
204.689 203.603 204.477 203.775 204.201 203.896 cv
203.925 204.017 203.613 204.078 203.264 204.078 cv
202.686 204.078 202.246 203.958 201.944 203.718 cv
201.641 203.479 201.448 203.123 201.364 202.652 cv
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.29 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
