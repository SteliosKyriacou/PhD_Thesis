%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADP198.tmp.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Kampolis Ioannis
%%CreationDate: 19/2/2009, 5:43:41 μμ
%%BoundingBox: 0 0 426 213
%%HiResBoundingBox: 0 0 425.9180 212.9551
%%CropBox: 0 0 425.9180 212.9551
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	1 index dup/ID get exch/Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.30 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.30 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.30 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get ne dup
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
				if
				end
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} (% &end XMP packet& %) ReadBypdfmark_5
<?xpacket begin='ο»Ώ' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="Acrobat Distiller 8.0.0 (Windows)"
   xap:CreatorTool="Adobe Illustrator(R) 8.0"
   xap:ModifyDate="2009-02-19T17:43:22+02:00"
   xap:CreateDate="2009-02-19T17:43:22+02:00"
   dc:format="application/pdf"
   xapMM:DocumentID="uuid:8a5b189b-f343-4702-98d7-929c3e96f1d5"
   xapMM:InstanceID="uuid:cd3ac7d2-2dc2-46c4-a590-49275441521b">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">shea.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Kampolis Ioannis</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
<< /0 
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]

/CSA add_res
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -212.955 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 212.955 li
425.918 212.955 li
425.918 0 li
cp
clp
[1 0 0 1 0 0 ]ct
.49998 212.455 mo
425.418 212.455 li
425.418 .499985 li
.49998 .499985 li
cp
false sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
gsave
.059998 0 mo
425.918 0 li
425.918 212.955 li
.059998 212.955 li
cp
clp
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
false sadj
425.418 212.455 mo
.5 212.455 li
.5 .499985 li
425.418 .499985 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.21569 .21176 .22353 colr
@
grestore
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
false sadj
56.44 192.583 mo
345.541 192.639 li
/1 
[/DeviceGray] /CSA add_res
0 gry
@
345.216 192.781 mo
345.216 177.848 li
@
1.8 lw
352.146 184.506 mo
352.146 186.201 351.122 187.576 349.859 187.576 cv
348.594 187.576 347.571 186.201 347.571 184.506 cv
347.571 182.813 348.594 181.437 349.859 181.437 cv
351.122 181.437 352.146 182.813 352.146 184.506 cv
cp
1 gry
@
171.938 182.759 mo
171.938 184.454 170.913 185.829 169.65 185.829 cv
168.386 185.829 167.362 184.454 167.362 182.759 cv
167.362 181.066 168.386 179.69 169.65 179.69 cv
170.913 179.69 171.938 181.066 171.938 182.759 cv
cp
@
62.52 181.224 mo
62.52 182.919 61.495 184.294 60.232 184.294 cv
58.968 184.294 57.944 182.919 57.944 181.224 cv
57.944 179.53 58.968 178.155 60.232 178.155 cv
61.495 178.155 62.52 179.53 62.52 181.224 cv
cp
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
true set_gvm
%ADOBeginSubsetFont: PBAAAA+Myriad-Roman Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /PBAAAA+Myriad-Roman def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1992, 1994 Adobe Systems Incorporated.  All Rights Reserved.Myriad is a trademark of Adobe Systems Incorporated may be registered in certain jurisdictions.) def
/Weight (Regular) def
/ItalicAngle 0 def
/BaseFontName (Myriad-Roman) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 77 /M put
dup 97 /a put
dup 103 /g put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 116 /t put
def
/FontBBox {-46 -250 1126 831} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-11 -0 674 685 484 496 650 661 710 721] def
/OtherBlues [261 266 -200 -194 -221 -212] def
/BlueScale 0.0604583 def
/BlueShift 7.1 def
/StdHW [67] def
/StdVW [88] def
/StemSnapH [67 73] def
/StemSnapV [88 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
9 dict dup begin
/M <1C60D8A8C9B6D9EA19A14B847D0E8EB8BF4B471CD6F46D062EB4BE987671
1DE846CB52CA29717591BA788944E909A85262E823C4FA12BA37712263FC72E9
89A6DED74E14903D34D6198FBDC555D5CFE2C4496EBCDE1C8C3752795BF188E4
FAAED3EDACC0501E6038041D4A8B4E60EE57E2BABA6257E8> |-
/a <1C60D8A8C9B75946039FC5B56ED6A5087B2F0B1630F4B83F01E3CEBCE482
B366633F5D4F2D1210B8096336DCE594268DC8CBC788AC277818F4265A158323
040A081AF2813A4C46853024307C79D63531339CB7A33AE1B19A9EBE155A9044
AF94E2AB014EF5F3C3F84453DB645AE8DB251FAE462208E18C764287E4C503E5
D539A89B66BE752516C9BD24116E70C150AAE316110E44DAC51B50A5E6719041
345788BD574DAE6197556A3E98> |-
/g <1C60D8A8C9B7ECD94DE1A189191AD5F29E71326BFA4D4D412047E3277675
0DDBFB4B53D1D72CDE8C545BF03E4EA2D14ABBB97F7F8A645D1D3F3489C958CE
A0678D07AAB04EB9684E42BC2E838442654990758C06B4D2E0BFF1F9FA6DF30D
4D41D589956EB1075E6781B91347B7650C23594D4A6826980A08D885E2AC9258
11EC824E080597D981C7E827E41106E60C554C6F930B0893E721BF0E4B2B8600
9695CEA38C38005F0694E5307908AFC08742AFD3E24E9B90E6A5557848F938C4
5D089C8461F583639667EA> |-
/i <1C60D8A8C9B88055FF27B3934D040E8DBE022633F95365A77FF409BAAFF1
E1652439417FB10FB1C8BD44F4FF37E45388A4291AA4DFED968F1E2FD890896D
6F4E848D055FBE735701C484F07858CCD9> |-
/n <1C60D8A8C9B790A816BA887E1FDE7CD82D372FF5366DAE5DCB8586A90B38
B997881AE3967F459F4112E189F13732C7688D71582E7A9ED9DDE11A26AE52A0
AA137F8A21AF613F6AFFF512A754B0550B0B3C16BE3A435E248CF28FD678E415
358EE253E19230> |-
/o <1C60D8A8C9B7967683396363C51B2F1979461F3B52B4DE9D5B25D8A855AB
1B46FE9631B4DCEE52CD84AA08F1094EFB92ECAE28B9F270EC36D74BB1583561
930BC929FA93A4970736610867F1192023A3BA25> |-
/r <1C60D8A8C9B825FA276057E42F8B6B57C9D83BDDD098E1F2815023B08CE6
DB69AE017A2B457327A0071129EDB590BE7AA3607E0922708891597C3D8F669F
3ED32EED759BFAF13F7F4F0E8EBB695840553EB7F2B5DF808E6281337961393B
D02988D264043D0826E651AB7250C84536DC39AF> |-
/t <1C60D8A8C9B821B37F30E246C711EE3A9B1905ECA029E018F1B853B19499
2023A1A2094A61AA6AC40B7390D1BCF785D2429D0AF32EA1E2BF602E38DE50F9
0EE120A01A6478CC20B62FEDE17CBADD3C1BB7C9E4FE75CF0D3DFB8214AF8D64
2DB00A> |-
/.notdef <1C60D8A8C9B896187A> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/PRZTWJ+Myriad-Roman /PBAAAA+Myriad-Roman findfont ct_VMDictPut
/PRZTWJ+Myriad-Roman*1 
[77{/.notdef}rp /M 19{/.notdef}rp /a 5{/.notdef}rp /g /.notdef /i 
4{/.notdef}rp /n /o 2{/.notdef}rp /r /.notdef /t 139{/.notdef}rp]
PRZTWJ+Myriad-Roman nf
PRZTWJ+Myriad-Roman*1 [10 0 0 -10 0 0 ]msf
218.576 190.868 mo
(Migration)
[8.17201 2.32993 5.58006 3.25996 4.80994 3.29994 2.32994 5.47997 0 ]xsh
1 lw
56.634 192.49 mo
56.634 177.557 li
0 gry
@
196.748 191.679 mo
196.748 176.747 li
@
16.124 177.432 mo
127.381 177.432 li
127.381 33.915 li
16.124 33.915 li
cp
1 gry
f
[12 12 ] 0 dsh
127.381 33.916 mo
16.124 33.916 li
16.124 177.433 li
127.381 177.433 li
127.381 33.916 li
cp
0 gry
@
26.441 166.581 mo
97.774 166.581 li
97.774 141.248 li
26.441 141.248 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
[] 0 dsh
97.774 166.581 mo
26.441 166.581 li
26.441 141.248 li
97.774 141.248 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.21569 .21176 .22353 colr
@
.3 lw
67.807 152.723 mo
67.876 152.695 li
0 gry
@
67.36 152.876 mo
67.807 152.723 li
@
67.853 152.735 mo
67.807 152.722 li
@
66.919 153.01 mo
67.36 152.875 li
@
67.744 152.916 mo
67.36 152.875 li
@
66.477 153.163 mo
66.918 153.011 li
@
67.652 153.039 mo
66.919 153.01 li
@
67.245 153.18 mo
67.646 153.051 li
@
66.03 153.363 mo
66.477 153.164 li
@
67.245 153.18 mo
66.477 153.162 li
@
77.369 148.785 mo
77.805 149.288 li
@
66.798 153.42 mo
67.245 153.18 li
@
67.617 153.091 mo
67.245 153.179 li
@
76.922 148.409 mo
77.369 148.784 li
@
66.798 153.42 mo
66.03 153.361 li
@
65.59 153.636 mo
66.031 153.362 li
@
66.357 153.759 mo
66.798 153.419 li
@
67.452 153.32 mo
66.799 153.42 li
@
66.357 153.759 mo
65.59 153.636 li
@
65.149 153.958 mo
65.59 153.636 li
@
85.814 154.057 mo
85.047 153.532 li
@
84.279 152.782 mo
85.047 153.532 li
@
84.6 153.591 mo
85.047 153.532 li
@
86.582 154.3 mo
85.813 154.059 li
@
85.368 154.253 mo
85.814 154.059 li
@
76.922 148.41 mo
77.656 149.295 li
@
77.248 149.072 mo
77.632 149.301 li
@
83.511 152.05 mo
84.279 152.783 li
@
83.832 152.723 mo
84.278 152.784 li
@
82.296 151.324 mo
82.743 151.506 li
@
83.511 152.051 mo
82.744 151.506 li
@
83.064 151.91 mo
83.511 152.051 li
@
87.35 154.448 mo
86.582 154.301 li
@
86.135 154.548 mo
86.582 154.302 li
@
67.125 153.786 mo
66.357 153.763 li
@
65.916 154.173 mo
66.357 153.763 li
@
76.481 148.095 mo
76.922 148.412 li
@
77.248 149.074 mo
77.403 149.349 li
@
64.701 154.313 mo
65.149 153.96 li
@
65.916 154.172 mo
65.149 153.961 li
@
86.903 154.693 mo
87.35 154.447 li
@
88.117 154.588 mo
87.349 154.447 li
@
84.599 153.592 mo
85.367 154.254 li
@
86.134 154.547 mo
85.367 154.254 li
@
84.925 154.447 mo
85.367 154.254 li
@
67.8 152.83 mo
67.124 153.785 li
@
66.683 154.347 mo
67.124 153.785 li
@
83.831 152.724 mo
84.599 153.592 li
@
84.157 153.662 mo
84.598 153.592 li
@
66.682 154.347 mo
65.914 154.172 li
@
65.467 154.571 mo
65.914 154.173 li
@
86.901 154.695 mo
86.133 154.549 li
@
85.692 154.795 mo
86.133 154.548 li
@
87.669 154.836 mo
88.116 154.59 li
@
88.884 154.736 mo
88.116 154.589 li
@
65.467 154.571 mo
64.699 154.313 li
@
64.258 154.635 mo
64.699 154.313 li
@
83.062 151.91 mo
83.83 152.723 li
@
83.389 152.672 mo
83.83 152.724 li
@
76.806 148.851 mo
77.246 149.074 li
@
76.479 148.094 mo
77.246 149.073 li
@
67.449 153.487 mo
66.681 154.346 li
@
66.234 154.799 mo
66.681 154.347 li
@
82.62 151.787 mo
83.061 151.909 li
@
82.293 151.323 mo
83.061 151.909 li
@
66.233 154.799 mo
65.465 154.57 li
@
65.025 154.887 mo
65.466 154.571 li
@
87.668 154.834 mo
86.9 154.693 li
@
86.46 154.939 mo
86.901 154.693 li
@
76.806 148.85 mo
77.098 149.418 li
@
85.692 154.792 mo
84.924 154.446 li
@
84.483 154.646 mo
84.924 154.447 li
@
84.156 153.661 mo
84.923 154.447 li
@
88.435 154.98 mo
88.883 154.734 li
@
75.447 147.409 mo
75.71 147.579 li
@
76.478 148.094 mo
75.71 147.579 li
@
76.037 147.814 mo
76.478 148.094 li
@
83.388 152.671 mo
84.156 153.661 li
@
83.715 153.714 mo
84.156 153.661 li
@
86.46 154.94 mo
85.692 154.793 li
@
85.251 155.039 mo
85.692 154.794 li
@
67.003 154.312 mo
66.235 154.799 li
@
65.794 155.051 mo
66.235 154.799 li
@
65.026 154.887 mo
64.258 154.635 li
@
63.817 154.887 mo
64.258 154.635 li
@
87.228 155.08 mo
87.669 154.834 li
@
88.436 154.98 mo
87.669 154.834 li
@
65.794 155.049 mo
65.026 154.885 li
@
64.585 155.125 mo
65.026 154.885 li
@
82.621 151.785 mo
83.389 152.67 li
@
82.948 152.611 mo
83.389 152.67 li
@
86.018 155.183 mo
86.46 154.937 li
@
87.227 155.078 mo
86.459 154.937 li
@
81.852 151.169 mo
81.193 150.946 li
@
87.994 155.224 mo
88.435 154.979 li
@
83.714 153.712 mo
84.482 154.645 li
@
84.035 154.796 mo
84.482 154.645 li
@
85.249 155.036 mo
84.481 154.644 li
@
76.037 147.81 mo
76.805 148.848 li
@
76.357 148.56 mo
76.804 148.848 li
@
84.802 155.283 mo
85.249 155.036 li
@
86.016 155.183 mo
85.248 155.036 li
@
82.178 151.672 mo
82.618 151.784 li
@
81.851 151.169 mo
82.619 151.785 li
@
66.365 154.972 mo
65.792 155.048 li
@
65.351 155.294 mo
65.792 155.048 li
@
63.369 155.13 mo
63.816 154.884 li
@
64.583 155.124 mo
63.815 154.884 li
@
81.41 151.045 mo
81.851 151.168 li
@
87.993 155.223 mo
87.225 155.077 li
@
86.778 155.323 mo
87.225 155.077 li
@
67 154.308 mo
67.447 153.483 li
@
68.214 152.058 mo
67.446 153.483 li
@
82.945 152.61 mo
83.713 153.712 li
@
83.265 153.706 mo
83.712 153.712 li
@
76.355 148.559 mo
76.831 149.497 li
@
76.682 149.492 mo
76.693 149.503 li
@
67.767 153.026 mo
66.999 154.308 li
@
76.035 147.809 mo
75.485 147.441 li
@
65.349 155.292 mo
64.581 155.122 li
@
64.134 155.351 mo
64.581 155.123 li
@
75.587 147.523 mo
76.035 147.809 li
@
85.569 155.427 mo
86.015 155.182 li
@
86.777 155.323 mo
86.015 155.182 li
@
87.545 155.469 mo
87.992 155.222 li
@
83.265 153.705 mo
84.033 154.795 li
@
83.592 154.73 mo
84.033 154.793 li
@
84.801 155.281 mo
84.033 154.795 li
@
82.177 151.671 mo
82.945 152.61 li
@
82.497 152.492 mo
82.945 152.609 li
@
84.359 155.498 mo
84.8 155.281 li
@
85.569 155.427 mo
84.801 155.281 li
@
66.003 155.229 mo
65.35 155.292 li
@
64.903 155.528 mo
65.35 155.294 li
@
64.135 155.351 mo
63.367 155.128 li
@
62.926 155.386 mo
63.367 155.128 li
@
86.337 155.569 mo
86.778 155.322 li
@
87.545 155.469 mo
86.777 155.323 li
@
81.409 151.044 mo
82.178 151.671 li
@
81.73 151.483 mo
82.177 151.67 li
@
76.682 149.491 mo
76.693 149.509 li
@
63.694 155.591 mo
64.135 155.351 li
@
64.902 155.527 mo
64.134 155.35 li
@
81.059 150.884 mo
81.409 151.043 li
@
85.127 155.672 mo
85.568 155.425 li
@
86.336 155.567 mo
85.568 155.425 li
@
82.824 153.422 mo
83.265 153.703 li
@
82.497 152.49 mo
83.265 153.703 li
@
75.587 147.52 mo
76.355 148.556 li
@
75.914 148.123 mo
76.355 148.557 li
@
87.103 155.711 mo
87.544 155.466 li
@
66.884 154.451 mo
66.357 154.967 li
@
63.693 155.588 mo
62.925 155.383 li
@
62.484 155.658 mo
62.925 155.383 li
@
65.669 155.452 mo
64.901 155.523 li
@
64.461 155.757 mo
64.901 155.524 li
@
83.591 154.727 mo
84.359 155.495 li
@
83.912 155.581 mo
84.358 155.493 li
@
85.126 155.669 mo
84.358 155.493 li
@
85.894 155.811 mo
86.335 155.565 li
@
87.103 155.71 mo
86.335 155.565 li
@
75.146 147.16 mo
75.586 147.517 li
@
83.144 154.503 mo
83.591 154.727 li
@
82.823 153.419 mo
83.59 154.727 li
@
82.055 152.129 mo
82.495 152.487 li
@
81.728 151.48 mo
82.495 152.488 li
@
76.239 148.978 mo
76.68 149.488 li
@
75.912 148.123 mo
76.68 149.489 li
@
64.459 155.759 mo
63.691 155.589 li
@
63.249 155.847 mo
63.69 155.589 li
@
85.892 155.813 mo
85.124 155.671 li
@
84.678 155.917 mo
85.124 155.671 li
@
86.659 155.952 mo
87.1 155.711 li
@
69.42 149.857 mo
68.652 151.181 li
@
68.21 152.054 mo
68.652 151.181 li
@
65.225 155.735 mo
65.666 155.453 li
@
66.433 154.915 mo
65.665 155.454 li
@
68.977 150.802 mo
68.209 152.055 li
@
67.763 153.024 mo
68.209 152.056 li
@
67.321 153.909 mo
67.763 153.024 li
@
68.531 151.822 mo
67.763 153.024 li
@
62.034 155.942 mo
62.481 155.661 li
@
63.248 155.847 mo
62.48 155.659 li
@
65.225 155.737 mo
64.458 155.759 li
@
64.016 156.011 mo
64.458 155.76 li
@
81.285 151.095 mo
81.726 151.483 li
@
68.09 152.842 mo
67.322 153.909 li
@
66.881 154.453 mo
67.322 153.909 li
@
86.659 155.954 mo
85.892 155.813 li
@
85.445 156.059 mo
85.892 155.814 li
@
84.678 155.918 mo
83.91 155.584 li
@
83.142 154.506 mo
83.91 155.584 li
@
83.468 155.549 mo
83.91 155.584 li
@
82.374 153.075 mo
82.821 153.422 li
@
82.054 152.132 mo
82.822 153.422 li
@
64.017 156.011 mo
63.249 155.847 li
@
62.803 156.117 mo
63.249 155.847 li
@
75.144 147.162 mo
75.912 148.124 li
@
75.47 147.754 mo
75.911 148.123 li
@
85.445 156.058 mo
84.678 155.917 li
@
84.235 156.123 mo
84.677 155.918 li
@
66.434 154.916 mo
66.881 154.453 li
@
67.649 153.586 mo
66.881 154.453 li
@
86.212 156.194 mo
86.659 155.953 li
@
76.237 148.98 mo
76.598 149.507 li
@
65.992 155.356 mo
65.224 155.737 li
@
64.783 156.036 mo
65.224 155.737 li
@
61.592 156.218 mo
62.033 155.944 li
@
62.801 156.118 mo
62.033 155.942 li
@
82.699 154.249 mo
83.14 154.507 li
@
82.372 153.076 mo
83.14 154.507 li
@
75.142 147.163 mo
74.374 146.671 li
@
73.939 146.437 mo
74.375 146.67 li
@
63.568 156.27 mo
64.015 156.011 li
@
64.782 156.036 mo
64.015 156.012 li
@
74.7 146.883 mo
75.141 147.164 li
@
86.21 156.196 mo
85.442 156.06 li
@
85.001 156.272 mo
85.442 156.06 li
@
81.283 151.096 mo
82.051 152.133 li
@
81.61 151.737 mo
82.051 152.134 li
@
67.2 154.226 mo
66.432 154.917 li
@
65.991 155.358 mo
66.432 154.919 li
@
63.568 156.272 mo
62.801 156.12 li
@
62.359 156.376 mo
62.801 156.118 li
@
75.789 148.665 mo
76.236 148.981 li
@
75.468 147.756 mo
76.236 148.982 li
@
85.002 156.272 mo
84.234 156.125 li
@
83.466 155.55 mo
84.234 156.124 li
@
83.793 156.265 mo
84.233 156.124 li
@
82.698 154.249 mo
83.466 155.55 li
@
83.025 155.485 mo
83.465 155.548 li
@
85.769 156.405 mo
86.21 156.195 li
@
65.55 155.813 mo
64.782 156.036 li
@
64.336 156.352 mo
64.782 156.036 li
@
61.15 156.481 mo
61.591 156.216 li
@
62.358 156.375 mo
61.59 156.217 li
@
80.841 150.686 mo
81.283 151.094 li
@
64.335 156.352 mo
63.567 156.27 li
@
63.126 156.522 mo
63.567 156.27 li
@
70.625 148.129 mo
69.858 149.107 li
@
69.417 149.857 mo
69.858 149.107 li
@
81.93 152.729 mo
82.371 153.074 li
@
81.61 151.733 mo
82.371 153.074 li
@
66.759 154.837 mo
65.991 155.354 li
@
65.55 155.811 mo
65.991 155.354 li
@
84.56 156.444 mo
85.001 156.268 li
@
85.769 156.403 mo
85.001 156.268 li
@
68.529 151.821 mo
68.088 152.841 li
@
67.647 153.585 mo
68.088 152.841 li
@
68.855 152.062 mo
68.087 152.841 li
@
70.185 148.92 mo
69.417 149.857 li
@
68.975 150.802 mo
69.417 149.859 li
@
69.296 150.965 mo
68.528 151.821 li
@
68.975 150.802 mo
68.529 151.822 li
@
74.699 146.881 mo
75.467 147.754 li
@
75.02 147.567 mo
75.467 147.754 li
@
69.743 149.887 mo
68.975 150.802 li
@
61.917 156.626 mo
62.358 156.374 li
@
63.126 156.521 mo
62.358 156.374 li
@
81.93 152.729 mo
82.698 154.246 li
@
82.257 154.041 mo
82.698 154.246 li
@
75.788 148.662 mo
76.424 149.517 li
@
74.699 146.88 mo
73.937 146.436 li
@
73.489 146.382 mo
73.936 146.436 li
@
68.413 152.91 mo
67.645 153.584 li
@
67.198 154.222 mo
67.645 153.583 li
@
63.892 156.637 mo
64.333 156.35 li
@
65.101 156.25 mo
64.333 156.351 li
@
72.28 146.616 mo
71.512 147.191 li
@
71.071 147.553 mo
71.512 147.19 li
@
83.023 155.482 mo
83.791 156.26 li
@
83.343 156.402 mo
83.79 156.26 li
@
84.558 156.443 mo
83.79 156.26 li
@
85.326 156.578 mo
85.767 156.402 li
@
74.257 146.774 mo
74.698 146.879 li
@
66.317 155.441 mo
65.549 155.81 li
@
65.102 156.25 mo
65.549 155.811 li
@
61.916 156.625 mo
61.148 156.48 li
@
60.701 156.73 mo
61.148 156.479 li
@
63.892 156.636 mo
63.124 156.519 li
@
62.678 156.764 mo
63.125 156.519 li
@
82.575 155.482 mo
83.023 155.482 li
@
82.255 154.04 mo
83.023 155.482 li
@
67.966 153.684 mo
67.197 154.222 li
@
66.757 154.837 mo
67.198 154.222 li
@
81.161 151.393 mo
81.608 151.733 li
@
80.84 150.684 mo
81.609 151.733 li
@
72.281 146.616 mo
72.722 146.447 li
@
73.489 146.382 mo
72.722 146.447 li
@
75.347 148.632 mo
75.788 148.662 li
@
75.02 147.566 mo
75.788 148.663 li
@
84.113 156.609 mo
84.56 156.444 li
@
85.327 156.58 mo
84.559 156.445 li
@
61.47 156.873 mo
61.917 156.626 li
@
62.68 156.767 mo
61.918 156.626 li
@
70.626 148.129 mo
71.074 147.555 li
@
71.841 146.998 mo
71.073 147.555 li
@
64.662 156.655 mo
65.103 156.251 li
@
65.871 156.022 mo
65.103 156.25 li
@
67.527 154.405 mo
66.759 154.839 li
@
66.319 155.442 mo
66.76 154.838 li
@
64.663 156.655 mo
63.895 156.637 li
@
63.449 156.907 mo
63.896 156.637 li
@
80.397 150.367 mo
80.843 150.684 li
@
80.076 150.014 mo
80.844 150.684 li
@
60.264 156.977 mo
60.705 156.731 li
@
61.472 156.872 mo
60.704 156.731 li
@
84.883 156.755 mo
85.329 156.579 li
@
84.115 156.609 mo
83.347 156.403 li
@
82.579 155.484 mo
83.347 156.404 li
@
82.906 156.596 mo
83.347 156.404 li
@
81.164 151.394 mo
81.932 152.729 li
@
81.491 152.519 mo
81.932 152.73 li
@
79.629 149.7 mo
80.075 150.015 li
@
74.581 147.62 mo
75.022 147.567 li
@
74.26 146.776 mo
75.022 147.566 li
@
62.239 157.013 mo
62.681 156.766 li
@
63.449 156.909 mo
62.681 156.767 li
@
74.26 146.777 mo
73.492 146.384 li
@
73.051 146.543 mo
73.492 146.385 li
@
67.081 155.128 mo
66.32 155.444 li
@
65.872 156.024 mo
66.319 155.444 li
@
71.395 147.596 mo
70.627 148.129 li
@
70.187 148.92 mo
70.627 148.129 li
@
69.625 151.616 mo
68.857 152.061 li
@
68.416 152.911 mo
68.857 152.061 li
@
69.298 150.965 mo
68.857 152.062 li
@
75.674 149.694 mo
76.115 149.536 li
@
75.348 148.633 mo
76.115 149.536 li
@
76.82 149.494 mo
76.115 149.535 li
@
81.49 152.518 mo
82.258 154.041 li
@
81.811 153.995 mo
82.258 154.042 li
@
73.818 146.874 mo
74.259 146.775 li
@
71.841 146.998 mo
72.282 146.617 li
@
73.049 146.541 mo
72.282 146.617 li
@
70.064 150.485 mo
69.296 150.965 li
@
69.743 149.886 mo
69.296 150.964 li
@
67.968 153.684 mo
68.414 152.91 li
@
69.182 152.536 mo
68.414 152.91 li
@
64.215 157.001 mo
64.662 156.655 li
@
65.43 156.55 mo
64.662 156.655 li
@
82.137 155.618 mo
82.578 155.483 li
@
81.81 153.995 mo
82.577 155.483 li
@
69.744 149.887 mo
70.185 148.92 li
@
70.953 148.41 mo
70.185 148.92 li
@
84.882 156.755 mo
84.114 156.609 li
@
83.673 156.801 mo
84.114 156.609 li
@
70.512 149.388 mo
69.744 149.886 li
@
61.03 157.118 mo
61.471 156.873 li
@
62.238 157.013 mo
61.47 156.872 li
@
64.215 157.001 mo
63.447 156.907 li
@
63.006 157.16 mo
63.447 156.908 li
@
68.736 153.386 mo
67.968 153.686 li
@
67.527 154.407 mo
67.969 153.686 li
@
74.58 147.621 mo
75.348 148.635 li
@
74.906 148.846 mo
75.348 148.635 li
@
65.43 156.552 mo
65.871 156.025 li
@
66.638 155.807 mo
65.87 156.025 li
@
61.029 157.119 mo
60.261 156.979 li
@
59.814 157.224 mo
60.261 156.978 li
@
80.721 151.182 mo
81.162 151.394 li
@
80.395 150.368 mo
81.163 151.394 li
@
67.079 155.127 mo
67.526 154.406 li
@
68.294 154.178 mo
67.526 154.408 li
@
84.44 156.932 mo
84.881 156.756 li
@
82.463 156.897 mo
82.904 156.597 li
@
82.137 155.62 mo
82.905 156.599 li
@
83.672 156.804 mo
82.904 156.599 li
@
73.049 155.503 mo
73.462 154.835 li
@
74.229 153.915 mo
73.461 154.835 li
@
73.903 153.259 mo
73.462 154.835 li
@
72.694 153.693 mo
73.462 154.837 li
@
63.006 157.164 mo
62.238 157.017 li
@
61.797 157.269 mo
62.238 157.016 li
@
72.608 146.908 mo
71.84 147.002 li
@
71.393 147.598 mo
71.84 147 li
@
72.608 146.908 mo
73.049 146.545 li
@
73.817 146.878 mo
73.049 146.545 li
@
74.144 147.899 mo
74.58 147.624 li
@
73.817 146.878 mo
74.579 147.623 li
@
64.982 157.011 mo
64.214 157.005 li
@
63.773 157.292 mo
64.214 157.005 li
@
64.982 157.011 mo
65.429 156.554 li
@
66.197 156.436 mo
65.429 156.554 li
@
74.905 148.848 mo
75.673 149.698 li
@
76.441 149.616 mo
75.673 149.698 li
@
75.227 150.126 mo
75.673 149.698 li
@
67.847 154.955 mo
67.079 155.131 li
@
66.638 155.809 mo
67.079 155.129 li
@
79.627 149.704 mo
78.859 149.405 li
@
78.418 149.258 mo
78.859 149.405 li
@
72.248 154.528 mo
73.004 155.542 li
@
73.784 154.685 mo
73.097 155.464 li
@
61.798 157.271 mo
61.03 157.122 li
@
60.583 157.37 mo
61.03 157.123 li
@
73.377 147.232 mo
73.818 146.88 li
@
84.441 156.936 mo
83.673 156.807 li
@
83.232 157.053 mo
83.673 156.806 li
@
69.183 152.541 mo
69.624 151.621 li
@
70.065 150.49 mo
69.624 151.621 li
@
70.392 151.569 mo
69.624 151.621 li
@
81.043 152.47 mo
81.49 152.523 li
@
80.722 151.186 mo
81.49 152.523 li
@
81.696 155.916 mo
82.137 155.623 li
@
81.369 154.088 mo
82.137 155.623 li
@
79.953 150.192 mo
80.395 150.373 li
@
79.627 149.705 mo
80.395 150.373 li
@
63.773 157.294 mo
63.005 157.166 li
@
62.564 157.411 mo
63.005 157.165 li
@
69.949 152.506 mo
69.181 152.541 li
@
68.735 153.391 mo
69.181 152.541 li
@
70.952 148.416 mo
71.393 147.602 li
@
72.161 147.49 mo
71.393 147.6 li
@
81.042 152.47 mo
81.81 153.999 li
@
81.368 154.087 mo
81.809 153.999 li
@
74.459 149.328 mo
74.905 148.847 li
@
74.143 147.898 mo
74.905 148.847 li
@
79.185 149.555 mo
79.626 149.701 li
@
70.831 150.417 mo
70.063 150.487 li
@
70.51 149.391 mo
70.063 150.488 li
@
67.405 155.708 mo
66.637 155.808 li
@
66.197 156.435 mo
66.637 155.808 li
@
68.293 154.179 mo
68.735 153.388 li
@
69.502 153.376 mo
68.735 153.388 li
@
72.247 154.525 mo
72.694 153.692 li
@
73.135 152.357 mo
72.694 153.692 li
@
71.926 152.59 mo
72.694 153.692 li
@
74.343 151.904 mo
73.902 153.258 li
@
73.135 152.356 mo
73.903 153.257 li
@
74.665 152.683 mo
73.903 153.258 li
@
70.511 149.39 mo
70.952 148.412 li
@
71.72 148.3 mo
70.952 148.411 li
@
71.279 149.278 mo
70.511 149.388 li
@
60.582 157.365 mo
59.814 157.224 li
@
82.016 157.271 mo
82.463 156.896 li
@
81.695 155.912 mo
82.463 156.896 li
@
83.231 157.049 mo
82.463 156.897 li
@
71.48 153.504 mo
72.248 154.524 li
@
71.806 155.146 mo
72.247 154.524 li
@
73.376 147.229 mo
72.608 146.907 li
@
72.162 147.487 mo
72.609 146.907 li
@
65.75 156.986 mo
64.982 157.009 li
@
64.542 157.379 mo
64.983 157.01 li
@
61.351 157.514 mo
61.798 157.269 li
@
62.566 157.41 mo
61.798 157.269 li
@
67.848 154.954 mo
68.295 154.181 li
@
69.062 154.204 mo
68.294 154.181 li
@
74.786 150.857 mo
75.227 150.125 li
@
74.46 149.328 mo
75.228 150.125 li
@
75.995 149.99 mo
75.227 150.125 li
@
78.418 149.257 mo
77.65 149.293 li
@
77.21 149.381 mo
77.651 149.293 li
@
83.999 157.164 mo
84.44 156.935 li
@
75.995 149.99 mo
76.442 149.615 li
@
77.21 149.381 mo
76.442 149.615 li
@
64.542 157.38 mo
63.774 157.293 li
@
63.333 157.55 mo
63.775 157.293 li
@
73.377 147.232 mo
74.145 147.9 li
@
73.698 148.433 mo
74.145 147.9 li
@
66.966 156.404 mo
66.199 156.439 li
@
65.751 156.989 mo
66.199 156.438 li
@
71.807 155.15 mo
72.575 155.887 li
@
72.134 156.321 mo
72.574 155.886 li
@
73.342 155.265 mo
72.574 155.886 li
@
72.368 151.368 mo
73.136 152.359 li
@
73.583 151.116 mo
73.136 152.359 li
@
74.786 150.858 mo
74.345 151.907 li
@
75.107 151.549 mo
74.345 151.906 li
@
73.583 151.115 mo
74.345 151.906 li
@
67.406 155.709 mo
67.847 154.953 li
@
68.615 155.006 mo
67.847 154.953 li
@
72.929 147.786 mo
73.375 147.229 li
@
70.832 150.418 mo
70.391 151.566 li
@
71.159 151.882 mo
70.391 151.567 li
@
69.949 152.504 mo
70.391 151.566 li
@
74.023 150.078 mo
74.459 149.328 li
@
73.697 148.431 mo
74.459 149.327 li
@
74.023 150.078 mo
74.785 150.857 li
@
75.553 150.623 mo
74.785 150.856 li
@
69.503 153.376 mo
69.95 152.504 li
@
70.712 152.843 mo
69.95 152.503 li
@
61.35 157.513 mo
60.582 157.367 li
@
83.999 157.162 mo
83.231 157.05 li
@
82.784 157.366 mo
83.231 157.05 li
@
81.248 156.359 mo
81.695 155.913 li
@
80.927 154.372 mo
81.695 155.913 li
@
71.365 155.755 mo
71.806 155.147 li
@
71.038 154.284 mo
71.806 155.146 li
@
71.159 151.881 mo
71.927 152.59 li
@
71.48 153.505 mo
71.927 152.59 li
@
72.368 151.366 mo
71.927 152.591 li
@
71.72 148.301 mo
72.161 147.487 li
@
72.93 147.785 mo
72.162 147.486 li
@
80.275 151.166 mo
80.722 151.184 li
@
79.954 150.188 mo
80.722 151.183 li
@
70.272 153.673 mo
69.504 153.374 li
@
69.062 154.201 mo
69.503 153.374 li
@
71.28 149.278 mo
70.833 150.416 li
@
71.6 150.714 mo
70.833 150.416 li
@
62.118 157.652 mo
62.565 157.406 li
@
63.332 157.546 mo
62.565 157.406 li
@
71.039 154.282 mo
71.48 153.503 li
@
70.712 152.841 mo
71.48 153.503 li
@
72.815 150.203 mo
73.583 151.112 li
@
74.023 150.075 mo
73.582 151.112 li
@
66.964 156.398 mo
67.405 155.706 li
@
68.173 155.777 mo
67.405 155.706 li
@
73.255 149.214 mo
74.023 150.075 li
@
71.599 150.714 mo
71.159 151.88 li
@
70.711 152.841 mo
71.158 151.88 li
@
70.27 153.673 mo
70.711 152.841 li
@
81.248 156.358 mo
82.016 157.272 li
@
81.575 157.634 mo
82.016 157.272 li
@
82.785 157.364 mo
82.017 157.27 li
@
71.28 149.277 mo
71.721 148.299 li
@
72.489 148.58 mo
71.721 148.299 li
@
68.616 155.003 mo
69.062 154.2 li
@
69.83 154.494 mo
69.062 154.201 li
@
72.048 149.565 mo
71.28 149.278 li
@
72.93 147.784 mo
73.698 148.429 li
@
73.256 149.214 mo
73.698 148.429 li
@
66.519 157.002 mo
65.751 156.985 li
@
65.31 157.429 mo
65.751 156.985 li
@
71.601 150.714 mo
72.369 151.364 li
@
72.816 150.204 mo
72.369 151.365 li
@
65.31 157.43 mo
64.542 157.377 li
@
64.101 157.67 mo
64.542 157.377 li
@
80.928 154.371 mo
81.369 154.084 li
@
80.602 152.583 mo
81.37 154.084 li
@
77.978 149.325 mo
78.419 149.254 li
@
79.187 149.553 mo
78.419 149.254 li
@
70.598 155.038 mo
71.039 154.282 li
@
70.272 153.672 mo
71.04 154.282 li
@
72.489 148.58 mo
72.929 147.783 li
@
80.275 151.164 mo
81.043 152.465 li
@
80.602 152.582 mo
81.043 152.465 li
@
69.831 154.493 mo
70.272 153.672 li
@
72.049 149.564 mo
71.601 150.712 li
@
70.92 156.374 mo
71.368 155.753 li
@
70.599 155.038 mo
71.367 155.753 li
@
72.135 156.315 mo
71.367 155.752 li
@
72.902 155.87 mo
72.135 156.315 li
@
71.687 156.825 mo
72.135 156.316 li
@
76.7641 149.7 mo
75.996 149.987 li
@
75.5551 150.621 mo
75.996 149.987 li
@
62.1191 157.653 mo
61.3511 157.511 li
@
73.784 154.681 mo
74.23 153.913 li
@
74.6661 152.682 mo
74.23 153.912 li
@
74.9921 153.035 mo
74.23 153.914 li
@
68.174 155.778 mo
68.615 155.004 li
@
69.383 155.285 mo
68.615 155.004 li
@
67.733 156.498 mo
66.965 156.399 li
@
66.5181 157.002 mo
66.965 156.399 li
@
72.0471 149.566 mo
72.815 150.205 li
@
73.2551 149.214 mo
72.814 150.204 li
@
72.4881 148.581 mo
73.2551 149.214 li
@
83.5511 157.418 mo
83.9991 157.161 li
@
79.5071 150.188 mo
79.9531 150.188 li
@
79.1861 149.554 mo
79.9531 150.188 li
@
69.3831 155.285 mo
69.8301 154.494 li
@
70.5971 155.039 mo
69.829 154.495 li
@
72.0471 149.565 mo
72.488 148.581 li
@
64.1001 157.668 mo
63.3321 157.545 li
@
62.8851 157.792 mo
63.3321 157.545 li
@
70.1501 155.764 mo
70.5971 155.037 li
@
80.8071 156.908 mo
81.248 156.357 li
@
80.4811 154.816 mo
81.2491 156.358 li
@
78.7391 149.593 mo
79.1861 149.552 li
@
77.9771 149.323 mo
77.2091 149.376 li
@
76.7621 149.698 mo
77.2091 149.376 li
@
74.5451 153.812 mo
73.7831 154.678 li
@
73.3411 155.258 mo
73.7831 154.678 li
@
67.7331 156.494 mo
68.174 155.774 li
@
68.9421 156.037 mo
68.174 155.774 li
@
75.1071 151.542 mo
74.6661 152.679 li
@
75.4341 152.01 mo
74.6661 152.678 li
@
83.5521 157.413 mo
82.7851 157.36 li
@
82.3441 157.689 mo
82.7851 157.36 li
@
70.1511 155.76 mo
69.3831 155.281 li
@
68.9421 156.035 mo
69.3831 155.279 li
@
75.1071 151.54 mo
75.5541 150.615 li
@
76.3221 150.245 mo
75.5541 150.615 li
@
70.4781 156.973 mo
70.9181 156.368 li
@
70.1511 155.759 mo
70.9191 156.368 li
@
71.6861 156.819 mo
70.9181 156.368 li
@
69.7101 156.462 mo
70.1511 155.759 li
@
64.8681 157.77 mo
65.3091 157.423 li
@
66.0771 157.495 mo
65.3091 157.425 li
@
66.0771 157.495 mo
66.5181 156.998 li
@
67.2861 157.12 mo
66.5181 156.998 li
@
75.8741 151.043 mo
75.106 151.541 li
@
80.8071 156.903 mo
81.5751 157.629 li
@
81.1341 157.886 mo
81.5751 157.628 li
@
82.3431 157.688 mo
81.5751 157.628 li
@
62.8851 157.788 mo
62.1171 157.647 li
@
72.4531 156.498 mo
71.6851 156.82 li
@
71.2441 157.342 mo
71.6851 156.82 li
@
67.2861 157.119 mo
67.7331 156.492 li
@
68.5001 156.75 mo
67.732 156.492 li
@
69.7091 156.462 mo
68.941 156.035 li
@
68.5001 156.75 mo
68.941 156.035 li
@
64.8671 157.77 mo
64.099 157.665 li
@
63.653 157.928 mo
64.1 157.664 li
@
80.159 152.87 mo
80.927 154.365 li
@
80.48 154.811 mo
80.926 154.366 li
@
80.3651 157.376 mo
80.806 156.902 li
@
80.038 155.378 mo
80.806 156.902 li
@
74.108 154.504 mo
73.34 155.255 li
@
72.899 155.864 mo
73.34 155.255 li
@
70.4761 156.97 mo
69.708 156.46 li
@
69.2671 157.111 mo
69.708 156.461 li
@
79.5061 150.178 mo
80.274 151.158 li
@
79.8331 151.303 mo
80.274 151.158 li
@
71.2441 157.339 mo
70.4771 156.97 li
@
70.0351 157.522 mo
70.4771 156.97 li
@
83.1101 157.704 mo
83.551 157.411 li
@
69.2681 157.112 mo
68.5 156.75 li
@
68.0531 157.346 mo
68.5001 156.749 li
@
78.7391 149.587 mo
77.9771 149.317 li
@
77.5291 149.606 mo
77.9761 149.319 li
@
80.159 152.87 mo
80.6 152.577 li
@
79.8331 151.306 mo
80.6011 152.578 li
@
68.0531 157.349 mo
67.286 157.119 li
@
66.8451 157.629 mo
67.286 157.119 li
@
76.3221 150.246 mo
76.763 149.695 li
@
77.5301 149.607 mo
76.762 149.695 li
@
63.6541 157.928 mo
62.8861 157.787 li
@
66.8451 157.629 mo
66.077 157.494 li
@
65.6361 157.881 mo
66.077 157.494 li
@
83.1111 157.705 mo
82.344 157.688 li
@
81.9021 157.986 mo
82.344 157.688 li
@
72.0131 157.131 mo
71.245 157.342 li
@
70.8041 157.799 mo
71.245 157.342 li
@
68.8221 157.659 mo
69.2681 157.113 li
@
70.036 157.523 mo
69.268 157.112 li
@
73.6691 155.219 mo
72.901 155.865 li
@
72.4541 156.496 mo
72.9011 155.863 li
@
64.4221 158.055 mo
64.8681 157.768 li
@
65.6361 157.878 mo
64.868 157.768 li
@
78.7391 149.586 mo
79.507 150.178 li
@
79.0661 150.39 mo
79.507 150.178 li
@
79.5991 155.909 mo
80.3671 157.374 li
@
79.9211 157.497 mo
80.3671 157.373 li
@
81.135 157.883 mo
80.367 157.373 li
@
78.299 149.815 mo
78.74 149.586 li
@
80.041 155.376 mo
80.482 154.809 li
@
79.714 153.343 mo
80.482 154.809 li
@
80.689 158.118 mo
81.135 157.884 li
@
81.903 157.983 mo
81.135 157.882 li
@
69.591 157.96 mo
70.037 157.521 li
@
70.805 157.796 mo
70.037 157.522 li
@
68.823 157.656 mo
68.053 157.344 li
@
67.614 157.831 mo
68.055 157.345 li
@
75.876 151.039 mo
76.323 150.242 li
@
77.091 150.101 mo
76.323 150.242 li
@
64.423 158.052 mo
63.655 157.924 li
@
66.405 158.018 mo
66.845 157.624 li
@
67.614 157.83 mo
66.845 157.625 li
@
72.014 157.127 mo
72.455 156.494 li
@
73.223 155.944 mo
72.455 156.495 li
@
68.382 158.071 mo
68.823 157.656 li
@
69.591 157.96 mo
68.823 157.656 li
@
71.574 157.714 mo
70.806 157.796 li
@
70.359 158.159 mo
70.806 157.796 li
@
74.548 153.806 mo
74.994 153.026 li
@
75.762 152.558 mo
74.994 153.026 li
@
75.436 152.005 mo
74.994 153.025 li
@
75.436 152.005 mo
75.876 151.039 li
@
76.644 150.787 mo
75.876 151.038 li
@
82.672 157.977 mo
83.113 157.701 li
@
65.192 158.182 mo
65.639 157.876 li
@
66.407 158.018 mo
65.639 157.876 li
@
76.204 151.648 mo
75.437 152.004 li
@
79.395 151.648 mo
80.163 152.866 li
@
77.092 150.101 mo
77.533 149.602 li
@
79.716 153.341 mo
80.163 152.865 li
@
78.3 149.814 mo
77.532 149.603 li
@
79.068 150.388 mo
79.836 151.301 li
@
79.395 151.648 mo
79.836 151.301 li
@
79.601 155.908 mo
80.042 155.375 li
@
79.274 153.928 mo
80.042 155.375 li
@
82.672 157.978 mo
81.904 157.983 li
@
81.457 158.17 mo
81.904 157.982 li
@
74.112 154.501 mo
74.548 153.806 li
@
75.316 153.318 mo
74.548 153.804 li
@
68.383 158.07 mo
67.615 157.83 li
@
67.174 158.194 mo
67.615 157.83 li
@
72.783 156.687 mo
72.015 157.126 li
@
71.574 157.711 mo
72.015 157.125 li
@
69.15 158.273 mo
69.592 157.957 li
@
70.359 158.156 mo
69.591 157.957 li
@
65.191 158.179 mo
64.423 158.049 li
@
78.627 150.772 mo
79.068 150.385 li
@
78.3 149.812 mo
79.068 150.385 li
@
77.859 150.256 mo
78.3 149.812 li
@
81.457 158.167 mo
80.69 158.114 li
@
79.922 157.494 mo
80.69 158.115 li
@
80.248 158.267 mo
80.69 158.114 li
@
67.174 158.191 mo
66.406 158.014 li
@
65.959 158.319 mo
66.406 158.014 li
@
74.874 154 mo
74.112 154.497 li
@
73.671 155.213 mo
74.112 154.497 li
@
79.48 157.581 mo
79.922 157.493 li
@
79.154 156.182 mo
79.923 157.494 li
@
79.154 156.182 mo
79.601 155.906 li
@
78.833 154.523 mo
79.601 155.906 li
@
76.644 150.785 mo
77.092 150.099 li
@
77.859 150.257 mo
77.092 150.1 li
@
79.274 153.926 mo
79.715 153.34 li
@
78.948 152.168 mo
79.716 153.34 li
@
67.942 158.379 mo
68.383 158.069 li
@
69.151 158.274 mo
68.384 158.069 li
@
71.128 158.199 mo
70.36 158.157 li
@
69.919 158.427 mo
70.36 158.157 li
@
71.128 158.199 mo
71.575 157.712 li
@
72.343 157.407 mo
71.575 157.712 li
@
78.628 150.773 mo
79.396 151.646 li
@
78.949 152.168 mo
79.396 151.646 li
@
65.96 158.321 mo
65.192 158.18 li
@
82.226 158.145 mo
82.673 157.975 li
@
74.434 154.746 mo
73.672 155.215 li
@
73.225 155.941 mo
73.672 155.213 li
@
77.413 150.89 mo
76.645 150.785 li
@
76.204 151.646 mo
76.645 150.785 li
@
66.727 158.479 mo
67.174 158.193 li
@
67.942 158.378 mo
67.174 158.191 li
@
69.919 158.425 mo
69.151 158.273 li
@
68.71 158.53 mo
69.151 158.272 li
@
77.413 150.889 mo
77.86 150.255 li
@
78.628 150.771 mo
77.86 150.254 li
@
82.226 158.144 mo
81.458 158.167 li
@
81.016 158.303 mo
81.457 158.166 li
@
78.833 154.523 mo
79.274 153.924 li
@
78.506 152.788 mo
79.274 153.925 li
@
76.971 151.657 mo
76.203 151.646 li
@
75.761 152.555 mo
76.202 151.646 li
@
78.179 151.329 mo
78.626 150.772 li
@
72.782 156.685 mo
73.223 155.941 li
@
73.991 155.513 mo
73.223 155.941 li
@
75.315 153.316 mo
75.761 152.554 li
@
76.529 152.484 mo
75.761 152.554 li
@
66.726 158.478 mo
65.958 158.32 li
@
70.685 158.548 mo
71.126 158.197 li
@
71.894 158.044 mo
71.126 158.197 li
@
78.506 152.787 mo
78.947 152.166 li
@
78.18 151.328 mo
78.948 152.166 li
@
68.709 158.53 mo
67.941 158.378 li
@
67.494 158.63 mo
67.941 158.378 li
@
78.386 154.945 mo
79.154 156.182 li
@
78.713 156.44 mo
79.154 156.183 li
@
72.342 157.407 mo
72.783 156.686 li
@
73.551 156.3 mo
72.783 156.688 li
@
74.874 154.003 mo
75.315 153.318 li
@
76.083 153.159 mo
75.315 153.318 li
@
81.016 158.306 mo
80.248 158.27 li
@
79.808 158.405 mo
80.249 158.27 li
@
79.481 157.585 mo
80.249 158.271 li
@
78.181 151.332 mo
77.413 150.894 li
@
76.971 151.66 mo
77.412 150.893 li
@
69.477 158.675 mo
69.918 158.43 li
@
70.686 158.554 mo
69.918 158.431 li
@
78.386 154.949 mo
78.833 154.528 li
@
78.066 153.479 mo
78.833 154.528 li
@
78.713 156.444 mo
79.48 157.586 li
@
79.04 157.762 mo
79.48 157.586 li
@
77.739 152.031 mo
78.18 151.334 li
@
77.739 152.031 mo
76.971 151.661 li
@
76.53 152.488 mo
76.971 151.661 li
@
73.11 157.092 mo
72.342 157.408 li
@
71.895 158.048 mo
72.342 157.409 li
@
78.066 153.478 mo
78.506 152.791 li
@
77.739 152.03 mo
78.507 152.792 li
@
81.784 158.288 mo
82.225 158.148 li
@
67.494 158.634 mo
66.726 158.483 li
@
75.642 153.841 mo
74.874 154.005 li
@
74.433 154.749 mo
74.874 154.005 li
@
69.477 158.675 mo
68.709 158.534 li
@
68.262 158.781 mo
68.709 158.534 li
@
77.298 152.792 mo
76.53 152.488 li
@
76.083 153.161 mo
76.53 152.488 li
@
77.298 152.792 mo
77.739 152.03 li
@
71.454 158.56 mo
70.686 158.553 li
@
70.244 158.817 mo
70.686 158.553 li
@
75.2 154.546 mo
74.433 154.75 li
@
73.993 155.519 mo
74.434 154.75 li
@
80.576 158.459 mo
81.017 158.309 li
@
81.785 158.289 mo
81.017 158.309 li
@
77.299 152.792 mo
78.067 153.478 li
@
77.619 154 mo
78.067 153.48 li
@
71.455 158.56 mo
71.895 158.049 li
@
72.663 157.828 mo
71.895 158.051 li
@
77.619 154.001 mo
78.387 154.95 li
@
77.946 155.35 mo
78.386 154.951 li
@
76.851 153.411 mo
77.298 152.795 li
@
68.263 158.785 mo
67.495 158.638 li
@
78.273 156.752 mo
78.714 156.447 li
@
77.946 155.352 mo
78.714 156.448 li
@
75.643 153.845 mo
76.084 153.165 li
@
76.851 153.411 mo
76.083 153.164 li
@
74.754 155.309 mo
73.992 155.52 li
@
73.551 156.304 mo
73.992 155.52 li
@
70.244 158.819 mo
69.477 158.677 li
@
69.03 158.924 mo
69.477 158.677 li
@
80.574 158.46 mo
79.806 158.408 li
@
79.359 158.613 mo
79.806 158.408 li
@
79.039 157.763 mo
79.807 158.408 li
@
78.592 158.033 mo
79.039 157.763 li
@
78.272 156.75 mo
79.04 157.764 li
@
73.11 157.095 mo
73.551 156.304 li
@
74.318 156.105 mo
73.551 156.304 li
@
76.851 153.41 mo
77.619 154.002 li
@
77.178 154.517 mo
77.619 154 li
@
75.201 154.546 mo
75.643 153.842 li
@
76.411 154.019 mo
75.644 153.843 li
@
76.411 154.019 mo
76.852 153.41 li
@
72.222 158.455 mo
71.455 158.561 li
@
71.014 158.925 mo
71.455 158.562 li
@
69.032 158.925 mo
68.264 158.784 li
@
81.345 158.445 mo
81.786 158.292 li
@
73.879 156.904 mo
73.112 157.096 li
@
72.664 157.83 mo
73.112 157.097 li
@
77.506 155.802 mo
77.947 155.352 li
@
77.179 154.52 mo
77.947 155.352 li
@
69.799 159.073 mo
70.246 158.821 li
@
71.014 158.927 mo
70.245 158.822 li
@
75.97 154.66 mo
75.202 154.549 li
@
74.755 155.31 mo
75.202 154.548 li
@
81.344 158.445 mo
80.576 158.462 li
@
80.129 158.673 mo
80.576 158.462 li
@
77.826 157.167 mo
78.273 156.752 li
@
77.505 155.802 mo
78.273 156.752 li
@
72.222 158.456 mo
72.663 157.83 li
@
73.432 157.683 mo
72.664 157.83 li
@
77.179 154.519 mo
76.411 154.02 li
@
75.97 154.66 mo
76.411 154.021 li
@
76.738 155.088 mo
77.179 154.521 li
@
75.524 155.369 mo
74.756 155.31 li
@
74.32 156.107 mo
74.756 155.311 li
@
69.8 159.072 mo
69.033 158.926 li
@
78.922 158.908 mo
79.363 158.615 li
@
78.595 158.035 mo
79.363 158.615 li
@
80.131 158.673 mo
79.363 158.615 li
@
77.828 157.167 mo
78.596 158.035 li
@
78.155 158.421 mo
78.596 158.035 li
@
70.569 159.206 mo
71.016 158.926 li
@
71.784 158.942 mo
71.016 158.924 li
@
75.084 156.134 mo
74.321 156.105 li
@
73.88 156.903 mo
74.321 156.105 li
@
71.783 158.942 mo
72.224 158.456 li
@
72.992 158.374 mo
72.224 158.456 li
@
77.06 156.34 mo
77.507 155.801 li
@
76.739 155.086 mo
77.507 155.801 li
@
75.525 155.367 mo
75.972 154.658 li
@
76.739 155.086 mo
75.971 154.658 li
@
73.433 157.682 mo
73.88 156.904 li
@
76.292 155.724 mo
76.738 155.085 li
@
74.642 156.926 mo
73.88 156.904 li
@
77.06 156.34 mo
77.828 157.166 li
@
77.387 157.67 mo
77.828 157.166 li
@
80.899 158.661 mo
81.346 158.444 li
@
70.568 159.205 mo
69.8 159.07 li
@
75.083 156.135 mo
75.524 155.367 li
@
76.292 155.725 mo
75.524 155.369 li
@
72.992 158.374 mo
73.433 157.683 li
@
74.201 157.694 mo
73.433 157.682 li
@
80.899 158.662 mo
80.131 158.673 li
@
79.69 158.961 mo
80.131 158.673 li
@
76.293 155.727 mo
77.061 156.341 li
@
76.619 156.957 mo
77.06 156.342 li
@
77.707 158.85 mo
78.154 158.421 li
@
78.922 158.909 mo
78.154 158.422 li
@
77.387 157.672 mo
78.155 158.422 li
@
75.851 156.424 mo
76.292 155.727 li
@
72.551 158.932 mo
71.783 158.945 li
@
71.337 159.295 mo
71.784 158.943 li
@
75.852 156.424 mo
75.084 156.137 li
@
74.643 156.928 mo
75.084 156.137 li
@
78.475 159.243 mo
78.922 158.909 li
@
79.69 158.962 mo
78.922 158.909 li
@
72.551 158.932 mo
72.992 158.376 li
@
73.76 158.406 mo
72.992 158.377 li
@
71.337 159.297 mo
70.569 159.209 li
@
76.619 156.959 mo
77.387 157.674 li
@
76.945 158.243 mo
77.387 157.674 li
@
74.201 157.697 mo
74.642 156.929 li
@
75.409 157.165 mo
74.641 156.93 li
@
76.618 156.959 mo
75.85 156.426 li
@
75.409 157.165 mo
75.85 156.426 li
@
76.177 157.628 mo
76.618 156.959 li
@
74.962 157.909 mo
74.2 157.697 li
@
73.759 158.406 mo
74.2 157.697 li
@
80.457 158.945 mo
80.898 158.665 li
@
76.177 157.628 mo
75.409 157.165 li
@
74.962 157.909 mo
75.409 157.165 li
@
76.944 158.243 mo
77.706 158.851 li
@
78.474 159.245 mo
77.707 158.851 li
@
77.266 159.297 mo
77.707 158.853 li
@
73.319 158.993 mo
72.551 158.933 li
@
72.104 159.35 mo
72.551 158.933 li
@
76.178 157.627 mo
76.945 158.242 li
@
76.499 158.804 mo
76.945 158.242 li
@
79.244 159.302 mo
79.691 158.963 li
@
80.458 158.945 mo
79.69 158.963 li
@
72.104 159.349 mo
71.336 159.295 li
@
75.732 158.293 mo
76.178 157.626 li
@
73.319 158.991 mo
73.76 158.405 li
@
74.522 158.58 mo
73.76 158.404 li
@
79.244 159.301 mo
78.475 159.243 li
@
78.034 159.577 mo
78.475 159.243 li
@
75.731 158.293 mo
74.962 157.907 li
@
74.521 158.58 mo
74.962 157.907 li
@
76.498 158.803 mo
75.731 158.293 li
@
75.289 158.915 mo
75.731 158.293 li
@
77.266 159.295 mo
76.498 158.803 li
@
76.057 159.325 mo
76.498 158.803 li
@
74.081 159.155 mo
74.521 158.58 li
@
75.289 158.915 mo
74.521 158.58 li
@
74.081 159.155 mo
73.319 158.991 li
@
72.871 159.429 mo
73.319 158.991 li
@
76.825 159.669 mo
77.266 159.294 li
@
78.035 159.576 mo
77.267 159.294 li
@
72.872 159.428 mo
72.105 159.346 li
@
80.012 159.283 mo
80.458 158.942 li
@
80.012 159.283 mo
79.244 159.3 li
@
78.802 159.652 mo
79.243 159.299 li
@
76.057 159.324 mo
75.289 158.914 li
@
74.842 159.428 mo
75.289 158.913 li
@
77.592 159.856 mo
78.033 159.576 li
@
78.801 159.651 mo
78.033 159.575 li
@
75.61 159.733 mo
76.057 159.323 li
@
76.824 159.669 mo
76.056 159.324 li
@
74.842 159.429 mo
74.081 159.155 li
@
73.639 159.588 mo
74.081 159.154 li
@
73.639 159.588 mo
72.871 159.429 li
@
76.378 159.957 mo
76.824 159.669 li
@
77.592 159.856 mo
76.824 159.668 li
@
74.401 159.809 mo
74.842 159.428 li
@
75.61 159.733 mo
74.842 159.427 li
@
79.569 159.657 mo
80.011 159.282 li
@
78.361 159.972 mo
78.802 159.651 li
@
79.569 159.657 mo
78.801 159.651 li
@
74.401 159.809 mo
73.639 159.586 li
@
75.169 160.039 mo
75.61 159.734 li
@
76.378 159.957 mo
75.61 159.734 li
@
78.36 159.974 mo
77.592 159.858 li
@
77.145 160.105 mo
77.592 159.858 li
@
75.169 160.041 mo
74.401 159.812 li
@
75.937 160.21 mo
76.378 159.958 li
@
77.146 160.105 mo
76.379 159.959 li
@
79.129 160.028 mo
79.57 159.659 li
@
79.129 160.028 mo
78.361 159.974 li
@
77.914 160.245 mo
78.361 159.974 li
@
75.937 160.21 mo
75.169 160.041 li
@
76.705 160.351 mo
77.146 160.106 li
@
77.914 160.246 mo
77.146 160.106 li
@
78.682 160.346 mo
79.129 160.03 li
@
76.705 160.352 mo
75.937 160.211 li
@
78.682 160.346 mo
77.914 160.246 li
@
77.473 160.493 mo
77.914 160.247 li
@
77.473 160.493 mo
76.705 160.352 li
@
78.241 160.622 mo
78.682 160.347 li
@
78.241 160.622 mo
77.473 160.493 li
@
78.241 164.577 mo
88.881 158.665 li
@
78.241 164.577 mo
59.821 161.166 li
65.184 158.183 li
@
88.881 158.665 mo
83.249 157.622 li
@
59.821 157.223 mo
59.821 161.166 li
@
59.821 149.347 mo
59.821 157.223 li
@
26.441 135.581 mo
97.774 135.581 li
97.774 110.248 li
26.441 110.248 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
1 lw
97.774 135.581 mo
26.441 135.581 li
26.441 110.248 li
97.774 110.248 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.21569 .21176 .22353 colr
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
true set_gvm
%ADOBeginSubsetFont: PBAAAA+Myriad-Roman AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
PRZTWJ+Myriad-Roman dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7BA8F6239473D6D0952B7B5E4CF4F1C971CBE1C94E9016
054EC0552B11B0B5EF94504E409022941DEA89445DB67DB2F07F4634927C31FC
504AC564FF4DFB941DDF51D9955C409737147D922D6535E0476146E49A1150A> |-
/one <1C60D8A8C9B7BA8F425ECEA255C7F445C46B341EF282C71048D555A5D5
98E89496E7235E7E5E61E755DE1DD927709B69AF39C5FFA2F961FADB> |-
/E <1C60D8A8C9B7AFA9BC4F00998616708AD319D689B216B721CBB286284877
352BA785E1B053DF2EC2B77B2A321D6047CBD4FD467F6DD70A1B400CD3EB> |-
systemdict /gcheck known {setglobal} if end {end} if
end
PRZTWJ+Myriad-Roman /Encoding get
dup 48 /zero put
dup 49 /one put
dup 69 /E put
pop
%ADOEndSubsetFont
reset_gvm
/PRZTWJ+Myriad-Roman*1 
[48{/.notdef}rp /zero /one 19{/.notdef}rp /E 7{/.notdef}rp /M 19{/.notdef}rp 
/a 5{/.notdef}rp /g /.notdef /i 4{/.notdef}rp /n /o 
2{/.notdef}rp /r /.notdef /t 139{/.notdef}rp]
PRZTWJ+Myriad-Roman nf
PRZTWJ+Myriad-Roman*1 [12 0 0 -12 0 0 ]msf
54.7695 124.913 mo
(E)sh
PRZTWJ+Myriad-Roman*1 [8 0 0 -8 0 0 ]msf
63.4453 127.585 mo
(1)sh
PRZTWJ+Myriad-Roman*1 [12 0 0 -12 0 0 ]msf
39.7695 158.58 mo
(E)sh
PRZTWJ+Myriad-Roman*1 [8 0 0 -8 0 0 ]msf
48.4453 161.251 mo
(0)sh
26.774 104.581 mo
98.107 104.581 li
98.107 79.248 li
26.774 79.248 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
98.107 104.581 mo
26.774 104.581 li
26.774 79.248 li
98.107 79.248 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.21569 .21176 .22353 colr
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
true set_gvm
%ADOBeginSubsetFont: PBAAAA+Myriad-Roman AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
PRZTWJ+Myriad-Roman dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7BA8F694E6FA15FFB6B382A3EE4F45111A59DACAF941116
582617B9738BB5AF1D396C826652BF6DBB79EF1DD0AC1F7B54C0F37BCAD75B93
5293F3F71168A81E7D38CDD63CCC9A6CCC00BE68E00357641B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
PRZTWJ+Myriad-Roman /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
reset_gvm
/PRZTWJ+Myriad-Roman*1 
[48{/.notdef}rp /zero /one /two 18{/.notdef}rp /E 7{/.notdef}rp /M 
19{/.notdef}rp /a 5{/.notdef}rp /g /.notdef /i 4{/.notdef}rp /n 
/o 2{/.notdef}rp /r /.notdef /t 139{/.notdef}rp]
PRZTWJ+Myriad-Roman nf
PRZTWJ+Myriad-Roman*1 [12 0 0 -12 0 0 ]msf
55.1074 93.913 mo
(E)sh
PRZTWJ+Myriad-Roman*1 [8 0 0 -8 0 0 ]msf
63.7793 96.577 mo
(2)sh
26.368 67.278 mo
97.702 67.278 li
97.702 41.946 li
26.368 41.946 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
97.702 67.278 mo
26.368 67.278 li
26.368 41.946 li
97.702 41.946 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.21569 .21176 .22353 colr
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
true set_gvm
%ADOBeginSubsetFont: PBAAAA+Myriad-Roman AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
PRZTWJ+Myriad-Roman dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/O <1C60D8A8C9B624F9257693AA048B36DAD1746A21003321A85C5F6E80CF60
CB723A5CC5A54CF184D3FEE11F6EF76B25CBA2401CF46405EBA469AF87B00D57
51B379836707222B05CF252001B70774E3269C710D3AAEA9F64EAD29E5FC90C0
1037E0F499A4> |-
/e <1C60D8A8C9B7A66F84858C3680112C82D73E1C597325682C9ED530BCC0B6
51B28ABA219143BA4989A6F804DAAF308E4096EA3C5EE4CE5A25A89A84AEDFB4
7D9498707E4187C5FE017863CAF507AFEA82E084A8EFA129F39779B15FDFF321
33732565D375FCDD8EE0A32F5A98049423277E1BD8> |-
/l <1C60D8A8C9B88055FF27B3923C5344CB60EC167D30E66A163A5CE58557> |-
/p <1C60D8A8C9B7E2CE2B5D9AEC775B38F2FC9D79EBC0747E8537AA64BFDE9D
EE82BB7646F7CEC27EF91C06D4678185F05CE12ADDAD16B81BA95B5DFD51FB92
0FE64B3BF8B211A23E486437984337D80F8A92C1A4FEF7A73E7D72D61B19CABF
B469A3C452694B121B79570B42AFC2C91D3BE4E44C8314CD4F5854A5F1DDFE4F
4053B1138E72DDA0105AAD7207B1A0DCBB21F351A8E5ECCCDE451D167E681188
C2514F73DC89> |-
/s <1C60D8A8C9B70FAD6F31E6985044CC86CE58E7103CFADE13C7DC457B6B61
B27C387A81A626F4966C688D0C50600476E9AB18467FFAC6ED3909C5C2017A12
2463840FBE6795A1A2CAC9FEB45127B788B0426CC0AA67A9509F68032EDFEB1A
EA4184EB9837640B2C28468625> |-
/u <1C60D8A8C9B794D34CED683BC0F75FB25BE8ECA5D4F8D235649E81E6A62D
D7B90AF6DE09B4373C71DC870DE9EFA0B94E7506F75EEE558DF81CD33372DAD0
B84FB6B3C173C4DB8D5EA8C4F6D8C721F2FFE6909411B724C264F09293D8D8F8
9019F8CCCB6FE03380D1> |-
/v <1C60D8A8C9B75A17982D11DC3FC677436DFDC6EA949B3A8A476902498B78
CD729866CE567C88B5C4105F11006EA75E6774682E91A2E1F257423C8BD0B940
F1B9F1BCB8B413DFC78AF75D4027> |-
systemdict /gcheck known {setglobal} if end {end} if
end
PRZTWJ+Myriad-Roman /Encoding get
dup 79 /O put
dup 101 /e put
dup 108 /l put
dup 112 /p put
dup 115 /s put
dup 117 /u put
dup 118 /v put
pop
%ADOEndSubsetFont
reset_gvm
/PRZTWJ+Myriad-Roman*1 
[48{/.notdef}rp /zero /one /two 18{/.notdef}rp /E 7{/.notdef}rp /M 
/.notdef /O 17{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g 
/.notdef /i 2{/.notdef}rp /l /.notdef /n /o /p 
/.notdef /r /s /t /u /v 137{/.notdef}rp]
PRZTWJ+Myriad-Roman nf
PRZTWJ+Myriad-Roman*1 [10 0 0 -10 0 0 ]msf
41.2637 51.7665 mo
(Evolution)
[4.90904 4.79903 5.47896 2.32893 5.49895 3.29893 2.32894 5.47896 0 ]xsh
41.2637 63.7645 mo
(Operators)
[6.87895 5.679 4.99907 3.25896 4.80894 3.29893 5.47896 3.25896 0 ]xsh
113.5 53.455 mo
113.5 155.121 li
0 gry
@
96.929 53.455 mo
113.5 53.455 li
@
97.518 154.473 mo
114.089 154.473 li
@
108.218 95.041 mo
113.368 99.299 li
118.519 95.041 li
113.368 106.106 li
108.218 95.041 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.92157 .17255 .19608 colr
f
108.218 95.041 mo
113.368 99.299 li
118.519 95.041 li
113.368 106.106 li
108.218 95.041 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
f
152.124 176.432 mo
263.381 176.432 li
263.381 32.915 li
152.124 32.915 li
cp
1 gry
f
[12 12 ] 0 dsh
263.381 32.916 mo
152.124 32.916 li
152.124 176.433 li
263.381 176.433 li
263.381 32.916 li
cp
0 gry
@
162.441 165.581 mo
233.775 165.581 li
233.775 140.248 li
162.441 140.248 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
[] 0 dsh
233.774 165.581 mo
162.44 165.581 li
162.44 140.248 li
233.774 140.248 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.21569 .21176 .22353 colr
@
.3 lw
203.807 151.723 mo
203.876 151.695 li
0 gry
@
203.36 151.876 mo
203.807 151.723 li
@
203.853 151.735 mo
203.807 151.722 li
@
202.919 152.01 mo
203.36 151.875 li
@
203.744 151.916 mo
203.36 151.875 li
@
202.477 152.163 mo
202.918 152.011 li
@
203.652 152.039 mo
202.919 152.01 li
@
203.245 152.18 mo
203.646 152.051 li
@
202.03 152.363 mo
202.477 152.164 li
@
203.245 152.18 mo
202.477 152.162 li
@
213.369 147.785 mo
213.805 148.288 li
@
202.798 152.42 mo
203.245 152.18 li
@
203.617 152.091 mo
203.245 152.179 li
@
212.922 147.409 mo
213.369 147.785 li
@
202.798 152.42 mo
202.03 152.361 li
@
201.59 152.636 mo
202.031 152.362 li
@
202.357 152.759 mo
202.798 152.419 li
@
203.452 152.32 mo
202.799 152.42 li
@
202.357 152.759 mo
201.59 152.636 li
@
201.149 152.958 mo
201.59 152.636 li
@
221.815 153.057 mo
221.047 152.532 li
@
220.28 151.782 mo
221.048 152.532 li
@
220.6 152.591 mo
221.047 152.532 li
@
222.582 153.3 mo
221.813 153.059 li
@
221.368 153.253 mo
221.814 153.059 li
@
212.922 147.41 mo
213.656 148.295 li
@
213.248 148.072 mo
213.632 148.301 li
@
219.511 151.05 mo
220.28 151.783 li
@
219.832 151.723 mo
220.278 151.784 li
@
218.296 150.324 mo
218.743 150.506 li
@
219.511 151.051 mo
218.743 150.506 li
@
219.065 150.91 mo
219.511 151.051 li
@
223.35 153.448 mo
222.582 153.301 li
@
222.135 153.548 mo
222.582 153.302 li
@
203.125 152.786 mo
202.357 152.763 li
@
201.916 153.173 mo
202.357 152.763 li
@
212.481 147.095 mo
212.922 147.412 li
@
213.248 148.074 mo
213.403 148.349 li
@
200.701 153.313 mo
201.149 152.96 li
@
201.916 153.172 mo
201.149 152.961 li
@
222.903 153.693 mo
223.349 153.447 li
@
224.117 153.588 mo
223.349 153.447 li
@
220.599 152.592 mo
221.368 153.254 li
@
222.134 153.547 mo
221.367 153.254 li
@
220.925 153.447 mo
221.367 153.254 li
@
203.8 151.83 mo
203.124 152.785 li
@
202.683 153.347 mo
203.124 152.786 li
@
219.831 151.724 mo
220.599 152.592 li
@
220.157 152.663 mo
220.597 152.593 li
@
202.682 153.348 mo
201.914 153.173 li
@
201.467 153.572 mo
201.914 153.174 li
@
222.902 153.696 mo
222.133 153.55 li
@
221.693 153.796 mo
222.133 153.549 li
@
223.67 153.837 mo
224.117 153.591 li
@
224.885 153.737 mo
224.117 153.59 li
@
201.469 153.572 mo
200.701 153.314 li
@
200.26 153.636 mo
200.701 153.314 li
@
219.065 150.911 mo
219.832 151.724 li
@
219.391 151.673 mo
219.832 151.725 li
@
212.809 147.852 mo
213.249 148.075 li
@
212.482 147.095 mo
213.249 148.074 li
@
203.452 152.488 mo
202.684 153.347 li
@
202.237 153.8 mo
202.684 153.348 li
@
218.623 150.788 mo
219.063 150.91 li
@
218.296 150.324 mo
219.064 150.91 li
@
202.236 153.8 mo
201.468 153.571 li
@
201.028 153.888 mo
201.469 153.572 li
@
223.671 153.835 mo
222.903 153.694 li
@
222.463 153.94 mo
222.904 153.694 li
@
212.809 147.851 mo
213.101 148.419 li
@
221.695 153.793 mo
220.927 153.447 li
@
220.486 153.647 mo
220.926 153.448 li
@
220.159 152.662 mo
220.927 153.448 li
@
224.437 153.981 mo
224.885 153.735 li
@
211.45 146.41 mo
211.713 146.58 li
@
212.481 147.095 mo
211.713 146.58 li
@
212.04 146.815 mo
212.481 147.095 li
@
219.39 151.672 mo
220.159 152.662 li
@
219.717 152.715 mo
220.158 152.662 li
@
222.462 153.941 mo
221.694 153.794 li
@
221.252 154.04 mo
221.693 153.795 li
@
203.004 153.312 mo
202.236 153.799 li
@
201.795 154.051 mo
202.236 153.799 li
@
201.027 153.887 mo
200.259 153.635 li
@
199.818 153.887 mo
200.259 153.635 li
@
223.229 154.08 mo
223.67 153.834 li
@
224.437 153.98 mo
223.67 153.834 li
@
201.795 154.049 mo
201.027 153.885 li
@
200.586 154.125 mo
201.027 153.885 li
@
218.622 150.785 mo
219.389 151.67 li
@
218.949 151.611 mo
219.389 151.67 li
@
222.018 154.183 mo
222.46 153.937 li
@
223.227 154.078 mo
222.459 153.937 li
@
217.852 150.169 mo
217.194 149.946 li
@
223.995 154.224 mo
224.435 153.979 li
@
219.715 152.712 mo
220.484 153.645 li
@
220.036 153.796 mo
220.483 153.645 li
@
221.25 154.036 mo
220.482 153.644 li
@
212.038 146.81 mo
212.806 147.848 li
@
212.358 147.56 mo
212.805 147.848 li
@
220.803 154.283 mo
221.25 154.036 li
@
222.017 154.183 mo
221.249 154.037 li
@
218.179 150.672 mo
218.619 150.784 li
@
217.852 150.169 mo
218.62 150.785 li
@
202.367 153.972 mo
201.794 154.048 li
@
201.353 154.294 mo
201.794 154.048 li
@
199.37 154.13 mo
199.817 153.884 li
@
200.584 154.124 mo
199.816 153.884 li
@
217.411 150.045 mo
217.851 150.168 li
@
223.994 154.223 mo
223.225 154.077 li
@
222.779 154.323 mo
223.225 154.077 li
@
203.001 153.308 mo
203.448 152.483 li
@
204.215 151.058 mo
203.447 152.483 li
@
218.946 151.61 mo
219.714 152.712 li
@
219.265 152.706 mo
219.712 152.712 li
@
212.355 147.56 mo
212.831 148.497 li
@
212.682 148.493 mo
212.693 148.504 li
@
203.767 152.027 mo
202.999 153.309 li
@
212.035 146.81 mo
211.485 146.442 li
@
201.35 154.293 mo
200.582 154.123 li
@
200.135 154.352 mo
200.582 154.124 li
@
211.588 146.524 mo
212.036 146.81 li
@
221.569 154.428 mo
222.014 154.183 li
@
222.777 154.323 mo
222.014 154.182 li
@
223.545 154.469 mo
223.992 154.222 li
@
219.265 152.705 mo
220.034 153.795 li
@
219.592 153.73 mo
220.033 153.793 li
@
220.801 154.281 mo
220.033 153.795 li
@
218.177 150.671 mo
218.946 151.609 li
@
218.497 151.492 mo
218.945 151.609 li
@
220.359 154.498 mo
220.799 154.281 li
@
221.569 154.427 mo
220.8 154.281 li
@
202.003 154.229 mo
201.35 154.293 li
@
200.903 154.528 mo
201.35 154.294 li
@
200.135 154.351 mo
199.367 154.128 li
@
198.926 154.386 mo
199.367 154.128 li
@
222.337 154.569 mo
222.778 154.322 li
@
223.545 154.469 mo
222.777 154.323 li
@
217.409 150.044 mo
218.177 150.67 li
@
217.73 150.483 mo
218.176 150.67 li
@
212.682 148.491 mo
212.693 148.509 li
@
199.694 154.591 mo
200.135 154.351 li
@
200.902 154.527 mo
200.134 154.35 li
@
217.059 149.884 mo
217.41 150.043 li
@
221.127 154.672 mo
221.568 154.425 li
@
222.336 154.568 mo
221.568 154.426 li
@
218.824 152.422 mo
219.264 152.703 li
@
218.497 151.49 mo
219.265 152.703 li
@
211.587 146.52 mo
212.355 147.556 li
@
211.914 147.123 mo
212.355 147.557 li
@
223.102 154.711 mo
223.543 154.466 li
@
202.883 153.451 mo
202.356 153.967 li
@
199.692 154.588 mo
198.924 154.383 li
@
198.483 154.658 mo
198.924 154.383 li
@
201.668 154.452 mo
200.9 154.523 li
@
200.46 154.757 mo
200.9 154.524 li
@
219.59 153.727 mo
220.359 154.495 li
@
219.911 154.581 mo
220.357 154.493 li
@
221.125 154.669 mo
220.357 154.493 li
@
221.893 154.811 mo
222.334 154.565 li
@
223.102 154.71 mo
222.334 154.564 li
@
211.145 146.16 mo
211.585 146.518 li
@
219.143 153.503 mo
219.59 153.727 li
@
218.823 152.419 mo
219.591 153.727 li
@
218.054 151.129 mo
218.494 151.487 li
@
217.727 150.48 mo
218.495 151.488 li
@
212.238 147.977 mo
212.679 148.487 li
@
211.911 147.122 mo
212.679 148.488 li
@
200.458 154.758 mo
199.69 154.588 li
@
199.249 154.846 mo
199.69 154.588 li
@
221.892 154.812 mo
221.124 154.67 li
@
220.678 154.916 mo
221.124 154.67 li
@
222.659 154.951 mo
223.099 154.71 li
@
205.42 148.856 mo
204.652 150.18 li
@
204.21 151.053 mo
204.652 150.18 li
@
201.225 154.734 mo
201.666 154.452 li
@
202.433 153.914 mo
201.665 154.453 li
@
204.977 149.801 mo
204.209 151.054 li
@
203.763 152.023 mo
204.209 151.055 li
@
203.321 152.908 mo
203.763 152.023 li
@
204.53 150.821 mo
203.762 152.023 li
@
198.033 154.941 mo
198.48 154.66 li
@
199.247 154.846 mo
198.479 154.658 li
@
201.224 154.736 mo
200.457 154.758 li
@
200.015 155.01 mo
200.457 154.759 li
@
217.284 150.093 mo
217.724 150.481 li
@
204.089 151.84 mo
203.321 152.907 li
@
202.88 153.451 mo
203.321 152.907 li
@
222.658 154.952 mo
221.889 154.811 li
@
221.444 155.057 mo
221.89 154.812 li
@
220.676 154.916 mo
219.908 154.582 li
@
219.14 153.504 mo
219.909 154.582 li
@
219.466 154.547 mo
219.908 154.582 li
@
218.372 152.073 mo
218.819 152.42 li
@
218.052 151.13 mo
218.821 152.42 li
@
200.015 155.009 mo
199.247 154.845 li
@
198.801 155.115 mo
199.247 154.845 li
@
211.142 146.16 mo
211.91 147.121 li
@
211.468 146.752 mo
211.909 147.121 li
@
221.444 155.056 mo
220.676 154.915 li
@
220.235 155.121 mo
220.676 154.916 li
@
202.434 153.914 mo
202.881 153.451 li
@
203.649 152.584 mo
202.881 153.451 li
@
222.212 155.192 mo
222.659 154.951 li
@
212.237 147.978 mo
212.598 148.505 li
@
201.992 154.354 mo
201.224 154.735 li
@
200.783 155.034 mo
201.224 154.735 li
@
197.592 155.216 mo
198.033 154.942 li
@
198.801 155.116 mo
198.033 154.94 li
@
218.699 153.247 mo
219.139 153.505 li
@
218.372 152.074 mo
219.14 153.505 li
@
211.142 146.161 mo
210.374 145.669 li
@
209.939 145.434 mo
210.375 145.668 li
@
199.568 155.267 mo
200.015 155.009 li
@
200.782 155.034 mo
200.014 155.01 li
@
210.7 145.881 mo
211.141 146.162 li
@
222.21 155.194 mo
221.442 155.058 li
@
221.001 155.269 mo
221.442 155.058 li
@
217.283 150.094 mo
218.051 151.131 li
@
217.61 150.735 mo
218.05 151.131 li
@
203.2 153.224 mo
202.432 153.915 li
@
201.991 154.356 mo
202.432 153.916 li
@
199.568 155.269 mo
198.801 155.118 li
@
198.359 155.374 mo
198.801 155.116 li
@
211.789 147.663 mo
212.236 147.979 li
@
211.468 146.754 mo
212.236 147.98 li
@
221.002 155.269 mo
220.235 155.123 li
@
219.466 154.548 mo
220.235 155.122 li
@
219.793 155.263 mo
220.233 155.122 li
@
218.698 153.247 mo
219.466 154.548 li
@
219.025 154.483 mo
219.464 154.547 li
@
221.768 155.403 mo
222.209 155.193 li
@
201.549 154.811 mo
200.781 155.034 li
@
200.335 155.349 mo
200.781 155.034 li
@
197.149 155.479 mo
197.59 155.214 li
@
198.357 155.373 mo
197.589 155.215 li
@
216.84 149.684 mo
217.282 150.093 li
@
200.334 155.35 mo
199.566 155.268 li
@
199.125 155.521 mo
199.566 155.268 li
@
206.624 147.128 mo
205.857 148.107 li
@
205.416 148.857 mo
205.857 148.107 li
@
217.929 151.729 mo
218.37 152.074 li
@
217.61 150.733 mo
218.371 152.074 li
@
202.758 153.838 mo
201.99 154.355 li
@
201.549 154.811 mo
201.99 154.355 li
@
220.559 155.445 mo
221.001 155.268 li
@
221.768 155.404 mo
221 155.268 li
@
204.528 150.821 mo
204.087 151.841 li
@
203.646 152.585 mo
204.087 151.841 li
@
204.854 151.061 mo
204.086 151.841 li
@
206.184 147.92 mo
205.416 148.857 li
@
204.974 149.802 mo
205.416 148.859 li
@
205.295 149.965 mo
204.527 150.821 li
@
204.974 149.802 mo
204.528 150.822 li
@
210.698 145.881 mo
211.466 146.754 li
@
211.019 146.567 mo
211.466 146.754 li
@
205.742 148.887 mo
204.974 149.802 li
@
197.916 155.626 mo
198.357 155.374 li
@
199.125 155.521 mo
198.357 155.374 li
@
217.929 151.729 mo
218.697 153.247 li
@
218.256 153.041 mo
218.697 153.246 li
@
211.787 147.662 mo
212.423 148.516 li
@
210.698 145.88 mo
209.936 145.435 li
@
209.489 145.382 mo
209.936 145.435 li
@
204.413 151.91 mo
203.645 152.584 li
@
203.198 153.222 mo
203.645 152.583 li
@
199.892 155.637 mo
200.333 155.349 li
@
201.101 155.25 mo
200.334 155.35 li
@
208.28 145.616 mo
207.512 146.191 li
@
207.071 146.554 mo
207.512 146.191 li
@
219.023 154.483 mo
219.791 155.261 li
@
219.342 155.403 mo
219.789 155.261 li
@
220.557 155.444 mo
219.789 155.261 li
@
221.325 155.579 mo
221.766 155.403 li
@
210.256 145.775 mo
210.697 145.88 li
@
202.316 154.442 mo
201.548 154.811 li
@
201.101 155.251 mo
201.548 154.811 li
@
197.916 155.626 mo
197.148 155.481 li
@
196.701 155.731 mo
197.148 155.48 li
@
199.892 155.637 mo
199.124 155.52 li
@
198.678 155.765 mo
199.125 155.52 li
@
218.575 154.483 mo
219.023 154.483 li
@
218.255 153.042 mo
219.024 154.483 li
@
203.966 152.685 mo
203.197 153.224 li
@
202.757 153.839 mo
203.198 153.224 li
@
217.161 150.394 mo
217.608 150.735 li
@
216.84 149.685 mo
217.61 150.735 li
@
208.281 145.618 mo
208.722 145.449 li
@
209.489 145.384 mo
208.721 145.449 li
@
211.346 147.634 mo
211.787 147.664 li
@
211.019 146.568 mo
211.787 147.665 li
@
220.112 155.611 mo
220.558 155.446 li
@
221.326 155.582 mo
220.557 155.447 li
@
197.469 155.875 mo
197.916 155.628 li
@
198.679 155.769 mo
197.917 155.628 li
@
206.625 147.131 mo
207.073 146.557 li
@
207.84 146 mo
207.072 146.557 li
@
200.661 155.657 mo
201.102 155.253 li
@
201.87 155.024 mo
201.102 155.253 li
@
203.526 153.407 mo
202.758 153.841 li
@
202.318 154.444 mo
202.759 153.84 li
@
200.662 155.657 mo
199.894 155.639 li
@
199.448 155.909 mo
199.895 155.638 li
@
216.396 149.369 mo
216.841 149.685 li
@
216.075 149.016 mo
216.843 149.685 li
@
196.263 155.979 mo
196.704 155.733 li
@
197.471 155.874 mo
196.703 155.733 li
@
220.882 155.757 mo
221.328 155.581 li
@
220.114 155.61 mo
219.345 155.404 li
@
218.578 154.485 mo
219.346 155.405 li
@
218.905 155.597 mo
219.345 155.405 li
@
217.163 150.394 mo
217.931 151.73 li
@
217.49 151.519 mo
217.93 151.731 li
@
215.628 148.701 mo
216.074 149.016 li
@
210.58 146.621 mo
211.021 146.568 li
@
210.259 145.777 mo
211.021 146.567 li
@
198.239 156.014 mo
198.681 155.767 li
@
199.449 155.91 mo
198.681 155.768 li
@
210.26 145.778 mo
209.492 145.384 li
@
209.051 145.544 mo
209.492 145.386 li
@
203.081 154.129 mo
202.32 154.445 li
@
201.873 155.025 mo
202.32 154.445 li
@
207.396 146.597 mo
206.628 147.13 li
@
206.188 147.921 mo
206.628 147.13 li
@
205.626 150.617 mo
204.858 151.062 li
@
204.417 151.912 mo
204.858 151.062 li
@
205.299 149.966 mo
204.858 151.063 li
@
211.675 148.695 mo
212.116 148.537 li
@
211.349 147.634 mo
212.116 148.537 li
@
212.821 148.495 mo
212.116 148.536 li
@
217.491 151.519 mo
218.259 153.043 li
@
217.812 152.996 mo
218.258 153.043 li
@
209.818 145.875 mo
210.259 145.776 li
@
207.841 145.999 mo
208.282 145.618 li
@
209.049 145.542 mo
208.282 145.618 li
@
206.064 149.486 mo
205.296 149.965 li
@
205.743 148.887 mo
205.296 149.965 li
@
203.968 152.684 mo
204.414 151.911 li
@
205.182 151.537 mo
204.414 151.911 li
@
200.215 156.002 mo
200.662 155.656 li
@
201.43 155.551 mo
200.662 155.656 li
@
218.136 154.619 mo
218.577 154.484 li
@
217.809 152.996 mo
218.577 154.484 li
@
205.744 148.888 mo
206.185 147.921 li
@
206.953 147.411 mo
206.185 147.921 li
@
220.882 155.756 mo
220.114 155.609 li
@
219.673 155.802 mo
220.114 155.61 li
@
206.512 148.389 mo
205.745 148.888 li
@
197.03 156.118 mo
197.471 155.873 li
@
198.238 156.013 mo
197.47 155.872 li
@
200.215 156.001 mo
199.447 155.907 li
@
199.006 156.16 mo
199.447 155.907 li
@
204.736 152.386 mo
203.968 152.685 li
@
203.527 153.406 mo
203.969 152.684 li
@
210.58 146.62 mo
211.348 147.634 li
@
210.906 147.845 mo
211.348 147.634 li
@
201.43 155.551 mo
201.871 155.024 li
@
202.639 154.806 mo
201.871 155.024 li
@
197.03 156.118 mo
196.262 155.978 li
@
195.815 156.223 mo
196.262 155.976 li
@
216.722 150.181 mo
217.163 150.392 li
@
216.397 149.367 mo
217.165 150.392 li
@
203.081 154.126 mo
203.528 153.405 li
@
204.296 153.177 mo
203.529 153.406 li
@
220.442 155.931 mo
220.882 155.755 li
@
218.464 155.896 mo
218.905 155.596 li
@
218.138 154.619 mo
218.907 155.598 li
@
219.673 155.803 mo
218.905 155.598 li
@
209.05 154.502 mo
209.463 153.834 li
@
210.23 152.914 mo
209.462 153.834 li
@
209.904 152.258 mo
209.463 153.834 li
@
208.695 152.692 mo
209.463 153.835 li
@
199.007 156.163 mo
198.239 156.015 li
@
197.798 156.267 mo
198.239 156.015 li
@
208.609 145.907 mo
207.841 146.001 li
@
207.394 146.597 mo
207.841 145.999 li
@
208.609 145.907 mo
209.05 145.544 li
@
209.818 145.877 mo
209.05 145.543 li
@
210.145 146.897 mo
210.581 146.622 li
@
209.818 145.877 mo
210.58 146.622 li
@
200.983 156.01 mo
200.215 156.004 li
@
199.775 156.291 mo
200.216 156.004 li
@
200.983 156.01 mo
201.43 155.553 li
@
202.198 155.435 mo
201.43 155.553 li
@
210.906 147.847 mo
211.674 148.697 li
@
212.442 148.615 mo
211.674 148.697 li
@
211.228 149.125 mo
211.674 148.697 li
@
203.848 153.954 mo
203.08 154.13 li
@
202.639 154.809 mo
203.08 154.129 li
@
215.628 148.703 mo
214.86 148.404 li
@
214.419 148.257 mo
214.86 148.404 li
@
208.249 153.526 mo
209.005 154.54 li
@
209.785 153.683 mo
209.098 154.462 li
@
197.799 156.268 mo
197.031 156.121 li
@
196.584 156.368 mo
197.031 156.121 li
@
209.378 146.229 mo
209.819 145.877 li
@
220.442 155.934 mo
219.673 155.805 li
@
219.233 156.051 mo
219.674 155.804 li
@
205.184 151.539 mo
205.625 150.619 li
@
206.066 149.488 mo
205.625 150.619 li
@
206.393 150.567 mo
205.625 150.619 li
@
217.044 151.468 mo
217.491 151.52 li
@
216.723 150.184 mo
217.492 151.52 li
@
217.698 154.913 mo
218.138 154.62 li
@
217.371 153.085 mo
218.139 154.62 li
@
215.955 149.188 mo
216.397 149.37 li
@
215.629 148.702 mo
216.398 149.37 li
@
199.775 156.291 mo
199.007 156.163 li
@
198.566 156.408 mo
199.007 156.162 li
@
205.951 151.503 mo
205.183 151.538 li
@
204.737 152.388 mo
205.183 151.538 li
@
206.954 147.412 mo
207.395 146.597 li
@
208.163 146.486 mo
207.395 146.596 li
@
217.044 151.466 mo
217.813 152.995 li
@
217.37 153.083 mo
217.81 152.995 li
@
210.461 148.324 mo
210.907 147.844 li
@
210.145 146.893 mo
210.907 147.843 li
@
215.188 148.551 mo
215.628 148.698 li
@
206.833 149.413 mo
206.065 149.483 li
@
206.512 148.387 mo
206.065 149.484 li
@
203.407 154.704 mo
202.639 154.804 li
@
202.199 155.431 mo
202.639 154.804 li
@
204.295 153.175 mo
204.737 152.384 li
@
205.504 152.372 mo
204.737 152.384 li
@
208.249 153.52 mo
208.696 152.688 li
@
209.137 151.352 mo
208.696 152.688 li
@
207.928 151.586 mo
208.696 152.688 li
@
210.345 150.9 mo
209.904 152.253 li
@
209.137 151.351 mo
209.905 152.253 li
@
210.667 151.679 mo
209.905 152.254 li
@
206.513 148.386 mo
206.954 147.407 li
@
207.722 147.296 mo
206.954 147.407 li
@
207.281 148.275 mo
206.513 148.385 li
@
196.584 156.362 mo
195.816 156.221 li
@
218.018 156.267 mo
218.465 155.892 li
@
217.698 154.909 mo
218.466 155.892 li
@
219.234 156.046 mo
218.465 155.893 li
@
207.482 152.501 mo
208.25 153.522 li
@
207.808 154.142 mo
208.249 153.522 li
@
209.378 146.225 mo
208.61 145.904 li
@
208.164 146.484 mo
208.611 145.904 li
@
201.752 155.983 mo
200.984 156.006 li
@
200.544 156.376 mo
200.985 156.007 li
@
197.353 156.511 mo
197.8 156.265 li
@
198.568 156.407 mo
197.8 156.266 li
@
203.85 153.951 mo
204.297 153.178 li
@
205.064 153.201 mo
204.296 153.178 li
@
210.788 149.853 mo
211.23 149.122 li
@
210.462 148.325 mo
211.23 149.122 li
@
211.997 148.987 mo
211.23 149.122 li
@
214.42 148.254 mo
213.652 148.29 li
@
213.212 148.378 mo
213.653 148.29 li
@
220.001 156.161 mo
220.442 155.932 li
@
211.997 148.987 mo
212.444 148.612 li
@
213.212 148.378 mo
212.444 148.612 li
@
200.544 156.377 mo
199.776 156.29 li
@
199.334 156.547 mo
199.776 156.29 li
@
209.378 146.228 mo
210.146 146.897 li
@
209.699 147.43 mo
210.146 146.897 li
@
202.967 155.401 mo
202.2 155.435 li
@
201.752 155.986 mo
202.2 155.434 li
@
207.808 154.146 mo
208.575 154.884 li
@
208.135 155.318 mo
208.575 154.883 li
@
209.343 154.262 mo
208.575 154.883 li
@
208.369 150.366 mo
209.137 151.357 li
@
209.584 150.114 mo
209.137 151.357 li
@
210.787 149.856 mo
210.346 150.905 li
@
211.108 150.547 mo
210.346 150.904 li
@
209.584 150.113 mo
210.346 150.904 li
@
203.407 154.707 mo
203.848 153.951 li
@
204.616 154.004 mo
203.848 153.951 li
@
208.93 146.784 mo
209.376 146.226 li
@
206.833 149.416 mo
206.392 150.564 li
@
207.16 150.88 mo
206.392 150.564 li
@
205.95 151.502 mo
206.392 150.564 li
@
210.024 149.076 mo
210.46 148.325 li
@
209.698 147.429 mo
210.46 148.325 li
@
210.024 149.076 mo
210.786 149.855 li
@
211.554 149.621 mo
210.786 149.853 li
@
205.504 152.374 mo
205.951 151.502 li
@
206.713 151.841 mo
205.951 151.501 li
@
197.351 156.511 mo
196.583 156.364 li
@
220 156.16 mo
219.232 156.048 li
@
218.785 156.364 mo
219.232 156.048 li
@
217.249 155.357 mo
217.696 154.911 li
@
216.928 153.37 mo
217.697 154.911 li
@
207.367 154.753 mo
207.808 154.144 li
@
207.04 153.282 mo
207.808 154.143 li
@
207.161 150.879 mo
207.929 151.588 li
@
207.482 152.503 mo
207.929 151.588 li
@
208.37 150.364 mo
207.929 151.589 li
@
207.722 147.299 mo
208.163 146.485 li
@
208.931 146.783 mo
208.163 146.484 li
@
216.276 150.164 mo
216.722 150.182 li
@
215.955 149.185 mo
216.723 150.181 li
@
206.273 152.671 mo
205.505 152.372 li
@
205.064 153.199 mo
205.505 152.372 li
@
207.282 148.276 mo
206.835 149.414 li
@
207.602 149.712 mo
206.835 149.414 li
@
198.12 156.65 mo
198.567 156.404 li
@
199.334 156.544 mo
198.567 156.404 li
@
207.041 153.28 mo
207.482 152.501 li
@
206.714 151.839 mo
207.482 152.501 li
@
208.817 149.201 mo
209.585 150.11 li
@
210.025 149.073 mo
209.584 150.11 li
@
202.966 155.396 mo
203.407 154.704 li
@
204.175 154.775 mo
203.407 154.704 li
@
209.257 148.212 mo
210.025 149.073 li
@
207.601 149.712 mo
207.161 150.878 li
@
206.713 151.839 mo
207.16 150.878 li
@
206.272 152.671 mo
206.713 151.839 li
@
217.25 155.356 mo
218.018 156.269 li
@
217.577 156.632 mo
218.017 156.269 li
@
218.786 156.362 mo
218.017 156.267 li
@
207.281 148.275 mo
207.722 147.296 li
@
208.49 147.578 mo
207.722 147.297 li
@
204.617 154.001 mo
205.063 153.198 li
@
205.831 153.492 mo
205.063 153.199 li
@
208.049 148.563 mo
207.281 148.276 li
@
208.931 146.782 mo
209.699 147.427 li
@
209.257 148.212 mo
209.699 147.427 li
@
202.52 156 mo
201.752 155.983 li
@
201.311 156.427 mo
201.752 155.983 li
@
207.601 149.712 mo
208.369 150.362 li
@
208.816 149.202 mo
208.369 150.363 li
@
201.31 156.428 mo
200.542 156.375 li
@
200.101 156.668 mo
200.542 156.375 li
@
216.928 153.369 mo
217.37 153.082 li
@
216.602 151.581 mo
217.371 153.082 li
@
213.979 148.323 mo
214.419 148.252 li
@
215.188 148.552 mo
214.419 148.253 li
@
206.599 154.037 mo
207.04 153.281 li
@
206.273 152.671 mo
207.041 153.281 li
@
208.49 147.579 mo
208.931 146.782 li
@
216.276 150.163 mo
217.044 151.464 li
@
216.602 151.581 mo
217.043 151.464 li
@
205.831 153.492 mo
206.272 152.671 li
@
208.049 148.563 mo
207.601 149.712 li
@
206.92 155.373 mo
207.368 154.752 li
@
206.599 154.037 mo
207.368 154.752 li
@
208.135 155.314 mo
207.367 154.751 li
@
208.902 154.869 mo
208.135 155.314 li
@
207.687 155.824 mo
208.135 155.315 li
@
212.764 148.698 mo
211.996 148.985 li
@
211.555 149.619 mo
211.996 148.985 li
@
198.12 156.651 mo
197.352 156.509 li
@
209.785 153.679 mo
210.231 152.911 li
@
210.667 151.68 mo
210.231 152.91 li
@
210.993 152.032 mo
210.231 152.911 li
@
204.175 154.775 mo
204.616 154.001 li
@
205.384 154.282 mo
204.616 154.001 li
@
203.734 155.495 mo
202.966 155.396 li
@
202.519 155.999 mo
202.966 155.397 li
@
208.048 148.563 mo
208.816 149.202 li
@
209.256 148.211 mo
208.815 149.201 li
@
208.489 147.578 mo
209.256 148.211 li
@
219.552 156.415 mo
220 156.158 li
@
215.508 149.184 mo
215.954 149.184 li
@
215.187 148.551 mo
215.955 149.184 li
@
205.384 154.283 mo
205.831 153.492 li
@
206.598 154.037 mo
205.83 153.493 li
@
208.048 148.563 mo
208.489 147.579 li
@
200.101 156.666 mo
199.333 156.543 li
@
198.886 156.79 mo
199.333 156.543 li
@
206.151 154.762 mo
206.598 154.035 li
@
216.808 155.906 mo
217.249 155.355 li
@
216.483 153.814 mo
217.251 155.355 li
@
214.741 148.591 mo
215.187 148.55 li
@
213.978 148.321 mo
213.21 148.374 li
@
212.764 148.696 mo
213.211 148.374 li
@
210.547 152.809 mo
209.785 153.676 li
@
209.343 154.256 mo
209.785 153.676 li
@
203.735 155.492 mo
204.176 154.772 li
@
204.944 155.035 mo
204.176 154.772 li
@
211.108 150.54 mo
210.667 151.677 li
@
211.435 151.008 mo
210.667 151.676 li
@
219.553 156.411 mo
218.786 156.358 li
@
218.345 156.687 mo
218.786 156.358 li
@
206.152 154.758 mo
205.384 154.279 li
@
204.944 155.033 mo
205.385 154.277 li
@
211.108 150.538 mo
211.555 149.613 li
@
212.323 149.243 mo
211.555 149.613 li
@
206.479 155.97 mo
206.919 155.366 li
@
206.152 154.757 mo
206.92 155.366 li
@
207.687 155.818 mo
206.92 155.367 li
@
205.711 155.461 mo
206.152 154.758 li
@
200.869 156.768 mo
201.31 156.422 li
@
202.078 156.494 mo
201.31 156.424 li
@
202.078 156.494 mo
202.519 155.996 li
@
203.287 156.119 mo
202.519 155.996 li
@
211.875 150.042 mo
211.107 150.54 li
@
216.808 155.902 mo
217.577 156.628 li
@
217.135 156.885 mo
217.576 156.627 li
@
218.345 156.687 mo
217.577 156.627 li
@
198.887 156.787 mo
198.119 156.646 li
@
208.455 155.497 mo
207.687 155.819 li
@
207.246 156.341 mo
207.687 155.82 li
@
203.288 156.118 mo
203.735 155.491 li
@
204.502 155.749 mo
203.734 155.491 li
@
205.711 155.461 mo
204.943 155.034 li
@
204.502 155.749 mo
204.943 155.034 li
@
200.869 156.768 mo
200.101 156.663 li
@
199.655 156.927 mo
200.102 156.663 li
@
216.161 151.869 mo
216.928 153.364 li
@
216.482 153.808 mo
216.927 153.364 li
@
216.367 156.374 mo
216.807 155.9 li
@
216.04 154.376 mo
216.808 155.9 li
@
210.11 153.502 mo
209.342 154.253 li
@
208.901 154.862 mo
209.342 154.253 li
@
206.478 155.968 mo
205.71 155.458 li
@
205.269 156.109 mo
205.71 155.459 li
@
215.508 149.176 mo
216.277 150.156 li
@
215.835 150.301 mo
216.276 150.156 li
@
207.246 156.337 mo
206.479 155.968 li
@
206.037 156.52 mo
206.479 155.968 li
@
219.112 156.702 mo
219.552 156.409 li
@
205.27 156.11 mo
204.502 155.748 li
@
204.055 156.344 mo
204.502 155.747 li
@
214.741 148.585 mo
213.978 148.315 li
@
213.532 148.604 mo
213.978 148.317 li
@
216.162 151.868 mo
216.602 151.575 li
@
215.836 150.304 mo
216.604 151.576 li
@
204.056 156.346 mo
203.289 156.117 li
@
202.848 156.627 mo
203.289 156.117 li
@
212.325 149.244 mo
212.766 148.693 li
@
213.533 148.605 mo
212.765 148.693 li
@
199.657 156.926 mo
198.889 156.785 li
@
202.848 156.627 mo
202.08 156.492 li
@
201.639 156.879 mo
202.08 156.492 li
@
219.114 156.703 mo
218.346 156.686 li
@
217.905 156.984 mo
218.346 156.686 li
@
208.016 156.129 mo
207.248 156.34 li
@
206.807 156.797 mo
207.248 156.34 li
@
204.825 156.657 mo
205.271 156.111 li
@
206.039 156.521 mo
205.271 156.11 li
@
209.672 154.217 mo
208.904 154.863 li
@
208.457 155.494 mo
208.904 154.861 li
@
200.425 157.053 mo
200.871 156.766 li
@
201.639 156.877 mo
200.871 156.766 li
@
214.742 148.585 mo
215.51 149.177 li
@
215.069 149.388 mo
215.509 149.177 li
@
215.601 154.909 mo
216.369 156.374 li
@
215.923 156.497 mo
216.369 156.373 li
@
217.137 156.883 mo
216.369 156.373 li
@
214.301 148.815 mo
214.742 148.586 li
@
216.043 154.376 mo
216.484 153.808 li
@
215.716 152.343 mo
216.485 153.808 li
@
216.692 157.118 mo
217.137 156.884 li
@
217.906 156.983 mo
217.137 156.882 li
@
205.594 156.96 mo
206.04 156.521 li
@
206.808 156.796 mo
206.04 156.522 li
@
204.826 156.656 mo
204.057 156.344 li
@
203.616 156.831 mo
204.057 156.345 li
@
211.878 150.039 mo
212.325 149.242 li
@
213.093 149.101 mo
212.325 149.242 li
@
200.425 157.052 mo
199.657 156.924 li
@
202.407 157.018 mo
202.848 156.625 li
@
203.615 156.83 mo
202.847 156.625 li
@
208.015 156.127 mo
208.456 155.494 li
@
209.224 154.944 mo
208.456 155.495 li
@
204.383 157.071 mo
204.824 156.656 li
@
205.592 156.96 mo
204.824 156.656 li
@
207.574 156.714 mo
206.806 156.796 li
@
206.359 157.159 mo
206.806 156.796 li
@
210.548 152.805 mo
210.994 152.026 li
@
211.762 151.557 mo
210.994 152.026 li
@
211.436 151.005 mo
210.994 152.025 li
@
211.436 151.005 mo
211.876 150.039 li
@
212.644 149.787 mo
211.876 150.038 li
@
218.672 156.977 mo
219.113 156.701 li
@
201.192 157.181 mo
201.639 156.876 li
@
202.407 157.018 mo
201.639 156.876 li
@
212.204 150.648 mo
211.437 151.004 li
@
215.394 150.648 mo
216.163 151.866 li
@
213.091 149.101 mo
213.531 148.602 li
@
215.715 152.341 mo
216.162 151.866 li
@
214.3 148.814 mo
213.532 148.602 li
@
215.068 149.387 mo
215.836 150.301 li
@
215.394 150.648 mo
215.835 150.301 li
@
215.6 154.908 mo
216.041 154.375 li
@
215.274 152.928 mo
216.042 154.375 li
@
218.672 156.978 mo
217.904 156.983 li
@
217.457 157.17 mo
217.904 156.982 li
@
210.112 153.501 mo
210.548 152.805 li
@
211.316 152.318 mo
210.548 152.803 li
@
204.383 157.07 mo
203.615 156.83 li
@
203.174 157.194 mo
203.615 156.83 li
@
208.783 155.687 mo
208.015 156.125 li
@
207.575 156.711 mo
208.016 156.125 li
@
205.151 157.273 mo
205.593 156.957 li
@
206.36 157.156 mo
205.592 156.957 li
@
201.192 157.178 mo
200.424 157.049 li
@
214.628 149.772 mo
215.069 149.385 li
@
214.301 148.812 mo
215.07 149.385 li
@
213.86 149.256 mo
214.301 148.812 li
@
217.458 157.167 mo
216.691 157.114 li
@
215.923 156.494 mo
216.692 157.115 li
@
216.249 157.268 mo
216.691 157.115 li
@
203.175 157.192 mo
202.407 157.015 li
@
201.96 157.32 mo
202.407 157.015 li
@
210.875 153.001 mo
210.113 153.498 li
@
209.672 154.214 mo
210.113 153.498 li
@
215.481 156.582 mo
215.922 156.494 li
@
215.155 155.182 mo
215.922 156.494 li
@
215.155 155.182 mo
215.601 154.907 li
@
214.834 153.524 mo
215.602 154.907 li
@
212.645 149.786 mo
213.093 149.1 li
@
213.86 149.258 mo
213.093 149.101 li
@
215.276 152.927 mo
215.716 152.341 li
@
214.95 151.169 mo
215.718 152.341 li
@
203.944 157.38 mo
204.385 157.069 li
@
205.152 157.275 mo
204.385 157.07 li
@
207.129 157.2 mo
206.361 157.158 li
@
205.92 157.428 mo
206.361 157.158 li
@
207.129 157.2 mo
207.576 156.713 li
@
208.344 156.408 mo
207.576 156.713 li
@
214.629 149.774 mo
215.397 150.648 li
@
214.95 151.169 mo
215.396 150.648 li
@
201.961 157.322 mo
201.193 157.18 li
@
218.227 157.146 mo
218.674 156.976 li
@
210.435 153.747 mo
209.673 154.216 li
@
209.226 154.942 mo
209.673 154.214 li
@
213.414 149.891 mo
212.646 149.786 li
@
212.205 150.647 mo
212.646 149.786 li
@
202.728 157.48 mo
203.175 157.194 li
@
203.943 157.379 mo
203.175 157.192 li
@
205.92 157.426 mo
205.152 157.274 li
@
204.711 157.531 mo
205.152 157.273 li
@
213.414 149.89 mo
213.861 149.256 li
@
214.629 149.772 mo
213.861 149.255 li
@
218.227 157.145 mo
217.459 157.167 li
@
217.018 157.303 mo
217.459 157.167 li
@
214.835 153.524 mo
215.276 152.925 li
@
214.508 151.789 mo
215.277 152.926 li
@
212.973 150.658 mo
212.205 150.647 li
@
211.763 151.554 mo
212.204 150.646 li
@
214.18 150.329 mo
214.627 149.772 li
@
208.784 155.685 mo
209.225 154.941 li
@
209.993 154.512 mo
209.225 154.941 li
@
211.317 152.316 mo
211.763 151.553 li
@
212.531 151.484 mo
211.763 151.553 li
@
202.728 157.478 mo
201.96 157.32 li
@
206.688 157.548 mo
207.129 157.197 li
@
207.896 157.044 mo
207.128 157.197 li
@
214.508 151.787 mo
214.949 151.166 li
@
214.182 150.328 mo
214.951 151.166 li
@
204.711 157.53 mo
203.943 157.378 li
@
203.496 157.63 mo
203.943 157.378 li
@
214.388 153.944 mo
215.157 155.181 li
@
214.715 155.439 mo
215.156 155.182 li
@
208.344 156.406 mo
208.785 155.685 li
@
209.553 155.299 mo
208.785 155.687 li
@
210.876 153.002 mo
211.317 152.318 li
@
212.085 152.158 mo
211.317 152.317 li
@
217.018 157.304 mo
216.25 157.269 li
@
215.809 157.404 mo
216.25 157.269 li
@
215.483 156.584 mo
216.251 157.271 li
@
214.182 150.331 mo
213.414 149.893 li
@
212.974 150.659 mo
213.415 149.892 li
@
205.48 157.674 mo
205.921 157.428 li
@
206.689 157.551 mo
205.921 157.428 li
@
214.389 153.948 mo
214.836 153.527 li
@
214.07 152.478 mo
214.837 153.527 li
@
214.716 155.443 mo
215.484 156.586 li
@
215.043 156.76 mo
215.483 156.585 li
@
213.742 151.03 mo
214.182 150.333 li
@
213.742 151.03 mo
212.975 150.66 li
@
212.533 151.488 mo
212.975 150.661 li
@
209.113 156.092 mo
208.345 156.408 li
@
207.898 157.048 mo
208.345 156.409 li
@
214.069 152.478 mo
214.508 151.791 li
@
213.742 151.03 mo
214.51 151.792 li
@
217.787 157.288 mo
218.228 157.148 li
@
203.497 157.634 mo
202.729 157.483 li
@
211.645 152.841 mo
210.877 153.005 li
@
210.436 153.749 mo
210.877 153.005 li
@
205.48 157.675 mo
204.712 157.534 li
@
204.265 157.781 mo
204.712 157.534 li
@
213.301 151.792 mo
212.533 151.488 li
@
212.086 152.161 mo
212.533 151.488 li
@
213.301 151.792 mo
213.742 151.03 li
@
207.457 157.56 mo
206.689 157.553 li
@
206.247 157.817 mo
206.689 157.553 li
@
211.203 153.546 mo
210.436 153.751 li
@
209.995 154.519 mo
210.436 153.751 li
@
216.578 157.459 mo
217.019 157.308 li
@
217.787 157.289 mo
217.019 157.308 li
@
213.301 151.792 mo
214.07 152.479 li
@
213.621 153 mo
214.069 152.479 li
@
207.457 157.559 mo
207.897 157.048 li
@
208.665 156.827 mo
207.897 157.05 li
@
213.621 153 mo
214.389 153.949 li
@
213.948 154.348 mo
214.388 153.95 li
@
212.853 152.409 mo
213.3 151.793 li
@
204.265 157.783 mo
203.497 157.636 li
@
214.275 155.75 mo
214.715 155.445 li
@
213.947 154.349 mo
214.715 155.446 li
@
211.644 152.843 mo
212.085 152.163 li
@
212.853 152.409 mo
212.085 152.162 li
@
210.756 154.306 mo
209.994 154.518 li
@
209.553 155.302 mo
209.994 154.518 li
@
206.246 157.817 mo
205.479 157.675 li
@
205.032 157.922 mo
205.479 157.675 li
@
216.576 157.458 mo
215.807 157.406 li
@
215.361 157.611 mo
215.807 157.406 li
@
215.041 156.76 mo
215.809 157.406 li
@
214.594 157.031 mo
215.041 156.76 li
@
214.275 155.748 mo
215.043 156.761 li
@
209.112 156.093 mo
209.553 155.302 li
@
210.32 155.103 mo
209.553 155.302 li
@
212.853 152.408 mo
213.621 153 li
@
213.18 153.514 mo
213.621 152.998 li
@
211.203 153.544 mo
211.645 152.84 li
@
212.412 153.016 mo
211.645 152.841 li
@
212.412 153.016 mo
212.853 152.408 li
@
208.224 157.453 mo
207.457 157.559 li
@
207.015 157.923 mo
207.456 157.56 li
@
205.033 157.923 mo
204.265 157.782 li
@
217.345 157.443 mo
217.786 157.29 li
@
209.879 155.902 mo
209.112 156.094 li
@
208.664 156.828 mo
209.112 156.095 li
@
213.506 154.8 mo
213.947 154.349 li
@
213.179 153.518 mo
213.947 154.349 li
@
205.799 158.071 mo
206.246 157.819 li
@
207.014 157.925 mo
206.245 157.82 li
@
211.97 153.658 mo
211.202 153.547 li
@
210.755 154.307 mo
211.202 153.546 li
@
217.344 157.443 mo
216.576 157.46 li
@
216.129 157.67 mo
216.576 157.459 li
@
213.826 156.164 mo
214.273 155.748 li
@
213.505 154.799 mo
214.273 155.749 li
@
208.222 157.453 mo
208.663 156.826 li
@
209.431 156.68 mo
208.663 156.827 li
@
213.177 153.516 mo
212.409 153.017 li
@
211.968 153.658 mo
212.409 153.018 li
@
212.736 154.086 mo
213.177 153.519 li
@
211.522 154.367 mo
210.754 154.307 li
@
210.318 155.105 mo
210.754 154.308 li
@
205.797 158.07 mo
205.03 157.923 li
@
214.919 157.906 mo
215.36 157.613 li
@
214.592 157.033 mo
215.361 157.613 li
@
216.128 157.671 mo
215.36 157.613 li
@
213.825 156.165 mo
214.593 157.033 li
@
214.152 157.419 mo
214.593 157.033 li
@
206.566 158.204 mo
207.013 157.924 li
@
207.781 157.94 mo
207.013 157.923 li
@
211.081 155.132 mo
210.318 155.103 li
@
209.877 155.901 mo
210.318 155.103 li
@
207.78 157.94 mo
208.221 157.454 li
@
208.989 157.372 mo
208.221 157.454 li
@
213.057 155.338 mo
213.504 154.799 li
@
212.736 154.084 mo
213.504 154.799 li
@
211.522 154.365 mo
211.969 153.656 li
@
212.736 154.084 mo
211.968 153.656 li
@
209.43 156.68 mo
209.877 155.902 li
@
212.289 154.723 mo
212.735 154.084 li
@
210.639 155.925 mo
209.877 155.903 li
@
213.057 155.339 mo
213.825 156.165 li
@
213.384 156.669 mo
213.825 156.165 li
@
216.896 157.66 mo
217.343 157.443 li
@
206.565 158.204 mo
205.797 158.069 li
@
211.08 155.134 mo
211.521 154.366 li
@
212.289 154.724 mo
211.521 154.368 li
@
208.989 157.373 mo
209.43 156.682 li
@
210.198 156.693 mo
209.43 156.681 li
@
216.895 157.661 mo
216.127 157.672 li
@
215.686 157.96 mo
216.127 157.672 li
@
212.288 154.725 mo
213.056 155.34 li
@
212.614 155.955 mo
213.055 155.34 li
@
213.702 157.848 mo
214.149 157.419 li
@
214.917 157.907 mo
214.149 157.42 li
@
213.382 156.67 mo
214.151 157.42 li
@
211.846 155.422 mo
212.287 154.725 li
@
208.546 157.93 mo
207.778 157.943 li
@
207.332 158.293 mo
207.779 157.941 li
@
211.847 155.422 mo
211.079 155.135 li
@
210.638 155.926 mo
211.079 155.135 li
@
214.471 158.241 mo
214.918 157.906 li
@
215.686 157.96 mo
214.918 157.907 li
@
208.547 157.93 mo
208.988 157.374 li
@
209.756 157.404 mo
208.988 157.375 li
@
207.333 158.295 mo
206.565 158.207 li
@
212.615 155.957 mo
213.383 156.672 li
@
212.941 157.241 mo
213.383 156.672 li
@
210.197 156.695 mo
210.638 155.927 li
@
211.405 156.163 mo
210.637 155.928 li
@
212.614 155.957 mo
211.846 155.424 li
@
211.405 156.163 mo
211.846 155.424 li
@
212.173 156.626 mo
212.614 155.957 li
@
210.958 156.907 mo
210.196 156.695 li
@
209.755 157.404 mo
210.196 156.695 li
@
216.453 157.943 mo
216.893 157.663 li
@
212.173 156.626 mo
211.405 156.163 li
@
210.958 156.907 mo
211.405 156.163 li
@
212.94 157.241 mo
213.702 157.849 li
@
214.47 158.243 mo
213.702 157.849 li
@
213.262 158.295 mo
213.703 157.851 li
@
209.315 157.991 mo
208.547 157.931 li
@
208.1 158.348 mo
208.547 157.931 li
@
212.174 156.625 mo
212.941 157.24 li
@
212.495 157.802 mo
212.941 157.24 li
@
215.24 158.3 mo
215.687 157.961 li
@
216.454 157.943 mo
215.687 157.961 li
@
208.1 158.347 mo
207.332 158.293 li
@
211.728 157.291 mo
212.174 156.624 li
@
209.315 157.989 mo
209.756 157.403 li
@
210.518 157.578 mo
209.756 157.402 li
@
215.24 158.299 mo
214.47 158.241 li
@
214.031 158.575 mo
214.47 158.241 li
@
211.728 157.291 mo
210.959 156.905 li
@
210.518 157.578 mo
210.959 156.905 li
@
212.495 157.801 mo
211.728 157.291 li
@
211.285 157.913 mo
211.727 157.291 li
@
213.262 158.293 mo
212.494 157.801 li
@
212.053 158.323 mo
212.494 157.8 li
@
210.077 158.153 mo
210.517 157.578 li
@
211.285 157.913 mo
210.517 157.578 li
@
210.077 158.153 mo
209.315 157.989 li
@
208.867 158.427 mo
209.315 157.989 li
@
212.821 158.667 mo
213.262 158.292 li
@
214.03 158.574 mo
213.262 158.292 li
@
208.867 158.427 mo
208.1 158.345 li
@
216.007 158.281 mo
216.453 157.94 li
@
216.007 158.281 mo
215.239 158.298 li
@
214.797 158.65 mo
215.238 158.298 li
@
212.052 158.322 mo
211.284 157.912 li
@
210.837 158.426 mo
211.284 157.911 li
@
213.587 158.854 mo
214.028 158.574 li
@
214.796 158.649 mo
214.028 158.573 li
@
211.605 158.731 mo
212.052 158.321 li
@
212.819 158.667 mo
212.051 158.322 li
@
210.837 158.427 mo
210.076 158.153 li
@
209.634 158.586 mo
210.076 158.152 li
@
209.634 158.586 mo
208.866 158.427 li
@
212.373 158.955 mo
212.819 158.667 li
@
213.587 158.854 mo
212.819 158.666 li
@
210.396 158.807 mo
210.837 158.426 li
@
211.605 158.731 mo
210.837 158.425 li
@
215.565 158.655 mo
216.006 158.281 li
@
214.357 158.97 mo
214.797 158.649 li
@
215.565 158.655 mo
214.796 158.649 li
@
210.396 158.807 mo
209.634 158.584 li
@
211.164 159.037 mo
211.605 158.732 li
@
212.373 158.955 mo
211.605 158.732 li
@
214.356 158.972 mo
213.587 158.856 li
@
213.141 159.103 mo
213.588 158.856 li
@
211.165 159.039 mo
210.397 158.81 li
@
211.933 159.208 mo
212.374 158.957 li
@
213.141 159.103 mo
212.374 158.957 li
@
215.124 159.026 mo
215.565 158.657 li
@
215.124 159.026 mo
214.357 158.972 li
@
213.909 159.243 mo
214.356 158.972 li
@
211.932 159.208 mo
211.164 159.039 li
@
212.7 159.349 mo
213.141 159.104 li
@
213.909 159.244 mo
213.141 159.104 li
@
214.677 159.344 mo
215.124 159.028 li
@
212.7 159.35 mo
211.932 159.209 li
@
214.677 159.344 mo
213.909 159.244 li
@
213.468 159.491 mo
213.909 159.245 li
@
213.468 159.491 mo
212.7 159.35 li
@
214.237 159.62 mo
214.677 159.345 li
@
214.237 159.62 mo
213.468 159.491 li
@
214.237 163.575 mo
224.877 157.663 li
@
214.237 163.575 mo
195.817 160.164 li
201.18 157.181 li
@
224.877 157.663 mo
219.245 156.62 li
@
195.817 156.221 mo
195.817 160.164 li
@
195.817 148.345 mo
195.817 156.221 li
@
162.441 134.581 mo
233.775 134.581 li
233.775 109.248 li
162.441 109.248 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
1 lw
233.774 134.581 mo
162.44 134.581 li
162.44 109.248 li
233.774 109.248 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.21569 .21176 .22353 colr
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
PRZTWJ+Myriad-Roman*1 [12 0 0 -12 0 0 ]msf
190.771 123.913 mo
(E)sh
PRZTWJ+Myriad-Roman*1 [8 0 0 -8 0 0 ]msf
199.443 126.577 mo
(1)sh
PRZTWJ+Myriad-Roman*1 [12 0 0 -12 0 0 ]msf
175.771 157.569 mo
(E)sh
PRZTWJ+Myriad-Roman*1 [8 0 0 -8 0 0 ]msf
184.443 160.249 mo
(0)sh
162.773 103.581 mo
234.107 103.581 li
234.107 78.248 li
162.773 78.248 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
234.107 103.581 mo
162.773 103.581 li
162.773 78.248 li
234.107 78.248 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.21569 .21176 .22353 colr
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
PRZTWJ+Myriad-Roman*1 [12 0 0 -12 0 0 ]msf
191.107 92.9159 mo
(E)sh
PRZTWJ+Myriad-Roman*1 [8 0 0 -8 0 0 ]msf
199.779 95.577 mo
(2)sh
162.368 66.278 mo
233.702 66.278 li
233.702 40.945 li
162.368 40.945 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
233.702 66.278 mo
162.368 66.278 li
162.368 40.945 li
233.702 40.945 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.21569 .21176 .22353 colr
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
PRZTWJ+Myriad-Roman*1 [10 0 0 -10 0 0 ]msf
177.264 50.7587 mo
(Evolution)
[4.90904 4.79903 5.47896 2.32893 5.49896 3.29892 2.32895 5.47896 0 ]xsh
177.264 62.7647 mo
(Operators)
[6.87895 5.679 4.99907 3.25896 4.80896 3.29892 5.47897 3.25896 0 ]xsh
249.5 52.455 mo
249.5 154.121 li
0 gry
@
232.929 52.455 mo
249.5 52.455 li
@
233.518 153.473 mo
250.089 153.473 li
@
244.218 94.041 mo
249.368 98.299 li
254.519 94.041 li
249.368 105.106 li
244.218 94.041 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.92157 .17255 .19608 colr
f
244.218 94.041 mo
249.368 98.299 li
254.519 94.041 li
249.368 105.106 li
244.218 94.041 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
f
297.448 177.506 mo
408.705 177.506 li
408.705 33.989 li
297.448 33.989 li
cp
1 gry
f
[12 12 ] 0 dsh
408.705 33.989 mo
297.448 33.989 li
297.448 177.506 li
408.705 177.506 li
408.705 33.989 li
cp
0 gry
@
307.765 166.654 mo
379.098 166.654 li
379.098 141.321 li
307.765 141.321 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
[] 0 dsh
379.098 166.654 mo
307.765 166.654 li
307.765 141.321 li
379.098 141.321 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.21569 .21176 .22353 colr
@
.3 lw
349.13 152.797 mo
349.199 152.769 li
0 gry
@
348.683 152.95 mo
349.13 152.797 li
@
349.176 152.808 mo
349.13 152.796 li
@
348.242 153.084 mo
348.682 152.949 li
@
349.067 152.99 mo
348.682 152.949 li
@
347.799 153.237 mo
348.24 153.085 li
@
348.974 153.113 mo
348.242 153.084 li
@
348.568 153.254 mo
348.968 153.125 li
@
347.352 153.437 mo
347.799 153.238 li
@
348.568 153.254 mo
347.799 153.236 li
@
358.692 148.859 mo
359.128 149.362 li
@
348.121 153.494 mo
348.568 153.254 li
@
348.94 153.165 mo
348.568 153.253 li
@
358.245 148.483 mo
358.692 148.858 li
@
348.121 153.494 mo
347.352 153.435 li
@
346.913 153.71 mo
347.353 153.436 li
@
347.68 153.833 mo
348.121 153.493 li
@
348.776 153.393 mo
348.123 153.494 li
@
347.68 153.833 mo
346.913 153.71 li
@
346.472 154.032 mo
346.913 153.71 li
@
367.137 154.131 mo
366.37 153.606 li
@
365.602 152.856 mo
366.371 153.606 li
@
365.923 153.665 mo
366.37 153.606 li
@
367.905 154.374 mo
367.136 154.133 li
@
366.691 154.327 mo
367.136 154.133 li
@
358.245 148.484 mo
358.978 149.369 li
@
358.571 149.146 mo
358.955 149.374 li
@
364.834 152.123 mo
365.602 152.856 li
@
365.155 152.796 mo
365.6 152.856 li
@
363.619 151.397 mo
364.066 151.579 li
@
364.834 152.124 mo
364.067 151.579 li
@
364.387 151.983 mo
364.834 152.124 li
@
368.673 154.521 mo
367.905 154.374 li
@
367.458 154.621 mo
367.905 154.375 li
@
348.448 153.859 mo
347.68 153.836 li
@
347.239 154.246 mo
347.679 153.836 li
@
357.803 148.168 mo
358.244 148.485 li
@
358.571 149.147 mo
358.725 149.422 li
@
346.024 154.385 mo
346.471 154.033 li
@
347.239 154.245 mo
346.471 154.034 li
@
368.225 154.768 mo
368.672 154.522 li
@
369.439 154.663 mo
368.671 154.522 li
@
365.921 153.667 mo
366.689 154.329 li
@
367.456 154.622 mo
366.689 154.329 li
@
366.247 154.522 mo
366.689 154.329 li
@
349.122 152.905 mo
348.446 153.86 li
@
348.005 154.422 mo
348.446 153.861 li
@
365.153 152.799 mo
365.921 153.667 li
@
365.479 153.738 mo
365.919 153.668 li
@
348.003 154.423 mo
347.235 154.248 li
@
346.788 154.647 mo
347.235 154.249 li
@
368.222 154.771 mo
367.454 154.624 li
@
367.013 154.871 mo
367.454 154.624 li
@
368.991 154.911 mo
369.438 154.665 li
@
370.206 154.81 mo
369.439 154.665 li
@
346.789 154.645 mo
346.021 154.387 li
@
345.58 154.71 mo
346.02 154.387 li
@
364.384 151.985 mo
365.152 152.799 li
@
364.711 152.747 mo
365.152 152.799 li
@
358.128 148.926 mo
358.568 149.149 li
@
357.801 148.169 mo
358.569 149.148 li
@
348.771 153.561 mo
348.003 154.421 li
@
347.556 154.873 mo
348.003 154.421 li
@
363.943 151.861 mo
364.384 151.984 li
@
363.616 151.397 mo
364.384 151.983 li
@
347.555 154.873 mo
346.787 154.644 li
@
346.347 154.961 mo
346.788 154.645 li
@
368.991 154.908 mo
368.222 154.766 li
@
367.783 155.013 mo
368.223 154.767 li
@
358.129 148.925 mo
358.421 149.493 li
@
367.015 154.867 mo
366.248 154.521 li
@
365.806 154.719 mo
366.247 154.521 li
@
365.479 153.735 mo
366.248 154.521 li
@
369.758 155.053 mo
370.206 154.807 li
@
356.77 147.483 mo
357.034 147.653 li
@
357.801 148.168 mo
357.033 147.653 li
@
357.361 147.887 mo
357.801 148.168 li
@
364.711 152.745 mo
365.479 153.735 li
@
365.038 153.788 mo
365.478 153.735 li
@
367.783 155.013 mo
367.014 154.868 li
@
366.574 155.113 mo
367.014 154.868 li
@
348.326 154.385 mo
347.557 154.872 li
@
347.117 155.124 mo
347.557 154.872 li
@
346.348 154.96 mo
345.58 154.708 li
@
345.139 154.96 mo
345.58 154.708 li
@
368.55 155.153 mo
368.991 154.907 li
@
369.758 155.052 mo
368.991 154.906 li
@
347.116 155.122 mo
346.347 154.958 li
@
345.907 155.198 mo
346.347 154.958 li
@
363.943 151.858 mo
364.711 152.743 li
@
364.27 152.683 mo
364.71 152.743 li
@
367.339 155.256 mo
367.781 155.009 li
@
368.549 155.151 mo
367.781 155.009 li
@
363.174 151.242 mo
362.515 151.019 li
@
369.317 155.297 mo
369.756 155.051 li
@
365.037 153.785 mo
365.805 154.717 li
@
365.358 154.869 mo
365.804 154.717 li
@
366.572 155.109 mo
365.804 154.716 li
@
357.36 147.883 mo
358.128 148.921 li
@
357.679 148.633 mo
358.126 148.921 li
@
366.124 155.356 mo
366.571 155.109 li
@
367.338 155.256 mo
366.57 155.11 li
@
363.5 151.745 mo
363.94 151.857 li
@
363.173 151.242 mo
363.941 151.858 li
@
347.688 155.045 mo
347.115 155.121 li
@
346.673 155.367 mo
347.114 155.121 li
@
344.692 155.203 mo
345.138 154.957 li
@
345.906 155.197 mo
345.138 154.957 li
@
362.733 151.118 mo
363.173 151.241 li
@
369.316 155.296 mo
368.547 155.15 li
@
368.1 155.396 mo
368.547 155.15 li
@
348.323 154.381 mo
348.769 153.555 li
@
349.537 152.131 mo
348.768 153.555 li
@
364.267 152.682 mo
365.036 153.785 li
@
364.587 153.779 mo
365.034 153.785 li
@
357.677 148.634 mo
358.154 149.571 li
@
358.004 149.567 mo
358.015 149.578 li
@
349.09 153.1 mo
348.322 154.383 li
@
357.358 147.884 mo
356.807 147.515 li
@
346.672 155.367 mo
345.905 155.197 li
@
345.457 155.426 mo
345.904 155.198 li
@
356.91 147.597 mo
357.358 147.884 li
@
366.89 155.502 mo
367.336 155.257 li
@
368.098 155.397 mo
367.336 155.256 li
@
368.867 155.543 mo
369.314 155.296 li
@
364.587 153.779 mo
365.355 154.869 li
@
364.914 154.803 mo
365.355 154.868 li
@
366.123 155.355 mo
365.355 154.869 li
@
363.499 151.745 mo
364.267 152.682 li
@
363.819 152.566 mo
364.266 152.682 li
@
365.68 155.572 mo
366.122 155.355 li
@
366.89 155.501 mo
366.122 155.355 li
@
347.325 155.302 mo
346.672 155.366 li
@
346.224 155.602 mo
346.671 155.368 li
@
345.456 155.425 mo
344.688 155.202 li
@
344.247 155.46 mo
344.688 155.202 li
@
367.658 155.642 mo
368.099 155.396 li
@
368.866 155.543 mo
368.097 155.397 li
@
362.73 151.118 mo
363.498 151.744 li
@
363.05 151.556 mo
363.497 151.743 li
@
358.002 149.565 mo
358.013 149.583 li
@
345.014 155.665 mo
345.455 155.425 li
@
346.222 155.602 mo
345.454 155.425 li
@
362.379 150.959 mo
362.73 151.118 li
@
366.447 155.747 mo
366.887 155.5 li
@
367.656 155.642 mo
366.887 155.501 li
@
364.144 153.497 mo
364.585 153.778 li
@
363.817 152.565 mo
364.585 153.778 li
@
356.907 147.594 mo
357.675 148.631 li
@
357.234 148.199 mo
357.674 148.633 li
@
368.423 155.787 mo
368.864 155.542 li
@
348.204 154.527 mo
347.677 155.043 li
@
345.013 155.664 mo
344.245 155.459 li
@
343.804 155.734 mo
344.245 155.459 li
@
346.989 155.529 mo
346.221 155.599 li
@
345.781 155.834 mo
346.22 155.6 li
@
364.911 154.803 mo
365.678 155.572 li
@
365.232 155.658 mo
365.677 155.57 li
@
366.446 155.746 mo
365.677 155.57 li
@
367.214 155.887 mo
367.655 155.641 li
@
368.423 155.787 mo
367.655 155.641 li
@
356.466 147.237 mo
356.906 147.594 li
@
364.464 154.58 mo
364.911 154.803 li
@
364.144 153.496 mo
364.912 154.803 li
@
363.376 152.206 mo
363.816 152.564 li
@
363.049 151.556 mo
363.817 152.565 li
@
357.561 149.054 mo
358.001 149.565 li
@
357.234 148.2 mo
358.002 149.566 li
@
345.781 155.836 mo
345.012 155.666 li
@
344.571 155.924 mo
345.011 155.666 li
@
367.214 155.889 mo
366.446 155.748 li
@
366 155.994 mo
366.446 155.748 li
@
367.983 156.029 mo
368.423 155.788 li
@
350.744 149.933 mo
349.975 151.258 li
@
349.534 152.131 mo
349.975 151.258 li
@
346.549 155.812 mo
346.99 155.53 li
@
347.757 154.992 mo
346.989 155.531 li
@
350.301 150.879 mo
349.533 152.132 li
@
349.087 153.1 mo
349.533 152.133 li
@
348.645 153.986 mo
349.087 153.1 li
@
349.854 151.899 mo
349.087 153.1 li
@
343.358 156.018 mo
343.804 155.738 li
@
344.572 155.924 mo
343.803 155.736 li
@
346.549 155.814 mo
345.782 155.836 li
@
345.34 156.088 mo
345.782 155.836 li
@
362.61 151.171 mo
363.05 151.558 li
@
349.415 152.918 mo
348.647 153.985 li
@
348.206 154.529 mo
348.646 153.985 li
@
367.984 156.029 mo
367.215 155.887 li
@
366.769 156.133 mo
367.216 155.887 li
@
366.002 155.992 mo
365.235 155.658 li
@
364.466 154.58 mo
365.235 155.658 li
@
364.792 155.623 mo
365.234 155.658 li
@
363.698 153.149 mo
364.144 153.496 li
@
363.378 152.206 mo
364.146 153.496 li
@
345.341 156.085 mo
344.573 155.921 li
@
344.127 156.192 mo
344.573 155.921 li
@
356.468 147.237 mo
357.236 148.198 li
@
356.794 147.829 mo
357.235 148.198 li
@
366.769 156.133 mo
366.002 155.992 li
@
365.559 156.197 mo
366.001 155.992 li
@
347.758 154.99 mo
348.205 154.527 li
@
348.973 153.66 mo
348.205 154.527 li
@
367.537 156.268 mo
367.984 156.027 li
@
357.562 149.053 mo
357.922 149.581 li
@
347.317 155.429 mo
346.548 155.811 li
@
346.108 156.11 mo
346.548 155.811 li
@
342.917 156.292 mo
343.358 156.017 li
@
344.126 156.192 mo
343.358 156.015 li
@
364.024 154.323 mo
364.464 154.581 li
@
363.697 153.15 mo
364.465 154.581 li
@
356.467 147.237 mo
355.699 146.745 li
@
355.264 146.51 mo
355.7 146.744 li
@
344.893 156.343 mo
345.34 156.085 li
@
346.108 156.11 mo
345.34 156.085 li
@
356.026 146.957 mo
356.466 147.238 li
@
367.536 156.27 mo
366.767 156.134 li
@
366.327 156.345 mo
366.767 156.134 li
@
362.609 151.17 mo
363.377 152.207 li
@
362.935 151.81 mo
363.376 152.207 li
@
348.526 154.3 mo
347.757 154.991 li
@
347.317 155.431 mo
347.757 154.992 li
@
344.893 156.345 mo
344.126 156.194 li
@
343.684 156.45 mo
344.126 156.192 li
@
357.115 148.739 mo
357.561 149.054 li
@
356.794 147.83 mo
357.561 149.055 li
@
366.328 156.345 mo
365.56 156.199 li
@
364.792 155.624 mo
365.56 156.198 li
@
365.119 156.339 mo
365.558 156.198 li
@
364.024 154.323 mo
364.792 155.624 li
@
364.35 155.558 mo
364.79 155.622 li
@
367.094 156.479 mo
367.535 156.269 li
@
346.875 155.886 mo
346.107 156.11 li
@
345.661 156.425 mo
346.107 156.11 li
@
342.475 156.554 mo
342.916 156.29 li
@
343.683 156.449 mo
342.916 156.291 li
@
362.166 150.759 mo
362.608 151.168 li
@
345.66 156.425 mo
344.891 156.343 li
@
344.451 156.595 mo
344.891 156.343 li
@
351.95 148.203 mo
351.182 149.182 li
@
350.742 149.932 mo
351.182 149.182 li
@
363.255 152.804 mo
363.696 153.15 li
@
362.935 151.808 mo
363.697 153.15 li
@
348.084 154.913 mo
347.316 155.429 li
@
346.875 155.886 mo
347.316 155.429 li
@
365.885 156.519 mo
366.326 156.343 li
@
367.094 156.479 mo
366.326 156.343 li
@
349.854 151.896 mo
349.414 152.916 li
@
348.972 153.66 mo
349.413 152.916 li
@
350.18 152.136 mo
349.412 152.916 li
@
351.51 148.995 mo
350.742 149.932 li
@
350.3 150.877 mo
350.742 149.933 li
@
350.621 151.04 mo
349.852 151.896 li
@
350.3 150.877 mo
349.854 151.897 li
@
356.025 146.956 mo
356.793 147.829 li
@
356.345 147.64 mo
356.792 147.829 li
@
351.069 149.961 mo
350.3 150.875 li
@
343.243 156.7 mo
343.683 156.448 li
@
344.452 156.595 mo
343.683 156.449 li
@
363.256 152.804 mo
364.025 154.323 li
@
363.583 154.117 mo
364.023 154.322 li
@
357.114 148.738 mo
357.75 149.592 li
@
356.025 146.956 mo
355.262 146.511 li
@
354.815 146.458 mo
355.262 146.511 li
@
349.74 152.986 mo
348.971 153.66 li
@
348.525 154.298 mo
348.971 153.659 li
@
345.218 156.713 mo
345.659 156.425 li
@
346.427 156.326 mo
345.659 156.426 li
@
353.606 146.692 mo
352.838 147.267 li
@
352.397 147.629 mo
352.838 147.265 li
@
364.349 155.557 mo
365.118 156.336 li
@
364.669 156.478 mo
365.116 156.336 li
@
365.884 156.519 mo
365.116 156.336 li
@
366.652 156.654 mo
367.092 156.478 li
@
355.583 146.849 mo
356.024 146.954 li
@
347.643 155.517 mo
346.875 155.885 li
@
346.428 156.326 mo
346.875 155.887 li
@
343.242 156.701 mo
342.473 156.555 li
@
342.027 156.806 mo
342.473 156.555 li
@
345.217 156.713 mo
344.449 156.595 li
@
344.003 156.841 mo
344.45 156.595 li
@
363.901 155.558 mo
364.348 155.558 li
@
363.581 154.118 mo
364.349 155.558 li
@
349.292 153.76 mo
348.523 154.299 li
@
348.082 154.914 mo
348.523 154.299 li
@
362.486 151.469 mo
362.932 151.809 li
@
362.165 150.76 mo
362.934 151.809 li
@
353.606 146.693 mo
354.047 146.523 li
@
354.815 146.459 mo
354.047 146.523 li
@
356.672 148.709 mo
357.113 148.739 li
@
356.345 147.642 mo
357.114 148.74 li
@
365.439 156.685 mo
365.885 156.52 li
@
366.653 156.657 mo
365.885 156.522 li
@
342.795 156.95 mo
343.242 156.703 li
@
344.005 156.844 mo
343.243 156.703 li
@
351.951 148.206 mo
352.399 147.632 li
@
353.166 147.075 mo
352.398 147.632 li
@
345.987 156.732 mo
346.427 156.328 li
@
347.196 156.098 mo
346.427 156.327 li
@
348.851 154.482 mo
348.083 154.916 li
@
347.643 155.518 mo
348.084 154.914 li
@
345.988 156.732 mo
345.219 156.714 li
@
344.774 156.985 mo
345.22 156.714 li
@
361.721 150.444 mo
362.167 150.76 li
@
361.401 150.092 mo
362.169 150.761 li
@
341.588 157.054 mo
342.029 156.808 li
@
342.796 156.95 mo
342.029 156.808 li
@
366.207 156.833 mo
366.653 156.657 li
@
365.439 156.687 mo
364.671 156.482 li
@
363.903 155.562 mo
364.671 156.483 li
@
364.229 156.675 mo
364.67 156.483 li
@
362.488 151.472 mo
363.256 152.807 li
@
362.815 152.597 mo
363.255 152.808 li
@
360.953 149.779 mo
361.399 150.094 li
@
355.905 147.699 mo
356.345 147.646 li
@
355.584 146.855 mo
356.346 147.646 li
@
343.564 157.092 mo
344.005 156.845 li
@
344.773 156.988 mo
344.005 156.846 li
@
355.584 146.856 mo
354.817 146.463 li
@
354.375 146.622 mo
354.817 146.464 li
@
348.405 155.207 mo
347.643 155.523 li
@
347.197 156.103 mo
347.643 155.524 li
@
352.719 147.676 mo
351.951 148.209 li
@
351.511 149 mo
351.951 148.209 li
@
350.95 151.696 mo
350.181 152.14 li
@
349.741 152.991 mo
350.181 152.14 li
@
350.623 151.045 mo
350.182 152.141 li
@
356.999 149.774 mo
357.44 149.616 li
@
356.673 148.713 mo
357.44 149.616 li
@
358.145 149.574 mo
357.44 149.616 li
@
362.816 152.597 mo
363.584 154.121 li
@
363.136 154.075 mo
363.583 154.122 li
@
355.143 146.954 mo
355.584 146.855 li
@
353.167 147.078 mo
353.608 146.697 li
@
354.375 146.621 mo
353.608 146.697 li
@
351.39 150.565 mo
350.622 151.044 li
@
351.07 149.966 mo
350.623 151.044 li
@
349.295 153.763 mo
349.741 152.99 li
@
350.509 152.616 mo
349.741 152.991 li
@
345.542 157.081 mo
345.989 156.735 li
@
346.757 156.63 mo
345.989 156.735 li
@
363.464 155.698 mo
363.904 155.562 li
@
363.137 154.075 mo
363.905 155.562 li
@
351.072 149.967 mo
351.512 149 li
@
352.281 148.49 mo
351.512 149 li
@
366.21 156.835 mo
365.442 156.689 li
@
365.001 156.881 mo
365.442 156.688 li
@
351.84 149.468 mo
351.072 149.967 li
@
342.358 157.198 mo
342.799 156.953 li
@
343.567 157.093 mo
342.798 156.952 li
@
345.543 157.081 mo
344.775 156.987 li
@
344.334 157.24 mo
344.775 156.988 li
@
350.065 153.466 mo
349.296 153.765 li
@
348.855 154.486 mo
349.297 153.764 li
@
355.909 147.7 mo
356.676 148.714 li
@
356.235 148.925 mo
356.676 148.714 li
@
346.759 156.631 mo
347.2 156.103 li
@
347.968 155.886 mo
347.2 156.103 li
@
342.359 157.198 mo
341.592 157.057 li
@
341.144 157.303 mo
341.591 157.056 li
@
362.051 151.261 mo
362.492 151.472 li
@
361.725 150.447 mo
362.493 151.472 li
@
348.41 155.206 mo
348.856 154.485 li
@
349.625 154.257 mo
348.856 154.486 li
@
365.771 157.011 mo
366.212 156.835 li
@
363.794 156.975 mo
364.234 156.676 li
@
363.468 155.699 mo
364.235 156.678 li
@
365.003 156.883 mo
364.234 156.678 li
@
354.38 155.582 mo
354.793 154.914 li
@
355.56 153.994 mo
354.792 154.914 li
@
355.235 153.338 mo
354.793 154.914 li
@
354.025 153.771 mo
354.794 154.916 li
@
344.338 157.243 mo
343.57 157.096 li
@
343.129 157.348 mo
343.57 157.095 li
@
353.94 146.988 mo
353.173 147.082 li
@
352.725 147.678 mo
353.172 147.08 li
@
353.94 146.988 mo
354.381 146.625 li
@
355.149 146.958 mo
354.381 146.625 li
@
355.476 147.977 mo
355.912 147.703 li
@
355.149 146.958 mo
355.912 147.703 li
@
346.314 157.091 mo
345.546 157.085 li
@
345.105 157.372 mo
345.546 157.085 li
@
346.314 157.091 mo
346.761 156.634 li
@
347.53 156.516 mo
346.761 156.634 li
@
356.238 148.928 mo
357.006 149.778 li
@
357.773 149.696 mo
357.005 149.778 li
@
356.559 150.206 mo
357.005 149.778 li
@
349.179 155.035 mo
348.412 155.211 li
@
347.97 155.89 mo
348.412 155.21 li
@
360.959 149.785 mo
360.19 149.486 li
@
359.749 149.339 mo
360.189 149.486 li
@
353.579 154.607 mo
354.335 155.622 li
@
355.115 154.765 mo
354.428 155.544 li
@
343.129 157.35 mo
342.361 157.203 li
@
341.914 157.45 mo
342.36 157.203 li
@
354.708 147.311 mo
355.149 146.96 li
@
365.772 157.016 mo
365.004 156.887 li
@
364.563 157.133 mo
365.004 156.886 li
@
350.514 152.621 mo
350.955 151.701 li
@
351.396 150.57 mo
350.956 151.701 li
@
351.723 151.648 mo
350.955 151.701 li
@
362.374 152.55 mo
362.821 152.602 li
@
362.053 151.266 mo
362.822 152.602 li
@
363.027 155.996 mo
363.468 155.703 li
@
362.701 154.168 mo
363.469 155.703 li
@
361.285 150.271 mo
361.726 150.453 li
@
360.959 149.785 mo
361.727 150.453 li
@
345.104 157.374 mo
344.336 157.246 li
@
343.895 157.491 mo
344.336 157.245 li
@
351.281 152.586 mo
350.512 152.621 li
@
350.066 153.471 mo
350.512 152.621 li
@
352.284 148.495 mo
352.725 147.681 li
@
353.493 147.568 mo
352.725 147.679 li
@
362.374 152.549 mo
363.142 154.078 li
@
362.7 154.166 mo
363.14 154.078 li
@
355.791 149.407 mo
356.236 148.926 li
@
355.475 147.976 mo
356.238 148.926 li
@
360.517 149.634 mo
360.958 149.781 li
@
352.165 150.496 mo
351.396 150.565 li
@
351.844 149.47 mo
351.397 150.566 li
@
348.74 155.787 mo
347.971 155.887 li
@
347.532 156.514 mo
347.971 155.887 li
@
349.628 154.258 mo
350.069 153.467 li
@
350.837 153.455 mo
350.069 153.467 li
@
353.582 154.603 mo
354.028 153.77 li
@
354.47 152.435 mo
354.029 153.77 li
@
353.261 152.669 mo
354.029 153.77 li
@
355.678 151.983 mo
355.238 153.337 li
@
354.47 152.434 mo
355.238 153.336 li
@
356 152.762 mo
355.237 153.337 li
@
351.846 149.469 mo
352.287 148.491 li
@
353.055 148.379 mo
352.287 148.49 li
@
352.614 149.358 mo
351.846 149.468 li
@
341.917 157.445 mo
341.148 157.304 li
@
363.351 157.35 mo
363.798 156.975 li
@
363.031 155.992 mo
363.799 156.975 li
@
364.566 157.129 mo
363.798 156.976 li
@
352.815 153.584 mo
353.584 154.604 li
@
353.141 155.225 mo
353.582 154.603 li
@
354.711 147.307 mo
353.942 146.986 li
@
353.497 147.565 mo
353.944 146.986 li
@
347.085 157.064 mo
346.317 157.088 li
@
345.877 157.458 mo
346.317 157.089 li
@
342.686 157.593 mo
343.133 157.347 li
@
343.901 157.488 mo
343.133 157.347 li
@
349.183 155.033 mo
349.63 154.259 li
@
350.397 154.283 mo
349.629 154.259 li
@
356.122 150.935 mo
356.562 150.204 li
@
355.796 149.407 mo
356.564 150.204 li
@
357.331 150.069 mo
356.562 150.204 li
@
359.754 149.336 mo
358.985 149.372 li
@
358.546 149.46 mo
358.986 149.372 li
@
365.336 157.243 mo
365.776 157.014 li
@
357.332 150.069 mo
357.778 149.694 li
@
358.547 149.46 mo
357.778 149.694 li
@
345.879 157.459 mo
345.11 157.372 li
@
344.67 157.629 mo
345.111 157.372 li
@
354.714 147.31 mo
355.482 147.978 li
@
355.035 148.512 mo
355.481 147.978 li
@
348.303 156.482 mo
347.536 156.517 li
@
347.088 157.068 mo
347.536 156.516 li
@
353.144 155.228 mo
353.913 155.966 li
@
353.471 156.399 mo
353.911 155.965 li
@
354.679 155.344 mo
353.911 155.965 li
@
353.705 151.448 mo
354.473 152.438 li
@
354.92 151.196 mo
354.473 152.438 li
@
356.123 150.937 mo
355.682 151.987 li
@
356.443 151.629 mo
355.681 151.987 li
@
354.92 151.196 mo
355.682 151.987 li
@
348.743 155.79 mo
349.183 155.034 li
@
349.953 155.087 mo
349.184 155.034 li
@
354.266 147.867 mo
354.712 147.309 li
@
352.169 150.499 mo
351.728 151.646 li
@
352.496 151.963 mo
351.727 151.647 li
@
351.286 152.584 mo
351.727 151.646 li
@
355.359 150.158 mo
355.796 149.408 li
@
355.034 148.512 mo
355.796 149.408 li
@
355.359 150.158 mo
356.122 150.936 li
@
356.889 150.703 mo
356.121 150.935 li
@
350.839 153.456 mo
351.286 152.583 li
@
352.048 152.923 mo
351.286 152.583 li
@
342.686 157.593 mo
341.918 157.447 li
@
365.335 157.243 mo
364.566 157.131 li
@
364.12 157.447 mo
364.566 157.13 li
@
362.584 156.439 mo
363.031 155.994 li
@
362.263 154.453 mo
363.032 155.994 li
@
352.702 155.836 mo
353.141 155.227 li
@
352.375 154.365 mo
353.143 155.226 li
@
352.496 151.962 mo
353.264 152.671 li
@
352.816 153.585 mo
353.263 152.67 li
@
353.705 151.446 mo
353.264 152.671 li
@
353.057 148.38 mo
353.499 147.566 li
@
354.266 147.864 mo
353.498 147.564 li
@
361.612 151.245 mo
362.058 151.263 li
@
361.291 150.265 mo
362.059 151.261 li
@
351.608 153.751 mo
350.84 153.452 li
@
350.399 154.279 mo
350.84 153.452 li
@
352.618 149.355 mo
352.171 150.494 li
@
352.937 150.791 mo
352.17 150.493 li
@
343.455 157.728 mo
343.901 157.483 li
@
344.669 157.623 mo
343.901 157.483 li
@
352.376 154.359 mo
352.816 153.58 li
@
352.049 152.918 mo
352.817 153.58 li
@
354.153 150.28 mo
354.921 151.188 li
@
355.36 150.152 mo
354.92 151.188 li
@
348.301 156.474 mo
348.742 155.783 li
@
349.51 155.853 mo
348.742 155.783 li
@
354.592 149.29 mo
355.36 150.151 li
@
352.936 150.79 mo
352.496 151.956 li
@
352.048 152.917 mo
352.495 151.956 li
@
351.607 153.749 mo
352.048 152.917 li
@
362.586 156.434 mo
363.354 157.348 li
@
362.913 157.711 mo
363.353 157.348 li
@
364.122 157.441 mo
363.354 157.346 li
@
352.617 149.353 mo
353.057 148.374 li
@
353.826 148.657 mo
353.057 148.376 li
@
349.953 155.08 mo
350.398 154.277 li
@
351.167 154.571 mo
350.398 154.278 li
@
353.385 149.641 mo
352.618 149.354 li
@
354.267 147.861 mo
355.035 148.506 li
@
354.593 149.291 mo
355.035 148.506 li
@
347.856 157.079 mo
347.088 157.06 li
@
346.647 157.506 mo
347.088 157.061 li
@
352.938 150.791 mo
353.707 151.441 li
@
354.154 150.281 mo
353.707 151.442 li
@
346.647 157.507 mo
345.879 157.454 li
@
345.438 157.747 mo
345.879 157.454 li
@
362.265 154.448 mo
362.706 154.161 li
@
361.939 152.66 mo
362.708 154.16 li
@
359.315 149.402 mo
359.756 149.331 li
@
360.524 149.63 mo
359.756 149.331 li
@
351.935 155.115 mo
352.376 154.359 li
@
351.609 153.749 mo
352.377 154.359 li
@
353.827 148.657 mo
354.267 147.86 li
@
361.613 151.242 mo
362.381 152.543 li
@
361.939 152.66 mo
362.38 152.543 li
@
351.168 154.571 mo
351.608 153.75 li
@
353.386 149.641 mo
352.938 150.79 li
@
352.257 156.452 mo
352.705 155.831 li
@
351.936 155.116 mo
352.706 155.831 li
@
353.472 156.392 mo
352.705 155.829 li
@
354.239 155.948 mo
353.472 156.392 li
@
353.024 156.903 mo
353.472 156.393 li
@
358.101 149.778 mo
357.333 150.065 li
@
356.892 150.699 mo
357.333 150.065 li
@
343.456 157.731 mo
342.687 157.589 li
@
355.121 154.759 mo
355.566 153.991 li
@
356.003 152.761 mo
355.567 153.991 li
@
356.329 153.114 mo
355.566 153.993 li
@
349.511 155.857 mo
349.952 155.083 li
@
350.72 155.364 mo
349.952 155.083 li
@
349.071 156.577 mo
348.302 156.477 li
@
347.855 157.081 mo
348.302 156.478 li
@
353.384 149.643 mo
354.152 150.283 li
@
354.592 149.293 mo
354.152 150.283 li
@
353.825 148.66 mo
354.592 149.293 li
@
364.888 157.497 mo
365.336 157.24 li
@
360.844 150.265 mo
361.29 150.265 li
@
360.523 149.632 mo
361.291 150.265 li
@
350.72 155.364 mo
351.167 154.574 li
@
351.934 155.118 mo
351.166 154.574 li
@
353.384 149.643 mo
353.825 148.66 li
@
345.437 157.748 mo
344.669 157.625 li
@
344.222 157.872 mo
344.669 157.625 li
@
351.487 155.844 mo
351.934 155.117 li
@
362.144 156.988 mo
362.585 156.436 li
@
361.818 154.895 mo
362.586 156.437 li
@
360.077 149.673 mo
360.523 149.632 li
@
359.314 149.403 mo
358.546 149.456 li
@
358.099 149.778 mo
358.546 149.456 li
@
355.882 153.891 mo
355.12 154.758 li
@
354.678 155.338 mo
355.12 154.758 li
@
349.071 156.574 mo
349.511 155.853 li
@
350.279 156.117 mo
349.511 155.853 li
@
356.444 151.622 mo
356.004 152.759 li
@
356.771 152.09 mo
356.003 152.758 li
@
364.889 157.493 mo
364.122 157.44 li
@
363.681 157.768 mo
364.122 157.44 li
@
351.489 155.84 mo
350.72 155.361 li
@
350.28 156.115 mo
350.721 155.359 li
@
356.446 151.62 mo
356.892 150.695 li
@
357.661 150.325 mo
356.893 150.695 li
@
351.816 157.052 mo
352.256 156.45 li
@
351.489 155.839 mo
352.258 156.448 li
@
353.024 156.9 mo
352.256 156.449 li
@
351.048 156.543 mo
351.488 155.84 li
@
346.206 157.85 mo
346.647 157.504 li
@
347.415 157.576 mo
346.647 157.506 li
@
347.415 157.576 mo
347.855 157.078 li
@
348.624 157.201 mo
347.855 157.078 li
@
357.212 151.124 mo
356.443 151.622 li
@
362.145 156.984 mo
362.914 157.71 li
@
362.472 157.967 mo
362.913 157.709 li
@
363.682 157.768 mo
362.915 157.709 li
@
344.224 157.869 mo
343.456 157.727 li
@
353.792 156.579 mo
353.023 156.901 li
@
352.583 157.423 mo
353.023 156.902 li
@
348.625 157.2 mo
349.072 156.573 li
@
349.839 156.831 mo
349.07 156.573 li
@
351.048 156.543 mo
350.28 156.116 li
@
349.839 156.831 mo
350.279 156.116 li
@
346.206 157.85 mo
345.438 157.745 li
@
344.992 158.009 mo
345.438 157.745 li
@
361.498 152.951 mo
362.266 154.446 li
@
361.818 154.89 mo
362.264 154.446 li
@
361.704 157.456 mo
362.144 156.982 li
@
361.377 155.458 mo
362.145 156.982 li
@
355.447 154.584 mo
354.678 155.335 li
@
354.238 155.944 mo
354.678 155.335 li
@
351.814 157.051 mo
351.046 156.541 li
@
350.605 157.192 mo
351.046 156.542 li
@
360.844 150.259 mo
361.613 151.239 li
@
361.171 151.384 mo
361.612 151.239 li
@
352.582 157.42 mo
351.814 157.051 li
@
351.373 157.602 mo
351.814 157.051 li
@
364.448 157.785 mo
364.888 157.492 li
@
350.605 157.193 mo
349.837 156.831 li
@
349.39 157.427 mo
349.837 156.83 li
@
360.075 149.668 mo
359.312 149.398 li
@
358.866 149.686 mo
359.312 149.4 li
@
361.496 152.951 mo
361.936 152.659 li
@
361.17 151.387 mo
361.938 152.659 li
@
349.39 157.429 mo
348.623 157.202 li
@
348.181 157.71 mo
348.622 157.2 li
@
357.658 150.327 mo
358.098 149.776 li
@
358.866 149.687 mo
358.097 149.776 li
@
344.99 158.009 mo
344.221 157.868 li
@
348.18 157.71 mo
347.412 157.575 li
@
346.971 157.962 mo
347.412 157.575 li
@
364.447 157.786 mo
363.679 157.768 li
@
363.238 158.067 mo
363.679 157.768 li
@
353.348 157.212 mo
352.58 157.423 li
@
352.139 157.88 mo
352.58 157.423 li
@
350.157 157.74 mo
350.602 157.194 li
@
351.371 157.603 mo
350.602 157.193 li
@
355.004 155.3 mo
354.236 155.945 li
@
353.789 156.577 mo
354.235 155.944 li
@
345.757 158.136 mo
346.203 157.849 li
@
346.971 157.96 mo
346.203 157.849 li
@
360.075 149.668 mo
360.843 150.26 li
@
360.401 150.471 mo
360.842 150.26 li
@
360.934 155.992 mo
361.703 157.457 li
@
361.256 157.58 mo
361.702 157.456 li
@
362.47 157.966 mo
361.702 157.456 li
@
359.634 149.898 mo
360.075 149.669 li
@
361.376 155.459 mo
361.817 154.891 li
@
361.049 153.426 mo
361.818 154.891 li
@
362.024 158.201 mo
362.47 157.967 li
@
363.239 158.066 mo
362.47 157.965 li
@
350.927 158.043 mo
351.373 157.604 li
@
352.141 157.879 mo
351.373 157.604 li
@
350.159 157.739 mo
349.391 157.426 li
@
348.95 157.914 mo
349.39 157.428 li
@
357.212 151.123 mo
357.659 150.326 li
@
358.427 150.185 mo
357.659 150.327 li
@
345.759 158.137 mo
344.992 158.009 li
@
347.742 158.102 mo
348.182 157.709 li
@
348.95 157.914 mo
348.181 157.709 li
@
353.349 157.211 mo
353.79 156.578 li
@
354.558 156.027 mo
353.79 156.578 li
@
349.717 158.154 mo
350.158 157.739 li
@
350.926 158.043 mo
350.158 157.739 li
@
352.908 157.797 mo
352.139 157.879 li
@
351.693 158.242 mo
352.139 157.879 li
@
355.881 153.887 mo
356.327 153.108 li
@
357.095 152.639 mo
356.327 153.108 li
@
356.769 152.087 mo
356.328 153.107 li
@
356.769 152.087 mo
357.209 151.121 li
@
357.977 150.869 mo
357.209 151.12 li
@
364.005 158.058 mo
364.446 157.783 li
@
346.524 158.263 mo
346.971 157.958 li
@
347.74 158.099 mo
346.971 157.958 li
@
357.537 151.73 mo
356.769 152.086 li
@
360.727 151.73 mo
361.496 152.948 li
@
358.424 150.182 mo
358.864 149.683 li
@
361.048 153.423 mo
361.495 152.947 li
@
359.633 149.896 mo
358.865 149.684 li
@
360.4 150.469 mo
361.169 151.383 li
@
360.727 151.73 mo
361.168 151.383 li
@
360.933 155.99 mo
361.374 155.457 li
@
360.606 154.01 mo
361.375 155.457 li
@
364.004 158.059 mo
363.236 158.065 li
@
362.789 158.252 mo
363.235 158.064 li
@
355.444 154.583 mo
355.879 153.887 li
@
356.647 153.4 mo
355.879 153.885 li
@
349.714 158.152 mo
348.946 157.912 li
@
348.505 158.276 mo
348.946 157.912 li
@
354.114 156.768 mo
353.345 157.209 li
@
352.906 157.793 mo
353.346 157.207 li
@
350.481 158.355 mo
350.923 158.039 li
@
351.691 158.238 mo
350.923 158.039 li
@
346.523 158.26 mo
345.756 158.131 li
@
359.96 150.854 mo
360.4 150.467 li
@
359.633 149.893 mo
360.401 150.467 li
@
359.192 150.338 mo
359.633 149.893 li
@
362.791 158.249 mo
362.023 158.196 li
@
361.256 157.576 mo
362.023 158.197 li
@
361.582 158.348 mo
362.023 158.196 li
@
348.508 158.273 mo
347.741 158.095 li
@
347.293 158.401 mo
347.74 158.095 li
@
356.208 154.082 mo
355.446 154.579 li
@
355.005 155.295 mo
355.446 154.579 li
@
360.814 157.663 mo
361.256 157.575 li
@
360.489 156.263 mo
361.258 157.575 li
@
360.489 156.263 mo
360.935 155.988 li
@
360.168 154.605 mo
360.935 155.988 li
@
357.979 150.867 mo
358.427 150.181 li
@
359.194 150.339 mo
358.426 150.181 li
@
360.609 154.008 mo
361.049 153.422 li
@
360.284 152.25 mo
361.051 153.422 li
@
349.277 158.461 mo
349.717 158.15 li
@
350.484 158.357 mo
349.717 158.152 li
@
352.462 158.282 mo
351.693 158.24 li
@
351.253 158.51 mo
351.693 158.24 li
@
352.462 158.282 mo
352.909 157.795 li
@
353.677 157.49 mo
352.909 157.795 li
@
359.962 150.856 mo
360.73 151.73 li
@
360.284 152.251 mo
360.729 151.729 li
@
347.294 158.404 mo
346.525 158.262 li
@
363.56 158.227 mo
364.007 158.057 li
@
355.768 154.829 mo
355.006 155.298 li
@
354.559 156.024 mo
355.006 155.296 li
@
358.748 150.972 mo
357.979 150.868 li
@
357.539 151.728 mo
357.979 150.868 li
@
348.062 158.56 mo
348.509 158.275 li
@
349.278 158.46 mo
348.509 158.274 li
@
351.255 158.507 mo
350.487 158.355 li
@
350.046 158.612 mo
350.485 158.354 li
@
358.749 150.97 mo
359.196 150.337 li
@
359.964 150.852 mo
359.197 150.336 li
@
363.562 158.225 mo
362.793 158.248 li
@
362.352 158.384 mo
362.793 158.248 li
@
360.169 154.605 mo
360.609 154.006 li
@
359.842 152.87 mo
360.61 154.007 li
@
358.307 151.739 mo
357.539 151.727 li
@
357.097 152.635 mo
357.539 151.726 li
@
359.516 151.41 mo
359.963 150.853 li
@
354.12 156.765 mo
354.56 156.022 li
@
355.33 155.593 mo
354.56 156.022 li
@
356.653 153.397 mo
357.098 152.634 li
@
357.867 152.565 mo
357.098 152.634 li
@
348.063 158.558 mo
347.295 158.401 li
@
352.023 158.629 mo
352.463 158.278 li
@
353.231 158.125 mo
352.463 158.278 li
@
359.843 152.868 mo
360.284 152.247 li
@
359.517 151.409 mo
360.285 152.247 li
@
350.046 158.611 mo
349.278 158.459 li
@
348.831 158.711 mo
349.278 158.459 li
@
359.723 155.025 mo
360.491 156.261 li
@
360.05 156.52 mo
360.49 156.262 li
@
353.679 157.487 mo
354.119 156.765 li
@
354.888 156.379 mo
354.12 156.766 li
@
356.211 154.082 mo
356.651 153.397 li
@
357.42 153.238 mo
356.651 153.397 li
@
362.353 158.384 mo
361.585 158.348 li
@
361.144 158.484 mo
361.585 158.348 li
@
360.817 157.664 mo
361.585 158.35 li
@
359.517 151.411 mo
358.749 150.972 li
@
358.308 151.739 mo
358.749 150.971 li
@
350.814 158.754 mo
351.255 158.508 li
@
352.023 158.631 mo
351.255 158.508 li
@
359.724 155.027 mo
360.171 154.606 li
@
359.405 153.556 mo
360.172 154.606 li
@
360.051 156.522 mo
360.818 157.665 li
@
360.378 157.839 mo
360.817 157.664 li
@
359.077 152.109 mo
359.516 151.412 li
@
359.077 152.109 mo
358.307 151.739 li
@
357.867 152.567 mo
358.307 151.74 li
@
354.447 157.171 mo
353.678 157.487 li
@
353.232 158.127 mo
353.678 157.488 li
@
359.404 153.556 mo
359.842 152.87 li
@
359.077 152.109 mo
359.844 152.871 li
@
363.122 158.367 mo
363.561 158.226 li
@
348.832 158.713 mo
348.064 158.561 li
@
356.98 153.92 mo
356.212 154.084 li
@
355.771 154.828 mo
356.211 154.084 li
@
350.815 158.754 mo
350.047 158.613 li
@
349.6 158.86 mo
350.047 158.613 li
@
358.636 152.871 mo
357.868 152.567 li
@
357.421 153.24 mo
357.868 152.567 li
@
358.636 152.871 mo
359.077 152.109 li
@
352.792 158.638 mo
352.023 158.632 li
@
351.582 158.896 mo
352.023 158.632 li
@
356.538 154.624 mo
355.77 154.829 li
@
355.33 155.596 mo
355.77 154.828 li
@
361.913 158.537 mo
362.353 158.386 li
@
363.122 158.367 mo
362.353 158.386 li
@
358.636 152.87 mo
359.405 153.556 li
@
358.956 154.077 mo
359.404 153.555 li
@
352.792 158.636 mo
353.231 158.126 li
@
354 157.905 mo
353.231 158.128 li
@
358.956 154.078 mo
359.723 155.027 li
@
359.283 155.426 mo
359.722 155.028 li
@
358.187 153.487 mo
358.634 152.871 li
@
349.599 158.861 mo
348.831 158.713 li
@
359.609 156.828 mo
360.05 156.523 li
@
359.283 155.427 mo
360.051 156.524 li
@
356.979 153.921 mo
357.42 153.241 li
@
358.187 153.487 mo
357.419 153.24 li
@
356.09 155.384 mo
355.328 155.595 li
@
354.887 156.38 mo
355.328 155.595 li
@
351.58 158.894 mo
350.812 158.753 li
@
350.366 159 mo
350.812 158.753 li
@
361.91 158.536 mo
361.142 158.484 li
@
360.694 158.689 mo
361.141 158.484 li
@
360.375 157.838 mo
361.143 158.483 li
@
359.928 158.108 mo
360.375 157.838 li
@
359.608 156.825 mo
360.376 157.838 li
@
354.447 157.17 mo
354.887 156.379 li
@
355.654 156.179 mo
354.887 156.379 li
@
358.187 153.485 mo
358.955 154.077 li
@
358.514 154.591 mo
358.955 154.075 li
@
356.537 154.621 mo
356.978 153.917 li
@
357.746 154.093 mo
356.978 153.918 li
@
357.746 154.093 mo
358.186 153.485 li
@
353.557 158.529 mo
352.79 158.634 li
@
352.348 158.999 mo
352.789 158.635 li
@
350.367 158.999 mo
349.598 158.858 li
@
362.68 158.518 mo
363.121 158.366 li
@
355.214 156.977 mo
354.447 157.17 li
@
353.999 157.904 mo
354.446 157.171 li
@
358.841 155.876 mo
359.282 155.425 li
@
358.514 154.593 mo
359.283 155.425 li
@
351.134 159.146 mo
351.581 158.894 li
@
352.349 159 mo
351.58 158.894 li
@
357.305 154.733 mo
356.537 154.622 li
@
356.09 155.382 mo
356.537 154.621 li
@
362.679 158.517 mo
361.911 158.535 li
@
361.464 158.746 mo
361.911 158.535 li
@
359.161 157.24 mo
359.607 156.824 li
@
358.84 155.875 mo
359.608 156.825 li
@
353.557 158.529 mo
353.998 157.903 li
@
354.766 157.756 mo
353.998 157.902 li
@
358.513 154.591 mo
357.745 154.093 li
@
357.304 154.733 mo
357.745 154.093 li
@
358.072 155.161 mo
358.512 154.593 li
@
356.857 155.442 mo
356.089 155.382 li
@
355.654 156.179 mo
356.089 155.383 li
@
351.133 159.144 mo
350.366 158.999 li
@
360.254 158.981 mo
360.694 158.687 li
@
359.927 158.108 mo
360.695 158.687 li
@
361.463 158.746 mo
360.694 158.687 li
@
359.16 157.24 mo
359.928 158.108 li
@
359.487 158.494 mo
359.927 158.108 li
@
351.9 159.279 mo
352.347 158.999 li
@
353.116 159.014 mo
352.347 158.997 li
@
356.416 156.207 mo
355.653 156.177 li
@
355.212 156.975 mo
355.653 156.177 li
@
353.115 159.013 mo
353.555 158.528 li
@
354.324 158.446 mo
353.555 158.527 li
@
358.391 156.412 mo
358.838 155.873 li
@
358.071 155.158 mo
358.838 155.873 li
@
356.856 155.439 mo
357.303 154.73 li
@
358.071 155.158 mo
357.303 154.73 li
@
354.764 157.754 mo
355.211 156.975 li
@
357.623 155.796 mo
358.068 155.157 li
@
355.973 156.998 mo
355.211 156.975 li
@
358.391 156.412 mo
359.159 157.238 li
@
358.718 157.742 mo
359.159 157.238 li
@
362.23 158.733 mo
362.677 158.515 li
@
351.899 159.277 mo
351.131 159.141 li
@
356.415 156.207 mo
356.855 155.439 li
@
357.624 155.797 mo
356.855 155.44 li
@
354.324 158.446 mo
354.764 157.755 li
@
355.533 157.765 mo
354.764 157.754 li
@
362.23 158.734 mo
361.462 158.745 li
@
361.021 159.033 mo
361.462 158.745 li
@
357.624 155.798 mo
358.392 156.413 li
@
357.95 157.028 mo
358.39 156.413 li
@
359.038 158.922 mo
359.484 158.493 li
@
360.253 158.981 mo
359.484 158.494 li
@
358.718 157.744 mo
359.486 158.494 li
@
357.182 156.496 mo
357.623 155.799 li
@
353.882 159.004 mo
353.114 159.016 li
@
352.668 159.367 mo
353.115 159.014 li
@
357.183 156.496 mo
356.415 156.209 li
@
355.974 157 mo
356.415 156.208 li
@
359.806 159.315 mo
360.253 158.979 li
@
361.021 159.034 mo
360.253 158.981 li
@
353.882 159.004 mo
354.323 158.448 li
@
355.091 158.477 mo
354.323 158.449 li
@
352.668 159.369 mo
351.9 159.281 li
@
357.95 157.031 mo
358.718 157.746 li
@
358.275 158.314 mo
358.717 157.746 li
@
355.532 157.768 mo
355.972 157.001 li
@
356.74 157.237 mo
355.972 157.002 li
@
357.949 157.031 mo
357.18 156.498 li
@
356.74 157.237 mo
357.18 156.498 li
@
357.508 157.7 mo
357.949 157.031 li
@
356.293 157.98 mo
355.53 157.768 li
@
355.09 158.477 mo
355.53 157.768 li
@
361.788 159.016 mo
362.228 158.737 li
@
357.508 157.7 mo
356.74 157.237 li
@
356.293 157.98 mo
356.74 157.237 li
@
358.274 158.314 mo
359.037 158.923 li
@
359.804 159.317 mo
359.036 158.923 li
@
358.596 159.369 mo
359.038 158.925 li
@
354.649 159.064 mo
353.881 159.005 li
@
353.434 159.422 mo
353.881 159.005 li
@
357.508 157.699 mo
358.275 158.313 li
@
357.829 158.876 mo
358.274 158.313 li
@
360.574 159.374 mo
361.02 159.035 li
@
361.788 159.016 mo
361.019 159.036 li
@
353.433 159.421 mo
352.665 159.367 li
@
357.06 158.365 mo
357.506 157.698 li
@
354.647 159.062 mo
355.088 158.476 li
@
355.85 158.652 mo
355.088 158.475 li
@
360.573 159.373 mo
359.804 159.315 li
@
359.364 159.649 mo
359.803 159.315 li
@
357.06 158.365 mo
356.292 157.978 li
@
355.85 158.652 mo
356.291 157.978 li
@
357.828 158.875 mo
357.06 158.365 li
@
356.619 158.987 mo
357.06 158.365 li
@
358.596 159.367 mo
357.828 158.875 li
@
357.387 159.396 mo
357.828 158.874 li
@
355.411 159.226 mo
355.85 158.652 li
@
356.619 158.987 mo
355.85 158.652 li
@
355.411 159.226 mo
354.648 159.062 li
@
354.201 159.501 mo
354.648 159.062 li
@
358.154 159.741 mo
358.595 159.366 li
@
359.364 159.648 mo
358.595 159.366 li
@
354.201 159.5 mo
353.433 159.418 li
@
361.341 159.355 mo
361.787 159.013 li
@
361.341 159.355 mo
360.573 159.372 li
@
360.132 159.723 mo
360.573 159.371 li
@
357.387 159.395 mo
356.619 158.986 li
@
356.172 159.5 mo
356.619 158.985 li
@
358.922 159.927 mo
359.363 159.648 li
@
360.131 159.722 mo
359.363 159.647 li
@
356.94 159.804 mo
357.387 159.394 li
@
358.155 159.74 mo
357.387 159.394 li
@
356.173 159.5 mo
355.412 159.225 li
@
354.97 159.659 mo
355.412 159.225 li
@
354.97 159.659 mo
354.202 159.5 li
@
357.709 160.028 mo
358.155 159.74 li
@
358.923 159.926 mo
358.155 159.74 li
@
355.732 159.88 mo
356.173 159.499 li
@
356.941 159.803 mo
356.173 159.498 li
@
360.9 159.727 mo
361.342 159.352 li
@
359.692 160.043 mo
360.133 159.721 li
@
360.9 159.727 mo
360.132 159.721 li
@
355.732 159.88 mo
354.97 159.657 li
@
356.501 160.109 mo
356.941 159.803 li
@
357.71 160.027 mo
356.942 159.803 li
@
359.692 160.044 mo
358.924 159.927 li
@
358.477 160.174 mo
358.924 159.927 li
@
356.501 160.11 mo
355.732 159.881 li
@
357.269 160.279 mo
357.71 160.028 li
@
358.477 160.174 mo
357.71 160.028 li
@
360.46 160.097 mo
360.9 159.728 li
@
360.46 160.097 mo
359.692 160.044 li
@
359.245 160.314 mo
359.691 160.044 li
@
357.267 160.28 mo
356.499 160.111 li
@
358.035 160.421 mo
358.476 160.175 li
@
359.244 160.315 mo
358.476 160.175 li
@
360.012 160.416 mo
360.459 160.099 li
@
358.036 160.422 mo
357.267 160.281 li
@
360.012 160.416 mo
359.244 160.315 li
@
358.803 160.562 mo
359.244 160.316 li
@
358.803 160.562 mo
358.036 160.422 li
@
359.572 160.691 mo
360.012 160.417 li
@
359.572 160.691 mo
358.803 160.562 li
@
359.572 164.646 mo
370.212 158.735 li
@
359.572 164.646 mo
341.151 161.236 li
346.514 158.253 li
@
370.212 158.735 mo
364.58 157.69 li
@
341.151 157.293 mo
341.151 161.236 li
@
341.151 149.417 mo
341.151 157.293 li
@
307.765 135.654 mo
379.098 135.654 li
379.098 110.321 li
307.765 110.321 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
1 lw
379.098 135.654 mo
307.765 135.654 li
307.765 110.321 li
379.098 110.321 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.21569 .21176 .22353 colr
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
PRZTWJ+Myriad-Roman*1 [12 0 0 -12 0 0 ]msf
336.092 124.986 mo
(E)sh
PRZTWJ+Myriad-Roman*1 [8 0 0 -8 0 0 ]msf
344.772 127.657 mo
(1)sh
PRZTWJ+Myriad-Roman*1 [12 0 0 -12 0 0 ]msf
321.092 158.647 mo
(E)sh
PRZTWJ+Myriad-Roman*1 [8 0 0 -8 0 0 ]msf
329.772 161.319 mo
(0)sh
308.098 104.654 mo
379.431 104.654 li
379.431 79.321 li
308.098 79.321 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
379.431 104.654 mo
308.098 104.654 li
308.098 79.321 li
379.431 79.321 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.21569 .21176 .22353 colr
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
PRZTWJ+Myriad-Roman*1 [12 0 0 -12 0 0 ]msf
336.428 93.9755 mo
(E)sh
PRZTWJ+Myriad-Roman*1 [8 0 0 -8 0 0 ]msf
345.1 96.6552 mo
(2)sh
307.692 67.351 mo
379.025 67.351 li
379.025 42.018 li
307.692 42.018 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
379.025 67.351 mo
307.692 67.351 li
307.692 42.018 li
379.025 42.018 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.21569 .21176 .22353 colr
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
PRZTWJ+Myriad-Roman*1 [10 0 0 -10 0 0 ]msf
322.586 51.8427 mo
(Evolution)
[4.91003 4.80005 5.47995 2.32993 5.49997 3.29993 2.32993 5.47998 0 ]xsh
322.586 63.8427 mo
(Operators)
[6.87994 5.68002 5.00006 3.25995 4.80997 3.29993 5.47995 3.25998 0 ]xsh
394.824 53.528 mo
394.824 155.194 li
0 gry
@
378.253 53.528 mo
394.824 53.528 li
@
378.842 154.547 mo
395.413 154.547 li
@
389.542 95.114 mo
394.692 99.372 li
399.843 95.114 li
394.692 106.179 li
389.542 95.114 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.92157 .17255 .19608 colr
f
389.542 95.114 mo
394.692 99.372 li
399.843 95.114 li
394.692 106.179 li
389.542 95.114 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
f
true set_gvm
%ADOBeginSubsetFont: PBAAAA+Myriad-Roman AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
PRZTWJ+Myriad-Roman dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B896187A> |-
/three <1C60D8A8C9B7BA8F622456C4A5B0CA9B1BA284AF806928062A6B7B09
FB3F0AFA0642E6C0751425F3A334CD3C228AEC4E90E461897DA0B6E68544752B
67A4F1AF2BA515FBEB3354381D1AEEE9228166830748EBCCD49650729B252BA0
AF9C83ED55793E92C62149841E4908A8558158DB07B1A2459DA9352556689C84
555CD18A1256253A8BD45BD25F8CE8656AC404840665CF1FB17FCFAF> |-
/D <1C60D8A8C9B64FADC8BE4593403BE5D424DEB8DFFAE06BF72BBBE59144ED
4D0D76A92E2A49E01C3250FA16D36E8432D1D43D5E2102AD433DB45A0071881F
56B96D80899632681F5387E21E3857808D19596B03B665F61B98CDE5985F3C9D
9C49CC8D985A3DCCA9E35E03A97C34> |-
/m <1C60D8A8C9B6B7700392E60257FC106462D2DFCBC2A10C44EFEDC74AE4DA
23DDA2D9D4E78E5DFA35F442401F635CE4EC97BE57329CAA46C6A3C6CC0DEBBD
4CB8E8B931000F3668CFD86F5BA98BC18E8B1DBC445FD65D7EC5C67C2E7AD143
C336B225F9618FB19106222772767E98CA6DE74BDC9E6E1E91AF0A9BC200F979
51D7A45F25C7DC5AD757FFD60E2D9250E771B55218F79A54B61A1C40C396FB> |-
systemdict /gcheck known {setglobal} if end {end} if
end
PRZTWJ+Myriad-Roman /Encoding get
dup 32 /space put
dup 51 /three put
dup 68 /D put
dup 109 /m put
pop
%ADOEndSubsetFont
reset_gvm
/PRZTWJ+Myriad-Roman*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three 16{/.notdef}rp 
/D /E 7{/.notdef}rp /M /.notdef /O 17{/.notdef}rp /a 
3{/.notdef}rp /e /.notdef /g /.notdef /i 2{/.notdef}rp /l 
/m /n /o /p /.notdef /r /s /t 
/u /v 137{/.notdef}rp]
PRZTWJ+Myriad-Roman nf
PRZTWJ+Myriad-Roman*1 [14 0 0 -14 0 0 ]msf
297.6 29.0097 mo
(Deme 3)
[9.32401 7.0141 11.676 7.0141 3.04929 0 ]xsh
15.3106 29.6635 mo
(Deme 1)
[9.32401 7.0141 11.676 7.0141 3.05488 0 ]xsh
152.028 28.4553 mo
(Deme 2)
[9.32401 7.0141 11.676 7.0141 3.05208 0 ]xsh
195.751 66.447 mo
195.751 77.72 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.21569 .21176 .22353 colr
@
195.187 103.65 mo
195.187 109.005 li
@
195.469 134.653 mo
195.469 140.007 li
@
341.18 67.293 mo
341.18 79.13 li
@
341.18 104.214 mo
341.18 109.569 li
@
341.18 135.216 mo
341.18 140.854 li
@
59.058 67.011 mo
59.058 79.13 li
@
59.058 104.496 mo
59.058 110.697 li
@
59.621 135.498 mo
59.621 140.853 li
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.29 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
